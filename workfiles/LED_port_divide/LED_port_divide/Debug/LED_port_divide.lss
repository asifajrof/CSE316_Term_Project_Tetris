
LED_port_divide.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000000fa  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000649  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a9  00000000  00000000  0000084d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000299  00000000  00000000  00000df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001090  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034f  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000098  00000000  00000000  00001403  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000149b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

int main(void)
{
    /* Replace with your application code */
	
	MCUCSR |= 1<<JTD;
  82:	84 b7       	in	r24, 0x34	; 52
  84:	80 68       	ori	r24, 0x80	; 128
  86:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= 1<<JTD;
  88:	84 b7       	in	r24, 0x34	; 52
  8a:	80 68       	ori	r24, 0x80	; 128
  8c:	84 bf       	out	0x34, r24	; 52
	
	DDRA = 0xF0;
  8e:	80 ef       	ldi	r24, 0xF0	; 240
  90:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  92:	9f ef       	ldi	r25, 0xFF	; 255
  94:	97 bb       	out	0x17, r25	; 23
	DDRC = 0xFF;
  96:	94 bb       	out	0x14, r25	; 20
	DDRD = 0xF0;
  98:	81 bb       	out	0x11, r24	; 17
	uint8_t led_col = 0x00;
	int i = 7;
  9a:	27 e0       	ldi	r18, 0x07	; 7
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <main+0x22>
		PORTB = ~0x0; // upper matrix column
		//PORTA = ~0x0; // lower matrix column
		PORTA |= 0xF0;
		PORTD |= 0xF0;
		
		if(i == 7) i = 0;
  a0:	20 e0       	ldi	r18, 0x00	; 0
  a2:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t led_col = 0x00;
	int i = 7;
	
    while (1) 
    {
		PORTC = 0x00; // common row connection
  a4:	15 ba       	out	0x15, r1	; 21
		PORTC |= row[i]; // common row connection
  a6:	f9 01       	movw	r30, r18
  a8:	e0 5a       	subi	r30, 0xA0	; 160
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	90 81       	ld	r25, Z
  ae:	85 b3       	in	r24, 0x15	; 21
  b0:	89 2b       	or	r24, r25
  b2:	85 bb       	out	0x15, r24	; 21
		PORTB = 0x00; // upper matrix column
  b4:	18 ba       	out	0x18, r1	; 24
		// lower matrix column
		led_col = ~(0b01010101);
		PORTA &= 0x0F;
  b6:	8b b3       	in	r24, 0x1b	; 27
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	8b bb       	out	0x1b, r24	; 27
		PORTD &= 0x0F;
  bc:	82 b3       	in	r24, 0x12	; 18
  be:	8f 70       	andi	r24, 0x0F	; 15
  c0:	82 bb       	out	0x12, r24	; 18
		PORTA |= (led_col & 0x0F) << 4;
  c2:	8b b3       	in	r24, 0x1b	; 27
  c4:	80 6a       	ori	r24, 0xA0	; 160
  c6:	8b bb       	out	0x1b, r24	; 27
		PORTD |= (led_col & 0xF0);
  c8:	82 b3       	in	r24, 0x12	; 18
  ca:	80 6a       	ori	r24, 0xA0	; 160
  cc:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	83 ef       	ldi	r24, 0xF3	; 243
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x50>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x56>
  d8:	00 00       	nop
		
		_delay_ms(2);
		PORTB = ~0x0; // upper matrix column
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	88 bb       	out	0x18, r24	; 24
		//PORTA = ~0x0; // lower matrix column
		PORTA |= 0xF0;
  de:	8b b3       	in	r24, 0x1b	; 27
  e0:	80 6f       	ori	r24, 0xF0	; 240
  e2:	8b bb       	out	0x1b, r24	; 27
		PORTD |= 0xF0;
  e4:	82 b3       	in	r24, 0x12	; 18
  e6:	80 6f       	ori	r24, 0xF0	; 240
  e8:	82 bb       	out	0x12, r24	; 18
		
		if(i == 7) i = 0;
  ea:	27 30       	cpi	r18, 0x07	; 7
  ec:	31 05       	cpc	r19, r1
  ee:	c1 f2       	breq	.-80     	; 0xa0 <main+0x1e>
		else i++;
  f0:	2f 5f       	subi	r18, 0xFF	; 255
  f2:	3f 4f       	sbci	r19, 0xFF	; 255
  f4:	d7 cf       	rjmp	.-82     	; 0xa4 <main+0x22>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
