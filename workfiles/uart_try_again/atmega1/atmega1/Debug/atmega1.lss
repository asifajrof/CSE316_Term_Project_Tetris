
atmega1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b3  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000517  00000000  00000000  00000793  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000263  00000000  00000000  00000caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035d  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ec  00000000  00000000  00001291  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000137d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    //set led pin for output and turn off led
	DDRB |= (1<<PINB1);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	82 60       	ori	r24, 0x02	; 2
  70:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1<<PINB1);
  72:	88 b3       	in	r24, 0x18	; 24
  74:	8d 7f       	andi	r24, 0xFD	; 253
  76:	88 bb       	out	0x18, r24	; 24
	
	//initialization of button and debouncing variables
	DDRB &= ~(1<<PINB0);
  78:	87 b3       	in	r24, 0x17	; 23
  7a:	8e 7f       	andi	r24, 0xFE	; 254
  7c:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<PINB0);
  7e:	88 b3       	in	r24, 0x18	; 24
  80:	81 60       	ori	r24, 0x01	; 1
  82:	88 bb       	out	0x18, r24	; 24
	int pressed_confidence_level = 0;
	int released_confidence_level = 0;
	
	//communication uart specifications (parity, stop bits, data bit length)
	int UBRR_Value = 6;
	UBRRH = (unsigned char) (UBRR_Value >> 8);
  84:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) UBRR_Value;
  86:	86 e0       	ldi	r24, 0x06	; 6
  88:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN) | (1<<TXEN);
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<USBS) | (3<<UCSZ0);
  8e:	8e e0       	ldi	r24, 0x0E	; 14
  90:	80 bd       	out	0x20, r24	; 32
	//initialization of button and debouncing variables
	DDRB &= ~(1<<PINB0);
	PORTB |= (1<<PINB0);
	int pressed = 0;
	int pressed_confidence_level = 0;
	int released_confidence_level = 0;
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
	
	//initialization of button and debouncing variables
	DDRB &= ~(1<<PINB0);
	PORTB |= (1<<PINB0);
	int pressed = 0;
	int pressed_confidence_level = 0;
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
	PORTB &= ~(1<<PINB1);
	
	//initialization of button and debouncing variables
	DDRB &= ~(1<<PINB0);
	PORTB |= (1<<PINB0);
	int pressed = 0;
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	50 e0       	ldi	r21, 0x00	; 0
  9e:	0e c0       	rjmp	.+28     	; 0xbc <main+0x50>
	UCSRC = (1<<USBS) | (3<<UCSZ0);
	
    while (1){
		if(bit_is_clear(PINB,0)){
			pressed_confidence_level++;
			released_confidence_level = 0;
  a0:	20 e0       	ldi	r18, 0x00	; 0
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	0b c0       	rjmp	.+22     	; 0xbc <main+0x50>
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
					PORTB ^= (1<<PINB1);
					//send data to recieving uC
					while(!(UCSRA&(1<<UDRE)));
					UDR = 0xF0;
				}
				pressed_confidence_level = 0;
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	06 c0       	rjmp	.+12     	; 0xbc <main+0x50>
		else{
			released_confidence_level++;
			pressed_confidence_level = 0;
			if(released_confidence_level > 100){
				pressed = 0;
				released_confidence_level = 0;
  b0:	20 e0       	ldi	r18, 0x00	; 0
  b2:	30 e0       	ldi	r19, 0x00	; 0
				pressed_confidence_level = 0;
			}
		}
		else{
			released_confidence_level++;
			pressed_confidence_level = 0;
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
			if(released_confidence_level > 100){
				pressed = 0;
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	50 e0       	ldi	r21, 0x00	; 0
	UBRRL = (unsigned char) UBRR_Value;
	UCSRB = (1<<RXEN) | (1<<TXEN);
	UCSRC = (1<<USBS) | (3<<UCSZ0);
	
    while (1){
		if(bit_is_clear(PINB,0)){
  bc:	b0 99       	sbic	0x16, 0	; 22
  be:	16 c0       	rjmp	.+44     	; 0xec <main+0x80>
			pressed_confidence_level++;
  c0:	01 96       	adiw	r24, 0x01	; 1
			released_confidence_level = 0;
			if(pressed_confidence_level > 100){
  c2:	85 36       	cpi	r24, 0x65	; 101
  c4:	91 05       	cpc	r25, r1
  c6:	64 f3       	brlt	.-40     	; 0xa0 <main+0x34>
				if(pressed == 0){
  c8:	41 15       	cp	r20, r1
  ca:	51 05       	cpc	r21, r1
  cc:	61 f7       	brne	.-40     	; 0xa6 <main+0x3a>
					pressed = 1;
					PORTB ^= (1<<PINB1);
  ce:	98 b3       	in	r25, 0x18	; 24
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	89 27       	eor	r24, r25
  d4:	88 bb       	out	0x18, r24	; 24
					//send data to recieving uC
					while(!(UCSRA&(1<<UDRE)));
  d6:	5d 9b       	sbis	0x0b, 5	; 11
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <main+0x6a>
					UDR = 0xF0;
  da:	80 ef       	ldi	r24, 0xF0	; 240
  dc:	8c b9       	out	0x0c, r24	; 12
	UCSRC = (1<<USBS) | (3<<UCSZ0);
	
    while (1){
		if(bit_is_clear(PINB,0)){
			pressed_confidence_level++;
			released_confidence_level = 0;
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	30 e0       	ldi	r19, 0x00	; 0
					PORTB ^= (1<<PINB1);
					//send data to recieving uC
					while(!(UCSRA&(1<<UDRE)));
					UDR = 0xF0;
				}
				pressed_confidence_level = 0;
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
		if(bit_is_clear(PINB,0)){
			pressed_confidence_level++;
			released_confidence_level = 0;
			if(pressed_confidence_level > 100){
				if(pressed == 0){
					pressed = 1;
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	e8 cf       	rjmp	.-48     	; 0xbc <main+0x50>
				}
				pressed_confidence_level = 0;
			}
		}
		else{
			released_confidence_level++;
  ec:	2f 5f       	subi	r18, 0xFF	; 255
  ee:	3f 4f       	sbci	r19, 0xFF	; 255
			pressed_confidence_level = 0;
			if(released_confidence_level > 100){
  f0:	25 36       	cpi	r18, 0x65	; 101
  f2:	31 05       	cpc	r19, r1
  f4:	ec f6       	brge	.-70     	; 0xb0 <main+0x44>
				pressed_confidence_level = 0;
			}
		}
		else{
			released_confidence_level++;
			pressed_confidence_level = 0;
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	e0 cf       	rjmp	.-64     	; 0xbc <main+0x50>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
