
mc2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000747  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  0000098b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f0  00000000  00000000  00000f16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001208  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034d  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  00001579  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001729  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRD = 0b11110000;
  6c:	80 ef       	ldi	r24, 0xF0	; 240
  6e:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b11111111;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	84 bb       	out	0x14, r24	; 20
	
	while (1)
	{
		if(PIND & 0b00000001){
  74:	80 9b       	sbis	0x10, 0	; 16
  76:	0e c0       	rjmp	.+28     	; 0x94 <main+0x28>
			PORTC = 0x00;
  78:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC1);
  7a:	85 b3       	in	r24, 0x15	; 21
  7c:	82 60       	ori	r24, 0x02	; 2
  7e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	2f e6       	ldi	r18, 0x6F	; 111
  82:	81 e1       	ldi	r24, 0x11	; 17
  84:	91 e0       	ldi	r25, 0x01	; 1
  86:	21 50       	subi	r18, 0x01	; 1
  88:	80 40       	sbci	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <main+0x1a>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <main+0x24>
  90:	00 00       	nop
  92:	f0 cf       	rjmp	.-32     	; 0x74 <main+0x8>
			_delay_ms(350);
		}
		else if(PIND & 0b00000010){
  94:	81 9b       	sbis	0x10, 1	; 16
  96:	0e c0       	rjmp	.+28     	; 0xb4 <main+0x48>
			PORTC = 0x00;
  98:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC2);
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	84 60       	ori	r24, 0x04	; 4
  9e:	85 bb       	out	0x15, r24	; 21
  a0:	2f e6       	ldi	r18, 0x6F	; 111
  a2:	81 e1       	ldi	r24, 0x11	; 17
  a4:	91 e0       	ldi	r25, 0x01	; 1
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x3a>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x44>
  b0:	00 00       	nop
  b2:	e0 cf       	rjmp	.-64     	; 0x74 <main+0x8>
			_delay_ms(350);
		}
		else if(PIND & 0b00000011){
  b4:	80 b3       	in	r24, 0x10	; 16
  b6:	83 70       	andi	r24, 0x03	; 3
  b8:	71 f0       	breq	.+28     	; 0xd6 <main+0x6a>
			PORTC = 0x00;
  ba:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC3);
  bc:	85 b3       	in	r24, 0x15	; 21
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	85 bb       	out	0x15, r24	; 21
  c2:	2f e6       	ldi	r18, 0x6F	; 111
  c4:	81 e1       	ldi	r24, 0x11	; 17
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x5c>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x66>
  d2:	00 00       	nop
  d4:	cf cf       	rjmp	.-98     	; 0x74 <main+0x8>
			_delay_ms(350);
		}
		else if(PIND & 0b00000100){
  d6:	82 9b       	sbis	0x10, 2	; 16
  d8:	0e c0       	rjmp	.+28     	; 0xf6 <main+0x8a>
			PORTC = 0x00;
  da:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC4);
  dc:	85 b3       	in	r24, 0x15	; 21
  de:	80 61       	ori	r24, 0x10	; 16
  e0:	85 bb       	out	0x15, r24	; 21
  e2:	2f e6       	ldi	r18, 0x6F	; 111
  e4:	81 e1       	ldi	r24, 0x11	; 17
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x7c>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x86>
  f2:	00 00       	nop
  f4:	bf cf       	rjmp	.-130    	; 0x74 <main+0x8>
			_delay_ms(350);
		}
		else if(PIND & 0b00000101){
  f6:	80 b3       	in	r24, 0x10	; 16
  f8:	85 70       	andi	r24, 0x05	; 5
  fa:	71 f0       	breq	.+28     	; 0x118 <main+0xac>
			PORTC = 0x00;
  fc:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC5);
  fe:	85 b3       	in	r24, 0x15	; 21
 100:	80 62       	ori	r24, 0x20	; 32
 102:	85 bb       	out	0x15, r24	; 21
 104:	2f e6       	ldi	r18, 0x6F	; 111
 106:	81 e1       	ldi	r24, 0x11	; 17
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x9e>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0xa8>
 114:	00 00       	nop
 116:	ae cf       	rjmp	.-164    	; 0x74 <main+0x8>
			_delay_ms(350);
		}
		else if(PIND & 0b00000110){
 118:	80 b3       	in	r24, 0x10	; 16
 11a:	86 70       	andi	r24, 0x06	; 6
 11c:	71 f0       	breq	.+28     	; 0x13a <main+0xce>
			PORTC = 0x00;
 11e:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC6);
 120:	85 b3       	in	r24, 0x15	; 21
 122:	80 64       	ori	r24, 0x40	; 64
 124:	85 bb       	out	0x15, r24	; 21
 126:	2f e6       	ldi	r18, 0x6F	; 111
 128:	81 e1       	ldi	r24, 0x11	; 17
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0xc0>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0xca>
 136:	00 00       	nop
 138:	9d cf       	rjmp	.-198    	; 0x74 <main+0x8>
			_delay_ms(350);
		}
		else if(PIND & 00000111){
 13a:	80 b3       	in	r24, 0x10	; 16
 13c:	89 74       	andi	r24, 0x49	; 73
 13e:	09 f4       	brne	.+2      	; 0x142 <main+0xd6>
 140:	99 cf       	rjmp	.-206    	; 0x74 <main+0x8>
			PORTC = 0x00;
 142:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC7);
 144:	85 b3       	in	r24, 0x15	; 21
 146:	80 68       	ori	r24, 0x80	; 128
 148:	85 bb       	out	0x15, r24	; 21
 14a:	2f e6       	ldi	r18, 0x6F	; 111
 14c:	81 e1       	ldi	r24, 0x11	; 17
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	21 50       	subi	r18, 0x01	; 1
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0xe4>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0xee>
 15a:	00 00       	nop
 15c:	8b cf       	rjmp	.-234    	; 0x74 <main+0x8>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
