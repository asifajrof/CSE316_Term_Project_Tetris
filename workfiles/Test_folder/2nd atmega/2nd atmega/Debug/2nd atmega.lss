
2nd atmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007fe  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e6  00000000  00000000  00000a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000272  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001298  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000338  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000258  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 42 00 	call	0x84	; 0x84 <main>
  64:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UART_init>:


void UART_init(void){
	int UBRR_Value = 25; // 2400 baud rate

	UBRRH = (unsigned char) (UBRR_Value >> 8);
  6c:	10 bc       	out	0x20, r1	; 32

	UBRRL = (unsigned char) UBRR_Value;
  6e:	89 e1       	ldi	r24, 0x19	; 25
  70:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1 << RXEN);
  72:	80 e1       	ldi	r24, 0x10	; 16
  74:	8a b9       	out	0x0a, r24	; 10

	UCSRC = (1 << USBS) | (3 << UCSZ0);
  76:	8e e0       	ldi	r24, 0x0E	; 14
  78:	80 bd       	out	0x20, r24	; 32
  7a:	08 95       	ret

0000007c <UART_receive>:
	//UCSRC = 0b10001110;	
}
unsigned char UART_receive(void){	
	// Wait until RXC flag is set to logic 1	
	while ((UCSRA & (1<<RXC)) == 0x00);	
  7c:	5f 9b       	sbis	0x0b, 7	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <UART_receive>
	return UDR; // Read the received character from UDR
  80:	8c b1       	in	r24, 0x0c	; 12
}
  82:	08 95       	ret

00000084 <main>:
int main(void)
{

	DDRD = 0b11111110;//PORTD pin0 as INPUT
  84:	8e ef       	ldi	r24, 0xFE	; 254
  86:	81 bb       	out	0x11, r24	; 17
	
	DDRC = 0xFF;//PORTB as OUTPUT
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	84 bb       	out	0x14, r24	; 20
	

	//unsigned char receiveData;
//	while ((UCSRA & (1 << RXC)) == 0x00);
	//receiveData = UDR;
	UART_init();
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <UART_init>
	while (1)

	{
		PORTD = 0b11111100;
  90:	cc ef       	ldi	r28, 0xFC	; 252
  92:	c2 bb       	out	0x12, r28	; 18
		char ch = UART_receive();
  94:	0e 94 3e 00 	call	0x7c	; 0x7c <UART_receive>
		if(ch == '0'){
  98:	80 33       	cpi	r24, 0x30	; 48
  9a:	49 f4       	brne	.+18     	; 0xae <main+0x2a>
			PORTC = 0x00;
  9c:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC1);
  9e:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	8f e4       	ldi	r24, 0x4F	; 79
  a2:	93 ec       	ldi	r25, 0xC3	; 195
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <main+0x20>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x26>
  aa:	00 00       	nop
  ac:	f2 cf       	rjmp	.-28     	; 0x92 <main+0xe>
			_delay_ms(200);
		}
		else if(ch == '1'){
  ae:	81 33       	cpi	r24, 0x31	; 49
  b0:	49 f4       	brne	.+18     	; 0xc4 <main+0x40>
			PORTC = 0x00;
  b2:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC2);
  b4:	aa 9a       	sbi	0x15, 2	; 21
  b6:	87 ea       	ldi	r24, 0xA7	; 167
  b8:	91 e6       	ldi	r25, 0x61	; 97
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x36>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x3c>
  c0:	00 00       	nop
  c2:	e7 cf       	rjmp	.-50     	; 0x92 <main+0xe>
			_delay_ms(100);
		}
		else if(ch == '2'){
  c4:	82 33       	cpi	r24, 0x32	; 50
  c6:	49 f4       	brne	.+18     	; 0xda <main+0x56>
			PORTC = 0x00;
  c8:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC3);
  ca:	ab 9a       	sbi	0x15, 3	; 21
  cc:	8f e4       	ldi	r24, 0x4F	; 79
  ce:	93 ec       	ldi	r25, 0xC3	; 195
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x4c>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x52>
  d6:	00 00       	nop
  d8:	dc cf       	rjmp	.-72     	; 0x92 <main+0xe>
			_delay_ms(200);
		}
		else if(ch == '3'){
  da:	83 33       	cpi	r24, 0x33	; 51
  dc:	49 f4       	brne	.+18     	; 0xf0 <main+0x6c>
			PORTC = 0x00;
  de:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC4);
  e0:	ac 9a       	sbi	0x15, 4	; 21
  e2:	8f e4       	ldi	r24, 0x4F	; 79
  e4:	93 ec       	ldi	r25, 0xC3	; 195
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x62>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x68>
  ec:	00 00       	nop
  ee:	d1 cf       	rjmp	.-94     	; 0x92 <main+0xe>
			_delay_ms(200);
		}
		else if(ch == '4'){
  f0:	84 33       	cpi	r24, 0x34	; 52
  f2:	49 f4       	brne	.+18     	; 0x106 <main+0x82>
			PORTC = 0x00;
  f4:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC5);
  f6:	ad 9a       	sbi	0x15, 5	; 21
  f8:	8f e4       	ldi	r24, 0x4F	; 79
  fa:	93 ec       	ldi	r25, 0xC3	; 195
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x78>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x7e>
 102:	00 00       	nop
 104:	c6 cf       	rjmp	.-116    	; 0x92 <main+0xe>
			_delay_ms(200);
		}
		else if(ch == '5'){
 106:	85 33       	cpi	r24, 0x35	; 53
 108:	49 f4       	brne	.+18     	; 0x11c <main+0x98>
			PORTC = 0x00;
 10a:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC6);
 10c:	ae 9a       	sbi	0x15, 6	; 21
 10e:	8f e4       	ldi	r24, 0x4F	; 79
 110:	93 ec       	ldi	r25, 0xC3	; 195
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x8e>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x94>
 118:	00 00       	nop
 11a:	bb cf       	rjmp	.-138    	; 0x92 <main+0xe>
			_delay_ms(200);
		}
		else if(ch == '6'){
 11c:	86 33       	cpi	r24, 0x36	; 54
 11e:	49 f4       	brne	.+18     	; 0x132 <main+0xae>
			PORTC = 0x00;
 120:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC7);
 122:	af 9a       	sbi	0x15, 7	; 21
 124:	8f e4       	ldi	r24, 0x4F	; 79
 126:	93 ec       	ldi	r25, 0xC3	; 195
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <main+0xa4>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0xaa>
 12e:	00 00       	nop
 130:	b0 cf       	rjmp	.-160    	; 0x92 <main+0xe>
			_delay_ms(200);
		}
		else if(ch == '7'){
 132:	87 33       	cpi	r24, 0x37	; 55
 134:	09 f0       	breq	.+2      	; 0x138 <main+0xb4>
 136:	ad cf       	rjmp	.-166    	; 0x92 <main+0xe>
			PORTC = 0x00;
 138:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC0);
 13a:	a8 9a       	sbi	0x15, 0	; 21
 13c:	8f e4       	ldi	r24, 0x4F	; 79
 13e:	93 ec       	ldi	r25, 0xC3	; 195
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0xbc>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0xc2>
 146:	00 00       	nop
 148:	a4 cf       	rjmp	.-184    	; 0x92 <main+0xe>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
