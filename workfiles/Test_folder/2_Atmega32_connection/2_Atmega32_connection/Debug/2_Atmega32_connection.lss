
2_Atmega32_connection.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000674  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cc  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002aa  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000109c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000379  00000000  00000000  000010e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000068  00000000  00000000  00001459  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000014c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 42 00 	call	0x84	; 0x84 <main>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UART_init>:
	
	int UBBRValue = 25;//AS described before setting baud rate

	//Put the upper part of the baud number here (bits 8 to 11)

	UBRRH = (unsigned char) (UBBRValue >> 8);
  6c:	10 bc       	out	0x20, r1	; 32

	//Put the remaining part of the baud number here

	UBRRL = (unsigned char) UBBRValue;
  6e:	89 e1       	ldi	r24, 0x19	; 25
  70:	89 b9       	out	0x09, r24	; 9

	//Enable the receiver and transmitter

	UCSRB = (1 << TXEN)|(1 << RXEN);
  72:	88 e1       	ldi	r24, 0x18	; 24
  74:	8a b9       	out	0x0a, r24	; 10

	//Set 2 stop bits and data bit length is 8-bit

	//UCSRC = (1 << USBS) | (3 << UCSZ0);
	UCSRC = 0b10001110;
  76:	8e e8       	ldi	r24, 0x8E	; 142
  78:	80 bd       	out	0x20, r24	; 32
  7a:	08 95       	ret

0000007c <UART_send>:
}

void UART_send(unsigned char data){	
	// wait until UDRE flag is set to logic 1	
	while ((UCSRA & (1<<UDRE)) == 0x00);	
  7c:	5d 9b       	sbis	0x0b, 5	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <UART_send>
	UDR = data; // Write character to UDR for transmission
  80:	8c b9       	out	0x0c, r24	; 12
  82:	08 95       	ret

00000084 <main>:

int main(void)

{

	DDRD = 0b11111110;
  84:	8e ef       	ldi	r24, 0xFE	; 254
  86:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b00000000;
  88:	14 ba       	out	0x14, r1	; 20
	char ch = '0';
	UART_init();
  8a:	0e 94 36 00 	call	0x6c	; 0x6c <UART_init>

{

	DDRD = 0b11111110;
	DDRC = 0b00000000;
	char ch = '0';
  8e:	c0 e3       	ldi	r28, 0x30	; 48
	UART_init();
	while (1)

	{
		PORTD = 0x00;
  90:	12 ba       	out	0x12, r1	; 18
		
		if ((PINC&(1<<PC0))){
  92:	98 9b       	sbis	0x13, 0	; 19
  94:	fd cf       	rjmp	.-6      	; 0x90 <main+0xc>

			UART_send(ch);
  96:	8c 2f       	mov	r24, r28
  98:	0e 94 3e 00 	call	0x7c	; 0x7c <UART_send>
			ch++;
  9c:	cf 5f       	subi	r28, 0xFF	; 255
			if(ch == '8') ch = '0';
  9e:	c8 33       	cpi	r28, 0x38	; 56
  a0:	09 f4       	brne	.+2      	; 0xa4 <main+0x20>
  a2:	c0 e3       	ldi	r28, 0x30	; 48
			PORTD |= 0b00000010;
  a4:	91 9a       	sbi	0x12, 1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f e7       	ldi	r18, 0x7F	; 127
  a8:	8a e1       	ldi	r24, 0x1A	; 26
  aa:	96 e0       	ldi	r25, 0x06	; 6
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x28>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x32>
  b6:	00 00       	nop
			_delay_ms(2000);
			PORTD = 0x00;
  b8:	12 ba       	out	0x12, r1	; 18
  ba:	ea cf       	rjmp	.-44     	; 0x90 <main+0xc>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
