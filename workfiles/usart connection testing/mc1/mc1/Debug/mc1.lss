
mc1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000689  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bf  00000000  00000000  00000841  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a7  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000010a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000362  00000000  00000000  000010ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000068  00000000  00000000  0000144e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000014b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UART_init>:
//#define USART_BAUDRATE 9600
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)

void UART_init(unsigned int ubrr)
{
	UCSRB |= (1 << RXEN) | (1 << TXEN);	/* Turn on transmission and reception */
  6c:	2a b1       	in	r18, 0x0a	; 10
  6e:	28 61       	ori	r18, 0x18	; 24
  70:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL) | (3 << UCSZ0) | (1 << USBS);/* Use 8-bit char size */
  72:	20 b5       	in	r18, 0x20	; 32
  74:	2e 68       	ori	r18, 0x8E	; 142
  76:	20 bd       	out	0x20, r18	; 32
	UBRRL = ubrr;			/* Load lower 8-bits of the baud rate */
  78:	89 b9       	out	0x09, r24	; 9
	UBRRH = (ubrr>> 8);		/* Load upper 8-bits*/
  7a:	90 bd       	out	0x20, r25	; 32
  7c:	08 95       	ret

0000007e <USART_Transmit>:
}

void USART_Transmit(unsigned char data){
	while(!(UCSRA & (1<<UDRE)));
  7e:	5d 9b       	sbis	0x0b, 5	; 11
  80:	fe cf       	rjmp	.-4      	; 0x7e <USART_Transmit>
	UDR = data;
  82:	8c b9       	out	0x0c, r24	; 12
  84:	08 95       	ret

00000086 <main>:
}
int main(void)
{
    DDRA &= ~(1<<PA0);
  86:	8a b3       	in	r24, 0x1a	; 26
  88:	8e 7f       	andi	r24, 0xFE	; 254
  8a:	8a bb       	out	0x1a, r24	; 26
	DDRD &= 0b11111101;
  8c:	81 b3       	in	r24, 0x11	; 17
  8e:	8d 7f       	andi	r24, 0xFD	; 253
  90:	81 bb       	out	0x11, r24	; 17
    PORTA = (1<<PA0);
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	8b bb       	out	0x1b, r24	; 27
	UART_init(MYUBRR);
  96:	85 e0       	ldi	r24, 0x05	; 5
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <UART_init>
	char ch = '0';
  9e:	c0 e3       	ldi	r28, 0x30	; 48
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <main+0x1e>
    {
		 if(!(PINA & (1<<PA0))){
			USART_Transmit(ch);
			_delay_ms(200);
			ch++;
			if(ch == '7') ch = '0';
  a2:	c0 e3       	ldi	r28, 0x30	; 48
    PORTA = (1<<PA0);
	UART_init(MYUBRR);
	char ch = '0';
    while (1) 
    {
		 if(!(PINA & (1<<PA0))){
  a4:	c8 99       	sbic	0x19, 0	; 25
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <main+0x1e>
			USART_Transmit(ch);
  a8:	8c 2f       	mov	r24, r28
  aa:	0e 94 3f 00 	call	0x7e	; 0x7e <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	8f e4       	ldi	r24, 0x4F	; 79
  b0:	93 ec       	ldi	r25, 0xC3	; 195
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x2c>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x32>
  b8:	00 00       	nop
			_delay_ms(200);
			ch++;
  ba:	cf 5f       	subi	r28, 0xFF	; 255
			if(ch == '7') ch = '0';
  bc:	c7 33       	cpi	r28, 0x37	; 55
  be:	91 f7       	brne	.-28     	; 0xa4 <main+0x1e>
  c0:	f0 cf       	rjmp	.-32     	; 0xa2 <main+0x1c>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
