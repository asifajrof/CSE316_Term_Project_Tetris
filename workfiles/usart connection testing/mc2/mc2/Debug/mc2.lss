
mc2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000170  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000080b  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fb  00000000  00000000  00000a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000368  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035c  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027e  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000019ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UART_init>:
#define BAUD 9600
#define MYUBRR FOSC/16/BAUD-1

void UART_init(unsigned int ubrr)
{
	UBRRH = (ubrr >> 8);	/* Load upper 8-bits */
  6c:	90 bd       	out	0x20, r25	; 32
	UBRRL = ubrr;		/* Load lower 8-bits of the baud rate */
  6e:	89 b9       	out	0x09, r24	; 9
	
	UCSRB |= (1 << RXEN) ;/* Turn on the transmission and reception */
  70:	8a b1       	in	r24, 0x0a	; 10
  72:	80 61       	ori	r24, 0x10	; 16
  74:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (3 << UCSZ0) | (1 << USBS);/* Use 8-bit character sizes */
  76:	80 b5       	in	r24, 0x20	; 32
  78:	8e 68       	ori	r24, 0x8E	; 142
  7a:	80 bd       	out	0x20, r24	; 32
  7c:	08 95       	ret

0000007e <USART_Receive>:
	
}


unsigned char USART_Receive(){
	while(!(UCSRA & (1 << RXC)));
  7e:	5f 9b       	sbis	0x0b, 7	; 11
  80:	fe cf       	rjmp	.-4      	; 0x7e <USART_Receive>
	return UDR;
  82:	8c b1       	in	r24, 0x0c	; 12
}
  84:	08 95       	ret

00000086 <main>:
int main(void)
{
	DDRC = 0xFF;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11111100;
  8a:	8c ef       	ldi	r24, 0xFC	; 252
  8c:	81 bb       	out	0x11, r24	; 17
	UART_init(MYUBRR);
  8e:	85 e0       	ldi	r24, 0x05	; 5
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	0e 94 36 00 	call	0x6c	; 0x6c <UART_init>
	
	while (1)
	{
		char ch = USART_Receive();
  96:	0e 94 3f 00 	call	0x7e	; 0x7e <USART_Receive>
		if(ch == '0'){
  9a:	80 33       	cpi	r24, 0x30	; 48
  9c:	59 f4       	brne	.+22     	; 0xb4 <main+0x2e>
			PORTC = 0x00;
  9e:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC1);
  a0:	85 b3       	in	r24, 0x15	; 21
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	8f e4       	ldi	r24, 0x4F	; 79
  a8:	93 ec       	ldi	r25, 0xC3	; 195
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x24>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x2a>
  b0:	00 00       	nop
  b2:	f1 cf       	rjmp	.-30     	; 0x96 <main+0x10>
			_delay_ms(200);
		}
		else if(ch == '1'){
  b4:	81 33       	cpi	r24, 0x31	; 49
  b6:	59 f4       	brne	.+22     	; 0xce <main+0x48>
			PORTC = 0x00;
  b8:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC2);
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	84 60       	ori	r24, 0x04	; 4
  be:	85 bb       	out	0x15, r24	; 21
  c0:	87 ea       	ldi	r24, 0xA7	; 167
  c2:	91 e6       	ldi	r25, 0x61	; 97
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x3e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x44>
  ca:	00 00       	nop
  cc:	e4 cf       	rjmp	.-56     	; 0x96 <main+0x10>
			_delay_ms(100);
		}
		else if(ch == '2'){
  ce:	82 33       	cpi	r24, 0x32	; 50
  d0:	59 f4       	brne	.+22     	; 0xe8 <main+0x62>
			PORTC = 0x00;
  d2:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC3);
  d4:	85 b3       	in	r24, 0x15	; 21
  d6:	88 60       	ori	r24, 0x08	; 8
  d8:	85 bb       	out	0x15, r24	; 21
  da:	8f e4       	ldi	r24, 0x4F	; 79
  dc:	93 ec       	ldi	r25, 0xC3	; 195
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x58>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x5e>
  e4:	00 00       	nop
  e6:	d7 cf       	rjmp	.-82     	; 0x96 <main+0x10>
			_delay_ms(200);
		}
		else if(ch == '3'){
  e8:	83 33       	cpi	r24, 0x33	; 51
  ea:	59 f4       	brne	.+22     	; 0x102 <main+0x7c>
			PORTC = 0x00;
  ec:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC4);
  ee:	85 b3       	in	r24, 0x15	; 21
  f0:	80 61       	ori	r24, 0x10	; 16
  f2:	85 bb       	out	0x15, r24	; 21
  f4:	8f e4       	ldi	r24, 0x4F	; 79
  f6:	93 ec       	ldi	r25, 0xC3	; 195
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x72>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x78>
  fe:	00 00       	nop
 100:	ca cf       	rjmp	.-108    	; 0x96 <main+0x10>
			_delay_ms(200);
		}
		else if(ch == '4'){
 102:	84 33       	cpi	r24, 0x34	; 52
 104:	59 f4       	brne	.+22     	; 0x11c <main+0x96>
			PORTC = 0x00;
 106:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC5);
 108:	85 b3       	in	r24, 0x15	; 21
 10a:	80 62       	ori	r24, 0x20	; 32
 10c:	85 bb       	out	0x15, r24	; 21
 10e:	8f e4       	ldi	r24, 0x4F	; 79
 110:	93 ec       	ldi	r25, 0xC3	; 195
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x8c>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x92>
 118:	00 00       	nop
 11a:	bd cf       	rjmp	.-134    	; 0x96 <main+0x10>
			_delay_ms(200);
		}
		else if(ch == '5'){
 11c:	85 33       	cpi	r24, 0x35	; 53
 11e:	59 f4       	brne	.+22     	; 0x136 <main+0xb0>
			PORTC = 0x00;
 120:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC6);
 122:	85 b3       	in	r24, 0x15	; 21
 124:	80 64       	ori	r24, 0x40	; 64
 126:	85 bb       	out	0x15, r24	; 21
 128:	8f e4       	ldi	r24, 0x4F	; 79
 12a:	93 ec       	ldi	r25, 0xC3	; 195
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0xa6>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0xac>
 132:	00 00       	nop
 134:	b0 cf       	rjmp	.-160    	; 0x96 <main+0x10>
			_delay_ms(200);
		}
		else if(ch == '6'){
 136:	86 33       	cpi	r24, 0x36	; 54
 138:	59 f4       	brne	.+22     	; 0x150 <main+0xca>
			PORTC = 0x00;
 13a:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC7);
 13c:	85 b3       	in	r24, 0x15	; 21
 13e:	80 68       	ori	r24, 0x80	; 128
 140:	85 bb       	out	0x15, r24	; 21
 142:	8f e4       	ldi	r24, 0x4F	; 79
 144:	93 ec       	ldi	r25, 0xC3	; 195
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <main+0xc0>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0xc6>
 14c:	00 00       	nop
 14e:	a3 cf       	rjmp	.-186    	; 0x96 <main+0x10>
			_delay_ms(200);
		}
		else if(ch == '7'){
 150:	87 33       	cpi	r24, 0x37	; 55
 152:	09 f0       	breq	.+2      	; 0x156 <main+0xd0>
 154:	a0 cf       	rjmp	.-192    	; 0x96 <main+0x10>
			PORTC = 0x00;
 156:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC1);
 158:	85 b3       	in	r24, 0x15	; 21
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	85 bb       	out	0x15, r24	; 21
 15e:	8f e4       	ldi	r24, 0x4F	; 79
 160:	93 ec       	ldi	r25, 0xC3	; 195
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0xdc>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0xe2>
 168:	00 00       	nop
 16a:	95 cf       	rjmp	.-214    	; 0x96 <main+0x10>

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
