
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000001f4  00000288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800070  00800070  00000298  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000077c  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000632  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000357  00000000  00000000  000010e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000399  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a6  00000000  00000000  00001861  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001b07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 99 00 	call	0x132	; 0x132 <main>
  8a:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
#include <avr/interrupt.h>

bool rotate = FALSE;

ISR(INT0_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	rotate = ~rotate;
  a0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
  a4:	80 95       	com	r24
  a6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	89 ef       	ldi	r24, 0xF9	; 249
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <__vector_1+0x1c>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <__vector_1+0x22>
  b4:	00 00       	nop
	_delay_ms(1);
}
  b6:	9f 91       	pop	r25
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <rotateSymbol>:

void rotateSymbol(uint8_t *symbol, int length, int direction)
{
  c4:	cf 92       	push	r12
  c6:	df 92       	push	r13
  c8:	ff 92       	push	r15
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
	int index = 0;
	if (direction>0){index = length-1;}
  d2:	14 16       	cp	r1, r20
  d4:	15 06       	cpc	r1, r21
  d6:	24 f4       	brge	.+8      	; 0xe0 <rotateSymbol+0x1c>
  d8:	9b 01       	movw	r18, r22
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	31 09       	sbc	r19, r1
  de:	02 c0       	rjmp	.+4      	; 0xe4 <rotateSymbol+0x20>
	_delay_ms(1);
}

void rotateSymbol(uint8_t *symbol, int length, int direction)
{
	int index = 0;
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	30 e0       	ldi	r19, 0x00	; 0
	if (direction>0){index = length-1;}
	uint8_t temp = symbol[index];
  e4:	fc 01       	movw	r30, r24
  e6:	e2 0f       	add	r30, r18
  e8:	f3 1f       	adc	r31, r19
  ea:	f0 80       	ld	r15, Z
	for(int i=0;i<length;i++)
  ec:	a0 e0       	ldi	r26, 0x00	; 0
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	0f c0       	rjmp	.+30     	; 0x110 <rotateSymbol+0x4c>
	{
		index -= direction;
  f2:	e9 01       	movw	r28, r18
  f4:	c4 1b       	sub	r28, r20
  f6:	d5 0b       	sbc	r29, r21
		symbol[index+direction] = symbol[index];
  f8:	6c 01       	movw	r12, r24
  fa:	c2 0e       	add	r12, r18
  fc:	d3 1e       	adc	r13, r19
  fe:	8c 01       	movw	r16, r24
 100:	0c 0f       	add	r16, r28
 102:	1d 1f       	adc	r17, r29
 104:	f8 01       	movw	r30, r16
 106:	30 81       	ld	r19, Z
 108:	f6 01       	movw	r30, r12
 10a:	30 83       	st	Z, r19
void rotateSymbol(uint8_t *symbol, int length, int direction)
{
	int index = 0;
	if (direction>0){index = length-1;}
	uint8_t temp = symbol[index];
	for(int i=0;i<length;i++)
 10c:	11 96       	adiw	r26, 0x01	; 1
	{
		index -= direction;
 10e:	9e 01       	movw	r18, r28
void rotateSymbol(uint8_t *symbol, int length, int direction)
{
	int index = 0;
	if (direction>0){index = length-1;}
	uint8_t temp = symbol[index];
	for(int i=0;i<length;i++)
 110:	a6 17       	cp	r26, r22
 112:	b7 07       	cpc	r27, r23
 114:	74 f3       	brlt	.-36     	; 0xf2 <rotateSymbol+0x2e>
	{
		index -= direction;
		symbol[index+direction] = symbol[index];
	}
	symbol[index+direction] = temp;
 116:	42 0f       	add	r20, r18
 118:	53 1f       	adc	r21, r19
 11a:	fc 01       	movw	r30, r24
 11c:	e4 0f       	add	r30, r20
 11e:	f5 1f       	adc	r31, r21
 120:	f0 82       	st	Z, r15
}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	ff 90       	pop	r15
 12c:	df 90       	pop	r13
 12e:	cf 90       	pop	r12
 130:	08 95       	ret

00000132 <main>:

int main(void)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	60 97       	sbiw	r28, 0x10	; 16
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
	DDRD=0x00;
 146:	11 ba       	out	0x11, r1	; 17
	PORTD=0xFF;
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	82 bb       	out	0x12, r24	; 18
	
	GICR = 1<<INT0;
 14c:	90 e4       	ldi	r25, 0x40	; 64
 14e:	9b bf       	out	0x3b, r25	; 59
	MCUCR = 1<<ISC01 | 1<<ISC00;
 150:	93 e0       	ldi	r25, 0x03	; 3
 152:	95 bf       	out	0x35, r25	; 53
	
	sei();
 154:	78 94       	sei
	
	DDRA = 0xFF;
 156:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
 158:	87 bb       	out	0x17, r24	; 23
	

	int length=8;	//matrix length each side
	uint8_t colPin[] = {(1<<PB7),(1<<PB6),(1<<PB5),(1<<PB4),(1<<PB3),(1<<PB2),(1<<PB1),(1<<PB0)};
 15a:	88 e0       	ldi	r24, 0x08	; 8
 15c:	e0 e6       	ldi	r30, 0x60	; 96
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	de 01       	movw	r26, r28
 162:	11 96       	adiw	r26, 0x01	; 1
 164:	01 90       	ld	r0, Z+
 166:	0d 92       	st	X+, r0
 168:	8a 95       	dec	r24
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0x32>
	uint8_t symbol[]=
 16c:	88 e0       	ldi	r24, 0x08	; 8
 16e:	e8 e6       	ldi	r30, 0x68	; 104
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	de 01       	movw	r26, r28
 174:	19 96       	adiw	r26, 0x09	; 9
 176:	01 90       	ld	r0, Z+
 178:	0d 92       	st	X+, r0
 17a:	8a 95       	dec	r24
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x44>
		0b11110001,
		0b11011001,
		0b11001111,
		0b11000110,
	0b00000000};//binary codes for symbol pattern
	int j=0;
 17e:	00 e0       	ldi	r16, 0x00	; 0
 180:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1)
	{
		if (rotate){rotateSymbol(symbol,length,RIGHT);}
 182:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 186:	88 23       	and	r24, r24
 188:	41 f0       	breq	.+16     	; 0x19a <main+0x68>
 18a:	41 e0       	ldi	r20, 0x01	; 1
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	68 e0       	ldi	r22, 0x08	; 8
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	ce 01       	movw	r24, r28
 194:	09 96       	adiw	r24, 0x09	; 9
 196:	0e 94 62 00 	call	0xc4	; 0xc4 <rotateSymbol>
		0b11110001,
		0b11011001,
		0b11001111,
		0b11000110,
	0b00000000};//binary codes for symbol pattern
	int j=0;
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	24 c0       	rjmp	.+72     	; 0x1e8 <main+0xb6>
	while(1)
	{
		if (rotate){rotateSymbol(symbol,length,RIGHT);}
		for(int i=0;i<50;i++)
		{
			PORTA = colPin[j];
 1a0:	e1 e0       	ldi	r30, 0x01	; 1
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	ec 0f       	add	r30, r28
 1a6:	fd 1f       	adc	r31, r29
 1a8:	e0 0f       	add	r30, r16
 1aa:	f1 1f       	adc	r31, r17
 1ac:	80 81       	ld	r24, Z
 1ae:	8b bb       	out	0x1b, r24	; 27
			PORTB = ~symbol[j];
 1b0:	e9 e0       	ldi	r30, 0x09	; 9
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	ec 0f       	add	r30, r28
 1b6:	fd 1f       	adc	r31, r29
 1b8:	e0 0f       	add	r30, r16
 1ba:	f1 1f       	adc	r31, r17
 1bc:	80 81       	ld	r24, Z
 1be:	80 95       	com	r24
 1c0:	88 bb       	out	0x18, r24	; 24
 1c2:	81 ee       	ldi	r24, 0xE1	; 225
 1c4:	94 e0       	ldi	r25, 0x04	; 4
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0x94>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0x9a>
 1cc:	00 00       	nop
			_delay_ms(5);
			j++;
 1ce:	c8 01       	movw	r24, r16
 1d0:	01 96       	adiw	r24, 0x01	; 1
			j%=length;
 1d2:	87 70       	andi	r24, 0x07	; 7
 1d4:	90 78       	andi	r25, 0x80	; 128
 1d6:	99 23       	and	r25, r25
 1d8:	24 f4       	brge	.+8      	; 0x1e2 <main+0xb0>
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	88 6f       	ori	r24, 0xF8	; 248
 1de:	9f 6f       	ori	r25, 0xFF	; 255
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	8c 01       	movw	r16, r24
	int j=0;
	
	while(1)
	{
		if (rotate){rotateSymbol(symbol,length,RIGHT);}
		for(int i=0;i<50;i++)
 1e4:	2f 5f       	subi	r18, 0xFF	; 255
 1e6:	3f 4f       	sbci	r19, 0xFF	; 255
 1e8:	22 33       	cpi	r18, 0x32	; 50
 1ea:	31 05       	cpc	r19, r1
 1ec:	cc f2       	brlt	.-78     	; 0x1a0 <main+0x6e>
 1ee:	c9 cf       	rjmp	.-110    	; 0x182 <main+0x50>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
