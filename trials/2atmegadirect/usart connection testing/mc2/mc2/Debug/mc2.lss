
mc2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069a  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000570  00000000  00000000  00000892  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d5  00000000  00000000  00000e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034d  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  00001449  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001569  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRD = 0b11110000;
  6c:	80 ef       	ldi	r24, 0xF0	; 240
  6e:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b11111111;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	84 bb       	out	0x14, r24	; 20
	
	while (1)
	{
		if(PIND & 00000001){
  74:	80 9b       	sbis	0x10, 0	; 16
  76:	0b c0       	rjmp	.+22     	; 0x8e <main+0x22>
			PORTC = 0x00;
  78:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC1);
  7a:	85 b3       	in	r24, 0x15	; 21
  7c:	82 60       	ori	r24, 0x02	; 2
  7e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	87 ea       	ldi	r24, 0xA7	; 167
  82:	91 e6       	ldi	r25, 0x61	; 97
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <main+0x18>
  88:	00 c0       	rjmp	.+0      	; 0x8a <main+0x1e>
  8a:	00 00       	nop
  8c:	f3 cf       	rjmp	.-26     	; 0x74 <main+0x8>
			_delay_ms(100);
		}
		else if(PIND & 00000010){
  8e:	83 9b       	sbis	0x10, 3	; 16
  90:	0b c0       	rjmp	.+22     	; 0xa8 <main+0x3c>
			PORTC = 0x00;
  92:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC2);
  94:	85 b3       	in	r24, 0x15	; 21
  96:	84 60       	ori	r24, 0x04	; 4
  98:	85 bb       	out	0x15, r24	; 21
  9a:	87 ea       	ldi	r24, 0xA7	; 167
  9c:	91 e6       	ldi	r25, 0x61	; 97
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x32>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x38>
  a4:	00 00       	nop
  a6:	e6 cf       	rjmp	.-52     	; 0x74 <main+0x8>
			_delay_ms(100);
		}
		else if(PIND & 00000011){
  a8:	80 b3       	in	r24, 0x10	; 16
  aa:	89 70       	andi	r24, 0x09	; 9
  ac:	59 f0       	breq	.+22     	; 0xc4 <main+0x58>
			PORTC = 0x00;
  ae:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC3);
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	88 60       	ori	r24, 0x08	; 8
  b4:	85 bb       	out	0x15, r24	; 21
  b6:	87 ea       	ldi	r24, 0xA7	; 167
  b8:	91 e6       	ldi	r25, 0x61	; 97
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x4e>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x54>
  c0:	00 00       	nop
  c2:	d8 cf       	rjmp	.-80     	; 0x74 <main+0x8>
			_delay_ms(100);
		}
		else if(PIND & 00000100){
  c4:	86 9b       	sbis	0x10, 6	; 16
  c6:	0b c0       	rjmp	.+22     	; 0xde <main+0x72>
			PORTC = 0x00;
  c8:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC4);
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	87 ea       	ldi	r24, 0xA7	; 167
  d2:	91 e6       	ldi	r25, 0x61	; 97
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x68>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x6e>
  da:	00 00       	nop
  dc:	cb cf       	rjmp	.-106    	; 0x74 <main+0x8>
			_delay_ms(100);
		}
		else if(PIND & 00000101){
  de:	80 b3       	in	r24, 0x10	; 16
  e0:	81 74       	andi	r24, 0x41	; 65
  e2:	29 f0       	breq	.+10     	; 0xee <main+0x82>
			PORTC = 0x00;
  e4:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC5);
  e6:	85 b3       	in	r24, 0x15	; 21
  e8:	80 62       	ori	r24, 0x20	; 32
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	c3 cf       	rjmp	.-122    	; 0x74 <main+0x8>
			//_delay_ms(100);
		}
		else if(PIND & 00000110){
  ee:	80 b3       	in	r24, 0x10	; 16
  f0:	88 74       	andi	r24, 0x48	; 72
  f2:	29 f0       	breq	.+10     	; 0xfe <main+0x92>
			PORTC = 0x00;
  f4:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC6);
  f6:	85 b3       	in	r24, 0x15	; 21
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	85 bb       	out	0x15, r24	; 21
  fc:	bb cf       	rjmp	.-138    	; 0x74 <main+0x8>
			//_delay_ms(100);
		}
		else if(PIND & 00000111){
  fe:	80 b3       	in	r24, 0x10	; 16
 100:	89 74       	andi	r24, 0x49	; 73
 102:	29 f0       	breq	.+10     	; 0x10e <main+0xa2>
			PORTC = 0x00;
 104:	15 ba       	out	0x15, r1	; 21
			PORTC |= (1<<PC7);
 106:	85 b3       	in	r24, 0x15	; 21
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	85 bb       	out	0x15, r24	; 21
 10c:	b3 cf       	rjmp	.-154    	; 0x74 <main+0x8>
			//_delay_ms(100);
		}
		else if(PIND & 00001000){
 10e:	80 b3       	in	r24, 0x10	; 16
 110:	b1 cf       	rjmp	.-158    	; 0x74 <main+0x8>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
