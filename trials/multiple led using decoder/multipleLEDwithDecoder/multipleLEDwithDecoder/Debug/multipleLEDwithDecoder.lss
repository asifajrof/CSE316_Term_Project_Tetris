
multipleLEDwithDecoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000001a2  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000721  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ad  00000000  00000000  00000a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000304  00000000  00000000  00000fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ae  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000102  00000000  00000000  0000168a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
{
	int delay_D1 = 5000;
	int delay_D2 = 1000;
	int delay_C = 1000;
	//int delay__ = 100;
	DDRB = 0xFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
  86:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
  88:	84 bb       	out	0x14, r24	; 20
	while (1)
	{
		for(int i = 0 ; i < 8; i++ ){
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	82 c0       	rjmp	.+260    	; 0x194 <main+0x112>
			PORTB &= 0b11111000;
  90:	88 b3       	in	r24, 0x18	; 24
  92:	88 7f       	andi	r24, 0xF8	; 248
  94:	88 bb       	out	0x18, r24	; 24
			PORTB |= (i & 0b00000111);
  96:	88 b3       	in	r24, 0x18	; 24
  98:	92 2f       	mov	r25, r18
  9a:	97 70       	andi	r25, 0x07	; 7
  9c:	89 2b       	or	r24, r25
  9e:	88 bb       	out	0x18, r24	; 24
			for(int j = 0; j < 8; j++){
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	21 c0       	rjmp	.+66     	; 0xe8 <main+0x66>
				if(column1[i][j] == 1){
  a6:	f9 01       	movw	r30, r18
  a8:	ee 0f       	add	r30, r30
  aa:	ff 1f       	adc	r31, r31
  ac:	ee 0f       	add	r30, r30
  ae:	ff 1f       	adc	r31, r31
  b0:	ee 0f       	add	r30, r30
  b2:	ff 1f       	adc	r31, r31
  b4:	e0 5a       	subi	r30, 0xA0	; 160
  b6:	ff 4f       	sbci	r31, 0xFF	; 255
  b8:	e8 0f       	add	r30, r24
  ba:	f9 1f       	adc	r31, r25
  bc:	40 81       	ld	r20, Z
  be:	41 30       	cpi	r20, 0x01	; 1
  c0:	79 f4       	brne	.+30     	; 0xe0 <main+0x5e>
					PORTD &= 0b11100000;
  c2:	42 b3       	in	r20, 0x12	; 18
  c4:	40 7e       	andi	r20, 0xE0	; 224
  c6:	42 bb       	out	0x12, r20	; 18
					PORTD |= (j & 0b00000111);
  c8:	42 b3       	in	r20, 0x12	; 18
  ca:	58 2f       	mov	r21, r24
  cc:	57 70       	andi	r21, 0x07	; 7
  ce:	45 2b       	or	r20, r21
  d0:	42 bb       	out	0x12, r20	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	e1 ee       	ldi	r30, 0xE1	; 225
  d4:	f4 e0       	ldi	r31, 0x04	; 4
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x54>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x5a>
  dc:	00 00       	nop
  de:	03 c0       	rjmp	.+6      	; 0xe6 <main+0x64>
					_delay_us(delay_D1);
				}
				else{
					PORTD |= 1 << PD4;
  e0:	42 b3       	in	r20, 0x12	; 18
  e2:	40 61       	ori	r20, 0x10	; 16
  e4:	42 bb       	out	0x12, r20	; 18
	while (1)
	{
		for(int i = 0 ; i < 8; i++ ){
			PORTB &= 0b11111000;
			PORTB |= (i & 0b00000111);
			for(int j = 0; j < 8; j++){
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	88 30       	cpi	r24, 0x08	; 8
  ea:	91 05       	cpc	r25, r1
  ec:	e4 f2       	brlt	.-72     	; 0xa6 <main+0x24>
  ee:	48 e0       	ldi	r20, 0x08	; 8
  f0:	50 e0       	ldi	r21, 0x00	; 0
  f2:	24 c0       	rjmp	.+72     	; 0x13c <main+0xba>
					PORTD |= 1 << PD4;
				}
			}
			
			for(int j = 8; j < 16; j++){
				if(column1[i][j-8] == 1){
  f4:	f9 01       	movw	r30, r18
  f6:	ee 0f       	add	r30, r30
  f8:	ff 1f       	adc	r31, r31
  fa:	ee 0f       	add	r30, r30
  fc:	ff 1f       	adc	r31, r31
  fe:	ee 0f       	add	r30, r30
 100:	ff 1f       	adc	r31, r31
 102:	e0 5a       	subi	r30, 0xA0	; 160
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	ca 01       	movw	r24, r20
 108:	08 97       	sbiw	r24, 0x08	; 8
 10a:	e8 0f       	add	r30, r24
 10c:	f9 1f       	adc	r31, r25
 10e:	80 81       	ld	r24, Z
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	79 f4       	brne	.+30     	; 0x132 <main+0xb0>
					PORTD &= 0b11100000;
 114:	82 b3       	in	r24, 0x12	; 18
 116:	80 7e       	andi	r24, 0xE0	; 224
 118:	82 bb       	out	0x12, r24	; 18
					PORTD |= (j & 0b00001111);
 11a:	82 b3       	in	r24, 0x12	; 18
 11c:	94 2f       	mov	r25, r20
 11e:	9f 70       	andi	r25, 0x0F	; 15
 120:	89 2b       	or	r24, r25
 122:	82 bb       	out	0x12, r24	; 18
 124:	89 ef       	ldi	r24, 0xF9	; 249
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <main+0xa6>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0xac>
 12e:	00 00       	nop
 130:	03 c0       	rjmp	.+6      	; 0x138 <main+0xb6>
					_delay_us(delay_D2);
				}
				else{
					PORTD |= 1 << PD4;
 132:	82 b3       	in	r24, 0x12	; 18
 134:	80 61       	ori	r24, 0x10	; 16
 136:	82 bb       	out	0x12, r24	; 18
				else{
					PORTD |= 1 << PD4;
				}
			}
			
			for(int j = 8; j < 16; j++){
 138:	4f 5f       	subi	r20, 0xFF	; 255
 13a:	5f 4f       	sbci	r21, 0xFF	; 255
 13c:	40 31       	cpi	r20, 0x10	; 16
 13e:	51 05       	cpc	r21, r1
 140:	cc f2       	brlt	.-78     	; 0xf4 <main+0x72>
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	21 c0       	rjmp	.+66     	; 0x18a <main+0x108>
					PORTD |= 1 << PD4;
				}
			}
			
			for(int j = 0; j < 8; j++){
				if(column1[i][j] == 1){
 148:	f9 01       	movw	r30, r18
 14a:	ee 0f       	add	r30, r30
 14c:	ff 1f       	adc	r31, r31
 14e:	ee 0f       	add	r30, r30
 150:	ff 1f       	adc	r31, r31
 152:	ee 0f       	add	r30, r30
 154:	ff 1f       	adc	r31, r31
 156:	e0 5a       	subi	r30, 0xA0	; 160
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	e8 0f       	add	r30, r24
 15c:	f9 1f       	adc	r31, r25
 15e:	40 81       	ld	r20, Z
 160:	41 30       	cpi	r20, 0x01	; 1
 162:	79 f4       	brne	.+30     	; 0x182 <main+0x100>
					PORTC &= 0b11110000;
 164:	45 b3       	in	r20, 0x15	; 21
 166:	40 7f       	andi	r20, 0xF0	; 240
 168:	45 bb       	out	0x15, r20	; 21
					PORTC |= (j & 0b00000111);
 16a:	45 b3       	in	r20, 0x15	; 21
 16c:	58 2f       	mov	r21, r24
 16e:	57 70       	andi	r21, 0x07	; 7
 170:	45 2b       	or	r20, r21
 172:	45 bb       	out	0x15, r20	; 21
 174:	e9 ef       	ldi	r30, 0xF9	; 249
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0xf6>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0xfc>
 17e:	00 00       	nop
 180:	03 c0       	rjmp	.+6      	; 0x188 <main+0x106>
					_delay_us(delay_C);
				}
				else{
					PORTC |= 1 << PC3;
 182:	45 b3       	in	r20, 0x15	; 21
 184:	48 60       	ori	r20, 0x08	; 8
 186:	45 bb       	out	0x15, r20	; 21
				else{
					PORTD |= 1 << PD4;
				}
			}
			
			for(int j = 0; j < 8; j++){
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	88 30       	cpi	r24, 0x08	; 8
 18c:	91 05       	cpc	r25, r1
 18e:	e4 f2       	brlt	.-72     	; 0x148 <main+0xc6>
	DDRB = 0xFF;
	DDRD = 0xFF;
	DDRC = 0xFF;
	while (1)
	{
		for(int i = 0 ; i < 8; i++ ){
 190:	2f 5f       	subi	r18, 0xFF	; 255
 192:	3f 4f       	sbci	r19, 0xFF	; 255
 194:	28 30       	cpi	r18, 0x08	; 8
 196:	31 05       	cpc	r19, r1
 198:	0c f4       	brge	.+2      	; 0x19c <main+0x11a>
 19a:	7a cf       	rjmp	.-268    	; 0x90 <main+0xe>
 19c:	76 cf       	rjmp	.-276    	; 0x8a <main+0x8>

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
