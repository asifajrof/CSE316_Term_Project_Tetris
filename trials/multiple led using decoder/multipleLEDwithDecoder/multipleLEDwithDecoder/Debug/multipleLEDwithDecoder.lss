
multipleLEDwithDecoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000144  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000062f  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000552  00000000  00000000  000008b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000250  00000000  00000000  00000e05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001058  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032d  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000078  00000000  00000000  000013a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001421  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
					 {0, 0 , 0, 0, 0, 1, 1, 1}} ;	
						 
	
int main(void)
{
    DDRB = 0xFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
  86:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
  88:	84 bb       	out	0x14, r24	; 20
    while (1) 
    {
		for(int i = 1 ; i <= 8; i++ ){
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	53 c0       	rjmp	.+166    	; 0x136 <main+0xb4>
			PORTB = i;
  90:	28 bb       	out	0x18, r18	; 24
			for(int j = 0; j < 8; j++){
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	13 c0       	rjmp	.+38     	; 0xbe <main+0x3c>
				if(column1[i-1][j] == 1){
  98:	f9 01       	movw	r30, r18
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	ee 0f       	add	r30, r30
  9e:	ff 1f       	adc	r31, r31
  a0:	ee 0f       	add	r30, r30
  a2:	ff 1f       	adc	r31, r31
  a4:	ee 0f       	add	r30, r30
  a6:	ff 1f       	adc	r31, r31
  a8:	e0 5a       	subi	r30, 0xA0	; 160
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	e8 0f       	add	r30, r24
  ae:	f9 1f       	adc	r31, r25
  b0:	40 81       	ld	r20, Z
  b2:	41 30       	cpi	r20, 0x01	; 1
  b4:	19 f4       	brne	.+6      	; 0xbc <main+0x3a>
					PORTD = ~j;
  b6:	48 2f       	mov	r20, r24
  b8:	40 95       	com	r20
  ba:	42 bb       	out	0x12, r20	; 18
	DDRC = 0xFF;
    while (1) 
    {
		for(int i = 1 ; i <= 8; i++ ){
			PORTB = i;
			for(int j = 0; j < 8; j++){
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	88 30       	cpi	r24, 0x08	; 8
  c0:	91 05       	cpc	r25, r1
  c2:	54 f3       	brlt	.-44     	; 0x98 <main+0x16>
  c4:	68 e0       	ldi	r22, 0x08	; 8
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	18 c0       	rjmp	.+48     	; 0xfa <main+0x78>
					PORTD = ~j;
					//_delay_ms(10);
				}
			}
			for(int j = 8; j < 16; j++){
				if(column1[i-1][j-8] == 0){
  ca:	c9 01       	movw	r24, r18
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	80 5a       	subi	r24, 0xA0	; 160
  dc:	9f 4f       	sbci	r25, 0xFF	; 255
  de:	ab 01       	movw	r20, r22
  e0:	48 50       	subi	r20, 0x08	; 8
  e2:	51 09       	sbc	r21, r1
  e4:	fc 01       	movw	r30, r24
  e6:	e4 0f       	add	r30, r20
  e8:	f5 1f       	adc	r31, r21
  ea:	80 81       	ld	r24, Z
  ec:	81 11       	cpse	r24, r1
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <main+0x74>
					PORTD = ~j;
  f0:	86 2f       	mov	r24, r22
  f2:	80 95       	com	r24
  f4:	82 bb       	out	0x12, r24	; 18
				if(column1[i-1][j] == 1){
					PORTD = ~j;
					//_delay_ms(10);
				}
			}
			for(int j = 8; j < 16; j++){
  f6:	6f 5f       	subi	r22, 0xFF	; 255
  f8:	7f 4f       	sbci	r23, 0xFF	; 255
  fa:	60 31       	cpi	r22, 0x10	; 16
  fc:	71 05       	cpc	r23, r1
  fe:	2c f3       	brlt	.-54     	; 0xca <main+0x48>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	13 c0       	rjmp	.+38     	; 0x12c <main+0xaa>
					PORTD = ~j;
					//_delay_ms(10);
				}
			}
			for(int j = 0; j < 8; j++){
				if(column1[i-1][j]){
 106:	f9 01       	movw	r30, r18
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	e0 5a       	subi	r30, 0xA0	; 160
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	e8 0f       	add	r30, r24
 11c:	f9 1f       	adc	r31, r25
 11e:	40 81       	ld	r20, Z
 120:	44 23       	and	r20, r20
 122:	19 f0       	breq	.+6      	; 0x12a <main+0xa8>
					PORTC = ~j;
 124:	48 2f       	mov	r20, r24
 126:	40 95       	com	r20
 128:	45 bb       	out	0x15, r20	; 21
				if(column1[i-1][j-8] == 0){
					PORTD = ~j;
					//_delay_ms(10);
				}
			}
			for(int j = 0; j < 8; j++){
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	88 30       	cpi	r24, 0x08	; 8
 12e:	91 05       	cpc	r25, r1
 130:	54 f3       	brlt	.-44     	; 0x106 <main+0x84>
    DDRB = 0xFF;
	DDRD = 0xFF;
	DDRC = 0xFF;
    while (1) 
    {
		for(int i = 1 ; i <= 8; i++ ){
 132:	2f 5f       	subi	r18, 0xFF	; 255
 134:	3f 4f       	sbci	r19, 0xFF	; 255
 136:	29 30       	cpi	r18, 0x09	; 9
 138:	31 05       	cpc	r19, r1
 13a:	0c f4       	brge	.+2      	; 0x13e <main+0xbc>
 13c:	a9 cf       	rjmp	.-174    	; 0x90 <main+0xe>
 13e:	a5 cf       	rjmp	.-182    	; 0x8a <main+0x8>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
