
multipleLEDwithDecoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000110  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a0  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ad  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a6  00000000  00000000  00000e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001144  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039d  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bc  00000000  00000000  00001505  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
{
	int delay_D1 = 5000; 
	//int delay_D2 = 1000;
	//int delay_C = 000;
	//int delay__ = 100;
    DDRB = 0xFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
  86:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
  88:	84 bb       	out	0x14, r24	; 20
    while (1) 
    {
		for(int j = 0 ; j < 16; j++ ){
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	50 e0       	ldi	r21, 0x00	; 0
  8e:	3a c0       	rjmp	.+116    	; 0x104 <main+0x82>
			if(j<8){
  90:	48 30       	cpi	r20, 0x08	; 8
  92:	51 05       	cpc	r21, r1
  94:	7c f5       	brge	.+94     	; 0xf4 <main+0x72>
				PORTD &= 0b11100000;
  96:	82 b3       	in	r24, 0x12	; 18
  98:	80 7e       	andi	r24, 0xE0	; 224
  9a:	82 bb       	out	0x12, r24	; 18
				PORTD |= (j & 0b00000111);
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	94 2f       	mov	r25, r20
  a0:	97 70       	andi	r25, 0x07	; 7
  a2:	89 2b       	or	r24, r25
  a4:	82 bb       	out	0x12, r24	; 18
				for(int i = 0; i < 8; i++){
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	21 c0       	rjmp	.+66     	; 0xee <main+0x6c>
					if(column1[i][j] == 1){
  ac:	fc 01       	movw	r30, r24
  ae:	ee 0f       	add	r30, r30
  b0:	ff 1f       	adc	r31, r31
  b2:	ee 0f       	add	r30, r30
  b4:	ff 1f       	adc	r31, r31
  b6:	ee 0f       	add	r30, r30
  b8:	ff 1f       	adc	r31, r31
  ba:	e0 5a       	subi	r30, 0xA0	; 160
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	e4 0f       	add	r30, r20
  c0:	f5 1f       	adc	r31, r21
  c2:	20 81       	ld	r18, Z
  c4:	21 30       	cpi	r18, 0x01	; 1
  c6:	79 f4       	brne	.+30     	; 0xe6 <main+0x64>
						PORTB &= 0b11111000;
  c8:	28 b3       	in	r18, 0x18	; 24
  ca:	28 7f       	andi	r18, 0xF8	; 248
  cc:	28 bb       	out	0x18, r18	; 24
						PORTB |= (i & 0b00000111);
  ce:	28 b3       	in	r18, 0x18	; 24
  d0:	38 2f       	mov	r19, r24
  d2:	37 70       	andi	r19, 0x07	; 7
  d4:	23 2b       	or	r18, r19
  d6:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	e1 ee       	ldi	r30, 0xE1	; 225
  da:	f4 e0       	ldi	r31, 0x04	; 4
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x5a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x60>
  e2:	00 00       	nop
  e4:	03 c0       	rjmp	.+6      	; 0xec <main+0x6a>
						_delay_us(delay_D1);
					}
					else{
						PORTD |= 1 << PD4;
  e6:	22 b3       	in	r18, 0x12	; 18
  e8:	20 61       	ori	r18, 0x10	; 16
  ea:	22 bb       	out	0x12, r18	; 18
    {
		for(int j = 0 ; j < 16; j++ ){
			if(j<8){
				PORTD &= 0b11100000;
				PORTD |= (j & 0b00000111);
				for(int i = 0; i < 8; i++){
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	88 30       	cpi	r24, 0x08	; 8
  f0:	91 05       	cpc	r25, r1
  f2:	e4 f2       	brlt	.-72     	; 0xac <main+0x2a>
  f4:	89 ef       	ldi	r24, 0xF9	; 249
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x76>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x7c>
  fe:	00 00       	nop
    DDRB = 0xFF;
	DDRD = 0xFF;
	DDRC = 0xFF;
    while (1) 
    {
		for(int j = 0 ; j < 16; j++ ){
 100:	4f 5f       	subi	r20, 0xFF	; 255
 102:	5f 4f       	sbci	r21, 0xFF	; 255
 104:	40 31       	cpi	r20, 0x10	; 16
 106:	51 05       	cpc	r21, r1
 108:	1c f2       	brlt	.-122    	; 0x90 <main+0xe>
 10a:	bf cf       	rjmp	.-130    	; 0x8a <main+0x8>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
