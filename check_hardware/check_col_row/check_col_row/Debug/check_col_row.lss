
check_col_row.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014a  00800060  00000fbc  00001050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a8  008001aa  008001aa  0000119a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000119a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000181d  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080a  00000000  00000000  00002ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e5f  00000000  00000000  000032ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00004150  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a2  00000000  00000000  00004360  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001492  00000000  00000000  00004902  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000448  00000000  00000000  00005d94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3a       	cpi	r26, 0xAA	; 170
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	aa ea       	ldi	r26, 0xAA	; 170
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 35       	cpi	r26, 0x52	; 82
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <main>
  8a:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <time>:
  92:	fc 01       	movw	r30, r24
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	60 91 4e 02 	lds	r22, 0x024E	; 0x80024e <__system_time>
  9c:	70 91 4f 02 	lds	r23, 0x024F	; 0x80024f <__system_time+0x1>
  a0:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <__system_time+0x2>
  a4:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <__system_time+0x3>
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	30 97       	sbiw	r30, 0x00	; 0
  ac:	21 f0       	breq	.+8      	; 0xb6 <time+0x24>
  ae:	60 83       	st	Z, r22
  b0:	71 83       	std	Z+1, r23	; 0x01
  b2:	82 83       	std	Z+2, r24	; 0x02
  b4:	93 83       	std	Z+3, r25	; 0x03
  b6:	08 95       	ret

000000b8 <ADC_Init>:
typedef enum { O, I, L, J, S, Z,  T } shape_type;
	
void ADC_Init()
{
	//DDRA = 0x00;		/* Make ADC port as input */
	ADCSRA = 0b10000001;		/* Enable ADC, fr/128  */
  b8:	81 e8       	ldi	r24, 0x81	; 129
  ba:	86 b9       	out	0x06, r24	; 6
	ADMUX =  0b01000000;		/* Vref: Avcc, ADC channel: 0 */
  bc:	80 e4       	ldi	r24, 0x40	; 64
  be:	87 b9       	out	0x07, r24	; 7
  c0:	08 95       	ret

000000c2 <ADC_Read>:

int ADC_Read(char channel)
{
	int ADC_value;
	
	ADMUX = (0x40) | (channel & 0x07);/* set input channel to read */
  c2:	87 70       	andi	r24, 0x07	; 7
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);	/* start conversion */
  c8:	86 b1       	in	r24, 0x06	; 6
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA &(1<<ADIF))== 0);	/* monitor end of conversion interrupt flag */
  ce:	34 9b       	sbis	0x06, 4	; 6
  d0:	fe cf       	rjmp	.-4      	; 0xce <ADC_Read+0xc>
	
	ADCSRA |= (1<<ADIF);	/* clear interrupt flag */
  d2:	86 b1       	in	r24, 0x06	; 6
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	86 b9       	out	0x06, r24	; 6
	ADC_value = (int)ADCL;	/* read lower byte */
  d8:	24 b1       	in	r18, 0x04	; 4
	ADC_value = ADC_value + (int)ADCH*256;/* read higher 2 bits, Multiply with weightage */
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	98 2f       	mov	r25, r24
  e0:	88 27       	eor	r24, r24

	return ADC_value;		/* return digital value */
}
  e2:	82 0f       	add	r24, r18
  e4:	91 1d       	adc	r25, r1
  e6:	08 95       	ret

000000e8 <UART_init>:
	
	int UBBRValue = 25;//AS described before setting baud rate

	//Put the upper part of the baud number here (bits 8 to 11)

	UBRRH = (unsigned char) (UBBRValue >> 8);
  e8:	10 bc       	out	0x20, r1	; 32

	//Put the remaining part of the baud number here

	UBRRL = (unsigned char) UBBRValue;
  ea:	89 e1       	ldi	r24, 0x19	; 25
  ec:	89 b9       	out	0x09, r24	; 9

	//Enable the receiver and transmitter

	UCSRB = (1 << TXEN);
  ee:	88 e0       	ldi	r24, 0x08	; 8
  f0:	8a b9       	out	0x0a, r24	; 10

	//Set 2 stop bits and data bit length is 8-bit

	//UCSRC = (1 << USBS) | (3 << UCSZ0);
	UCSRC = 0b10001110;
  f2:	8e e8       	ldi	r24, 0x8E	; 142
  f4:	80 bd       	out	0x20, r24	; 32
  f6:	08 95       	ret

000000f8 <UART_send>:
}

void UART_send(unsigned char data){
	// wait until UDRE flag is set to logic 1
	while ((UCSRA & (1<<UDRE)) == 0x00);
  f8:	5d 9b       	sbis	0x0b, 5	; 11
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <UART_send>
	UDR = data; // Write character to UDR for transmission
  fc:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	87 ee       	ldi	r24, 0xE7	; 231
 100:	93 e0       	ldi	r25, 0x03	; 3
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <UART_send+0xa>
 106:	00 c0       	rjmp	.+0      	; 0x108 <UART_send+0x10>
 108:	00 00       	nop
 10a:	08 95       	ret

0000010c <row_shift>:
	
}


void row_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
 10c:	cf 92       	push	r12
 10e:	df 92       	push	r13
 110:	ef 92       	push	r14
 112:	ff 92       	push	r15
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
	for(int counter=0; counter<shift_count; counter++){
 11c:	c1 2c       	mov	r12, r1
 11e:	d1 2c       	mov	r13, r1
 120:	47 c0       	rjmp	.+142    	; 0x1b0 <row_shift+0xa4>
		int index = 0;
		if (direction>0){
 122:	14 16       	cp	r1, r20
 124:	15 06       	cpc	r1, r21
 126:	24 f4       	brge	.+8      	; 0x130 <row_shift+0x24>
			index = length-1;
 128:	8c 01       	movw	r16, r24
 12a:	01 50       	subi	r16, 0x01	; 1
 12c:	11 09       	sbc	r17, r1
 12e:	02 c0       	rjmp	.+4      	; 0x134 <row_shift+0x28>


void row_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
	for(int counter=0; counter<shift_count; counter++){
		int index = 0;
 130:	00 e0       	ldi	r16, 0x00	; 0
 132:	10 e0       	ldi	r17, 0x00	; 0
 134:	e1 2c       	mov	r14, r1
 136:	f1 2c       	mov	r15, r1
 138:	22 c0       	rjmp	.+68     	; 0x17e <row_shift+0x72>
			index = length-1;
		}

		for (int i=0; i<length-1; i++){
			for (int j=0; j<length; j++){
				shape_array[index][j] = shape_array[index-direction][j];
 13a:	d8 01       	movw	r26, r16
 13c:	aa 0f       	add	r26, r26
 13e:	bb 1f       	adc	r27, r27
 140:	aa 0f       	add	r26, r26
 142:	bb 1f       	adc	r27, r27
 144:	a6 0f       	add	r26, r22
 146:	b7 1f       	adc	r27, r23
 148:	f8 01       	movw	r30, r16
 14a:	e4 1b       	sub	r30, r20
 14c:	f5 0b       	sbc	r31, r21
 14e:	ee 0f       	add	r30, r30
 150:	ff 1f       	adc	r31, r31
 152:	ee 0f       	add	r30, r30
 154:	ff 1f       	adc	r31, r31
 156:	e6 0f       	add	r30, r22
 158:	f7 1f       	adc	r31, r23
 15a:	ec 0f       	add	r30, r28
 15c:	fd 1f       	adc	r31, r29
 15e:	e0 81       	ld	r30, Z
 160:	ac 0f       	add	r26, r28
 162:	bd 1f       	adc	r27, r29
 164:	ec 93       	st	X, r30
		if (direction>0){
			index = length-1;
		}

		for (int i=0; i<length-1; i++){
			for (int j=0; j<length; j++){
 166:	21 96       	adiw	r28, 0x01	; 1
 168:	02 c0       	rjmp	.+4      	; 0x16e <row_shift+0x62>
 16a:	c0 e0       	ldi	r28, 0x00	; 0
 16c:	d0 e0       	ldi	r29, 0x00	; 0
 16e:	c8 17       	cp	r28, r24
 170:	d9 07       	cpc	r29, r25
 172:	1c f3       	brlt	.-58     	; 0x13a <row_shift+0x2e>
				shape_array[index][j] = shape_array[index-direction][j];
			}
			index = index - direction;
 174:	04 1b       	sub	r16, r20
 176:	15 0b       	sbc	r17, r21
		int index = 0;
		if (direction>0){
			index = length-1;
		}

		for (int i=0; i<length-1; i++){
 178:	ef ef       	ldi	r30, 0xFF	; 255
 17a:	ee 1a       	sub	r14, r30
 17c:	fe 0a       	sbc	r15, r30
 17e:	fc 01       	movw	r30, r24
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	ee 16       	cp	r14, r30
 184:	ff 06       	cpc	r15, r31
 186:	8c f3       	brlt	.-30     	; 0x16a <row_shift+0x5e>
 188:	a0 e0       	ldi	r26, 0x00	; 0
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	0b c0       	rjmp	.+22     	; 0x1a4 <row_shift+0x98>
				shape_array[index][j] = shape_array[index-direction][j];
			}
			index = index - direction;
		}
		for (int j=0; j<length; j++){
			shape_array[index][j] = FALSE;
 18e:	f8 01       	movw	r30, r16
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	e6 0f       	add	r30, r22
 19a:	f7 1f       	adc	r31, r23
 19c:	ea 0f       	add	r30, r26
 19e:	fb 1f       	adc	r31, r27
 1a0:	10 82       	st	Z, r1
			for (int j=0; j<length; j++){
				shape_array[index][j] = shape_array[index-direction][j];
			}
			index = index - direction;
		}
		for (int j=0; j<length; j++){
 1a2:	11 96       	adiw	r26, 0x01	; 1
 1a4:	a8 17       	cp	r26, r24
 1a6:	b9 07       	cpc	r27, r25
 1a8:	94 f3       	brlt	.-28     	; 0x18e <row_shift+0x82>
}


void row_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
	for(int counter=0; counter<shift_count; counter++){
 1aa:	ef ef       	ldi	r30, 0xFF	; 255
 1ac:	ce 1a       	sub	r12, r30
 1ae:	de 0a       	sbc	r13, r30
 1b0:	c2 16       	cp	r12, r18
 1b2:	d3 06       	cpc	r13, r19
 1b4:	0c f4       	brge	.+2      	; 0x1b8 <row_shift+0xac>
 1b6:	b5 cf       	rjmp	.-150    	; 0x122 <row_shift+0x16>
		}
		for (int j=0; j<length; j++){
			shape_array[index][j] = FALSE;
		}
	}
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	ff 90       	pop	r15
 1c2:	ef 90       	pop	r14
 1c4:	df 90       	pop	r13
 1c6:	cf 90       	pop	r12
 1c8:	08 95       	ret

000001ca <col_shift>:

void col_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
 1ca:	af 92       	push	r10
 1cc:	bf 92       	push	r11
 1ce:	cf 92       	push	r12
 1d0:	df 92       	push	r13
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	5c 01       	movw	r10, r24
 1e0:	79 01       	movw	r14, r18
	for(int counter=0; counter<shift_count; counter++){
 1e2:	00 e0       	ldi	r16, 0x00	; 0
 1e4:	10 e0       	ldi	r17, 0x00	; 0
 1e6:	40 c0       	rjmp	.+128    	; 0x268 <col_shift+0x9e>
		int index = 0;
		if (direction>0){
 1e8:	14 16       	cp	r1, r20
 1ea:	15 06       	cpc	r1, r21
 1ec:	1c f4       	brge	.+6      	; 0x1f4 <col_shift+0x2a>
			index = length-1;
 1ee:	c5 01       	movw	r24, r10
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <col_shift+0x2e>
}

void col_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
	for(int counter=0; counter<shift_count; counter++){
		int index = 0;
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	1c c0       	rjmp	.+56     	; 0x236 <col_shift+0x6c>
			index = length-1;
		}

		for (int j=0; j<length-1; j++){
			for (int i=0; i<length; i++){
				shape_array[i][index] = shape_array[i][index-direction];
 1fe:	fd 01       	movw	r30, r26
 200:	ee 0f       	add	r30, r30
 202:	ff 1f       	adc	r31, r31
 204:	ee 0f       	add	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	e6 0f       	add	r30, r22
 20a:	f7 1f       	adc	r31, r23
 20c:	6c 01       	movw	r12, r24
 20e:	c4 1a       	sub	r12, r20
 210:	d5 0a       	sbc	r13, r21
 212:	ce 0e       	add	r12, r30
 214:	df 1e       	adc	r13, r31
 216:	e6 01       	movw	r28, r12
 218:	d8 80       	ld	r13, Y
 21a:	e8 0f       	add	r30, r24
 21c:	f9 1f       	adc	r31, r25
 21e:	d0 82       	st	Z, r13
		if (direction>0){
			index = length-1;
		}

		for (int j=0; j<length-1; j++){
			for (int i=0; i<length; i++){
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	02 c0       	rjmp	.+4      	; 0x228 <col_shift+0x5e>
 224:	a0 e0       	ldi	r26, 0x00	; 0
 226:	b0 e0       	ldi	r27, 0x00	; 0
 228:	aa 15       	cp	r26, r10
 22a:	bb 05       	cpc	r27, r11
 22c:	44 f3       	brlt	.-48     	; 0x1fe <col_shift+0x34>
				shape_array[i][index] = shape_array[i][index-direction];
			}
			index = index - direction;
 22e:	84 1b       	sub	r24, r20
 230:	95 0b       	sbc	r25, r21
		int index = 0;
		if (direction>0){
			index = length-1;
		}

		for (int j=0; j<length-1; j++){
 232:	2f 5f       	subi	r18, 0xFF	; 255
 234:	3f 4f       	sbci	r19, 0xFF	; 255
 236:	f5 01       	movw	r30, r10
 238:	31 97       	sbiw	r30, 0x01	; 1
 23a:	2e 17       	cp	r18, r30
 23c:	3f 07       	cpc	r19, r31
 23e:	94 f3       	brlt	.-28     	; 0x224 <col_shift+0x5a>
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	0c c0       	rjmp	.+24     	; 0x25e <col_shift+0x94>
				shape_array[i][index] = shape_array[i][index-direction];
			}
			index = index - direction;
		}
		for (int i=0; i<length; i++){
			shape_array[i][index] = FALSE;
 246:	f9 01       	movw	r30, r18
 248:	ee 0f       	add	r30, r30
 24a:	ff 1f       	adc	r31, r31
 24c:	ee 0f       	add	r30, r30
 24e:	ff 1f       	adc	r31, r31
 250:	e6 0f       	add	r30, r22
 252:	f7 1f       	adc	r31, r23
 254:	e8 0f       	add	r30, r24
 256:	f9 1f       	adc	r31, r25
 258:	10 82       	st	Z, r1
			for (int i=0; i<length; i++){
				shape_array[i][index] = shape_array[i][index-direction];
			}
			index = index - direction;
		}
		for (int i=0; i<length; i++){
 25a:	2f 5f       	subi	r18, 0xFF	; 255
 25c:	3f 4f       	sbci	r19, 0xFF	; 255
 25e:	2a 15       	cp	r18, r10
 260:	3b 05       	cpc	r19, r11
 262:	8c f3       	brlt	.-30     	; 0x246 <col_shift+0x7c>
	}
}

void col_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
	for(int counter=0; counter<shift_count; counter++){
 264:	0f 5f       	subi	r16, 0xFF	; 255
 266:	1f 4f       	sbci	r17, 0xFF	; 255
 268:	0e 15       	cp	r16, r14
 26a:	1f 05       	cpc	r17, r15
 26c:	0c f4       	brge	.+2      	; 0x270 <col_shift+0xa6>
 26e:	bc cf       	rjmp	.-136    	; 0x1e8 <col_shift+0x1e>
		}
		for (int i=0; i<length; i++){
			shape_array[i][index] = FALSE;
		}
	}
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	df 90       	pop	r13
 27e:	cf 90       	pop	r12
 280:	bf 90       	pop	r11
 282:	af 90       	pop	r10
 284:	08 95       	ret

00000286 <align_top_left_justify>:

void align_top_left_justify(bool shape_array[][4])
{
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	ec 01       	movw	r28, r24
	//top left justify shape after rotation
	//top
	int shift_count = -1;
	int shift_direction = UP;
	for (int i=0; i<4; i++){
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0

void align_top_left_justify(bool shape_array[][4])
{
	//top left justify shape after rotation
	//top
	int shift_count = -1;
 294:	0f ef       	ldi	r16, 0xFF	; 255
 296:	1f ef       	ldi	r17, 0xFF	; 255
	int shift_direction = UP;
	for (int i=0; i<4; i++){
 298:	1b c0       	rjmp	.+54     	; 0x2d0 <align_top_left_justify+0x4a>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
 29a:	f9 01       	movw	r30, r18
 29c:	ee 0f       	add	r30, r30
 29e:	ff 1f       	adc	r31, r31
 2a0:	ee 0f       	add	r30, r30
 2a2:	ff 1f       	adc	r31, r31
 2a4:	ec 0f       	add	r30, r28
 2a6:	fd 1f       	adc	r31, r29
 2a8:	e8 0f       	add	r30, r24
 2aa:	f9 1f       	adc	r31, r25
 2ac:	40 81       	ld	r20, Z
 2ae:	4f 3f       	cpi	r20, 0xFF	; 255
 2b0:	41 f0       	breq	.+16     	; 0x2c2 <align_top_left_justify+0x3c>
	//top left justify shape after rotation
	//top
	int shift_count = -1;
	int shift_direction = UP;
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 2b2:	01 96       	adiw	r24, 0x01	; 1
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <align_top_left_justify+0x34>
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	84 30       	cpi	r24, 0x04	; 4
 2bc:	91 05       	cpc	r25, r1
 2be:	6c f3       	brlt	.-38     	; 0x29a <align_top_left_justify+0x14>
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <align_top_left_justify+0x3e>
			if(shape_array[i][j] == TRUE){
				shift_count = i;
 2c2:	89 01       	movw	r16, r18
				break;
			}
		}
		if (shift_count != -1){
 2c4:	0f 3f       	cpi	r16, 0xFF	; 255
 2c6:	8f ef       	ldi	r24, 0xFF	; 255
 2c8:	18 07       	cpc	r17, r24
 2ca:	29 f4       	brne	.+10     	; 0x2d6 <align_top_left_justify+0x50>
{
	//top left justify shape after rotation
	//top
	int shift_count = -1;
	int shift_direction = UP;
	for (int i=0; i<4; i++){
 2cc:	2f 5f       	subi	r18, 0xFF	; 255
 2ce:	3f 4f       	sbci	r19, 0xFF	; 255
 2d0:	24 30       	cpi	r18, 0x04	; 4
 2d2:	31 05       	cpc	r19, r1
 2d4:	84 f3       	brlt	.-32     	; 0x2b6 <align_top_left_justify+0x30>
		}
		if (shift_count != -1){
			break;
		}
	}
	row_shift(4, shape_array,shift_direction,shift_count);
 2d6:	98 01       	movw	r18, r16
 2d8:	4f ef       	ldi	r20, 0xFF	; 255
 2da:	5f ef       	ldi	r21, 0xFF	; 255
 2dc:	be 01       	movw	r22, r28
 2de:	84 e0       	ldi	r24, 0x04	; 4
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 86 00 	call	0x10c	; 0x10c <row_shift>
	
	//left justify
	int width = 0;
	int w1 = -1, w2 = -1;
	for (int j=0; j<4; j++){
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	30 e0       	ldi	r19, 0x00	; 0
	}
	row_shift(4, shape_array,shift_direction,shift_count);
	
	//left justify
	int width = 0;
	int w1 = -1, w2 = -1;
 2ea:	6f ef       	ldi	r22, 0xFF	; 255
 2ec:	7f ef       	ldi	r23, 0xFF	; 255
 2ee:	af ef       	ldi	r26, 0xFF	; 255
 2f0:	bf ef       	ldi	r27, 0xFF	; 255
	for (int j=0; j<4; j++){
 2f2:	25 c0       	rjmp	.+74     	; 0x33e <align_top_left_justify+0xb8>
		for (int i=0; i<4; i++){
			if(shape_array[i][j] == TRUE){
 2f4:	fc 01       	movw	r30, r24
 2f6:	ee 0f       	add	r30, r30
 2f8:	ff 1f       	adc	r31, r31
 2fa:	ee 0f       	add	r30, r30
 2fc:	ff 1f       	adc	r31, r31
 2fe:	ec 0f       	add	r30, r28
 300:	fd 1f       	adc	r31, r29
 302:	e2 0f       	add	r30, r18
 304:	f3 1f       	adc	r31, r19
 306:	40 81       	ld	r20, Z
 308:	4f 3f       	cpi	r20, 0xFF	; 255
 30a:	31 f4       	brne	.+12     	; 0x318 <align_top_left_justify+0x92>
				if(w1 == -1){
 30c:	af 3f       	cpi	r26, 0xFF	; 255
 30e:	8f ef       	ldi	r24, 0xFF	; 255
 310:	b8 07       	cpc	r27, r24
 312:	51 f0       	breq	.+20     	; 0x328 <align_top_left_justify+0xa2>
					w1 = j;
				}
				w2 = j;
 314:	b9 01       	movw	r22, r18
 316:	0a c0       	rjmp	.+20     	; 0x32c <align_top_left_justify+0xa6>
	
	//left justify
	int width = 0;
	int w1 = -1, w2 = -1;
	for (int j=0; j<4; j++){
		for (int i=0; i<4; i++){
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	02 c0       	rjmp	.+4      	; 0x320 <align_top_left_justify+0x9a>
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	84 30       	cpi	r24, 0x04	; 4
 322:	91 05       	cpc	r25, r1
 324:	3c f3       	brlt	.-50     	; 0x2f4 <align_top_left_justify+0x6e>
 326:	02 c0       	rjmp	.+4      	; 0x32c <align_top_left_justify+0xa6>
			if(shape_array[i][j] == TRUE){
				if(w1 == -1){
					w1 = j;
				}
				w2 = j;
 328:	b9 01       	movw	r22, r18
	int w1 = -1, w2 = -1;
	for (int j=0; j<4; j++){
		for (int i=0; i<4; i++){
			if(shape_array[i][j] == TRUE){
				if(w1 == -1){
					w1 = j;
 32a:	d9 01       	movw	r26, r18
				}
				w2 = j;
				break;
			}
		}
		if((w1 != -1) && (w2<j)){
 32c:	af 3f       	cpi	r26, 0xFF	; 255
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	b8 07       	cpc	r27, r24
 332:	19 f0       	breq	.+6      	; 0x33a <align_top_left_justify+0xb4>
 334:	62 17       	cp	r22, r18
 336:	73 07       	cpc	r23, r19
 338:	2c f0       	brlt	.+10     	; 0x344 <align_top_left_justify+0xbe>
	row_shift(4, shape_array,shift_direction,shift_count);
	
	//left justify
	int width = 0;
	int w1 = -1, w2 = -1;
	for (int j=0; j<4; j++){
 33a:	2f 5f       	subi	r18, 0xFF	; 255
 33c:	3f 4f       	sbci	r19, 0xFF	; 255
 33e:	24 30       	cpi	r18, 0x04	; 4
 340:	31 05       	cpc	r19, r1
 342:	64 f3       	brlt	.-40     	; 0x31c <align_top_left_justify+0x96>
		}
		if((w1 != -1) && (w2<j)){
			break;
		}
	}
	width = w2 - w1 + 1;
 344:	6a 1b       	sub	r22, r26
 346:	7b 0b       	sbc	r23, r27
 348:	cb 01       	movw	r24, r22
 34a:	01 96       	adiw	r24, 0x01	; 1
	if(width == 1 || width == 2){
 34c:	62 30       	cpi	r22, 0x02	; 2
 34e:	71 05       	cpc	r23, r1
 350:	20 f4       	brcc	.+8      	; 0x35a <align_top_left_justify+0xd4>
		shift_count = w1 - 1;
 352:	8d 01       	movw	r16, r26
 354:	01 50       	subi	r16, 0x01	; 1
 356:	11 09       	sbc	r17, r1
 358:	04 c0       	rjmp	.+8      	; 0x362 <align_top_left_justify+0xdc>
	}
	else if(width == 3 || width == 4){
 35a:	03 97       	sbiw	r24, 0x03	; 3
 35c:	02 97       	sbiw	r24, 0x02	; 2
 35e:	08 f4       	brcc	.+2      	; 0x362 <align_top_left_justify+0xdc>
		shift_count = w1 - 0;
 360:	8d 01       	movw	r16, r26
	}
	if(shift_count<0){
 362:	11 23       	and	r17, r17
 364:	34 f4       	brge	.+12     	; 0x372 <align_top_left_justify+0xec>
		shift_count = -shift_count;
 366:	11 95       	neg	r17
 368:	01 95       	neg	r16
 36a:	11 09       	sbc	r17, r1
		shift_direction = RIGHT;
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	50 e0       	ldi	r21, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <align_top_left_justify+0xf0>
	}
	else{
		shift_direction = LEFT;
 372:	4f ef       	ldi	r20, 0xFF	; 255
 374:	5f ef       	ldi	r21, 0xFF	; 255
	}
	col_shift(4,shape_array,shift_direction,shift_count);
 376:	98 01       	movw	r18, r16
 378:	be 01       	movw	r22, r28
 37a:	84 e0       	ldi	r24, 0x04	; 4
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <col_shift>
}
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	08 95       	ret

0000038c <rotate_shape>:

void rotate_shape(bool shape_array[][4])
{
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
 394:	60 97       	sbiw	r28, 0x10	; 16
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	f8 94       	cli
 39a:	de bf       	out	0x3e, r29	; 62
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	cd bf       	out	0x3d, r28	; 61
 3a0:	dc 01       	movw	r26, r24
	//rotate clockwise.
	//transpose, mirror.
	bool temp[4][4];
	
	for (int i=0; i<4; i++){
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	1f c0       	rjmp	.+62     	; 0x3e6 <rotate_shape+0x5a>
		for (int j=0; j<4; j++){
			temp[i][j] = shape_array[i][j];	//copy
 3a8:	9b 01       	movw	r18, r22
 3aa:	22 0f       	add	r18, r18
 3ac:	33 1f       	adc	r19, r19
 3ae:	22 0f       	add	r18, r18
 3b0:	33 1f       	adc	r19, r19
 3b2:	fd 01       	movw	r30, r26
 3b4:	e2 0f       	add	r30, r18
 3b6:	f3 1f       	adc	r31, r19
 3b8:	e4 0f       	add	r30, r20
 3ba:	f5 1f       	adc	r31, r21
 3bc:	90 81       	ld	r25, Z
 3be:	e1 e0       	ldi	r30, 0x01	; 1
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	ec 0f       	add	r30, r28
 3c4:	fd 1f       	adc	r31, r29
 3c6:	2e 0f       	add	r18, r30
 3c8:	3f 1f       	adc	r19, r31
 3ca:	f9 01       	movw	r30, r18
 3cc:	e4 0f       	add	r30, r20
 3ce:	f5 1f       	adc	r31, r21
 3d0:	90 83       	st	Z, r25
	//rotate clockwise.
	//transpose, mirror.
	bool temp[4][4];
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 3d2:	4f 5f       	subi	r20, 0xFF	; 255
 3d4:	5f 4f       	sbci	r21, 0xFF	; 255
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <rotate_shape+0x50>
 3d8:	40 e0       	ldi	r20, 0x00	; 0
 3da:	50 e0       	ldi	r21, 0x00	; 0
 3dc:	44 30       	cpi	r20, 0x04	; 4
 3de:	51 05       	cpc	r21, r1
 3e0:	1c f3       	brlt	.-58     	; 0x3a8 <rotate_shape+0x1c>
{
	//rotate clockwise.
	//transpose, mirror.
	bool temp[4][4];
	
	for (int i=0; i<4; i++){
 3e2:	6f 5f       	subi	r22, 0xFF	; 255
 3e4:	7f 4f       	sbci	r23, 0xFF	; 255
 3e6:	64 30       	cpi	r22, 0x04	; 4
 3e8:	71 05       	cpc	r23, r1
 3ea:	b4 f3       	brlt	.-20     	; 0x3d8 <rotate_shape+0x4c>
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	21 c0       	rjmp	.+66     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
		}
	}
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
			temp_shape_array[i][j] = temp[j][i];	//transpose
 3f2:	fc 01       	movw	r30, r24
 3f4:	ee 0f       	add	r30, r30
 3f6:	ff 1f       	adc	r31, r31
 3f8:	ee 0f       	add	r30, r30
 3fa:	ff 1f       	adc	r31, r31
 3fc:	41 e0       	ldi	r20, 0x01	; 1
 3fe:	50 e0       	ldi	r21, 0x00	; 0
 400:	4c 0f       	add	r20, r28
 402:	5d 1f       	adc	r21, r29
 404:	e4 0f       	add	r30, r20
 406:	f5 1f       	adc	r31, r21
 408:	e2 0f       	add	r30, r18
 40a:	f3 1f       	adc	r31, r19
 40c:	40 81       	ld	r20, Z
 40e:	f9 01       	movw	r30, r18
 410:	ee 0f       	add	r30, r30
 412:	ff 1f       	adc	r31, r31
 414:	ee 0f       	add	r30, r30
 416:	ff 1f       	adc	r31, r31
 418:	e2 5d       	subi	r30, 0xD2	; 210
 41a:	fd 4f       	sbci	r31, 0xFD	; 253
 41c:	e8 0f       	add	r30, r24
 41e:	f9 1f       	adc	r31, r25
 420:	40 83       	st	Z, r20
			temp[i][j] = shape_array[i][j];	//copy
		}
	}
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 422:	01 96       	adiw	r24, 0x01	; 1
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	84 30       	cpi	r24, 0x04	; 4
 42c:	91 05       	cpc	r25, r1
 42e:	0c f3       	brlt	.-62     	; 0x3f2 <rotate_shape+0x66>
		for (int j=0; j<4; j++){
			temp[i][j] = shape_array[i][j];	//copy
		}
	}
	
	for (int i=0; i<4; i++){
 430:	2f 5f       	subi	r18, 0xFF	; 255
 432:	3f 4f       	sbci	r19, 0xFF	; 255
 434:	24 30       	cpi	r18, 0x04	; 4
 436:	31 05       	cpc	r19, r1
 438:	b4 f3       	brlt	.-20     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	1f c0       	rjmp	.+62     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
		}
	}
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
			temp[i][j] = temp_shape_array[i][j];
 440:	cb 01       	movw	r24, r22
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	fc 01       	movw	r30, r24
 44c:	e2 5d       	subi	r30, 0xD2	; 210
 44e:	fd 4f       	sbci	r31, 0xFD	; 253
 450:	e2 0f       	add	r30, r18
 452:	f3 1f       	adc	r31, r19
 454:	40 81       	ld	r20, Z
 456:	e1 e0       	ldi	r30, 0x01	; 1
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	ec 0f       	add	r30, r28
 45c:	fd 1f       	adc	r31, r29
 45e:	8e 0f       	add	r24, r30
 460:	9f 1f       	adc	r25, r31
 462:	fc 01       	movw	r30, r24
 464:	e2 0f       	add	r30, r18
 466:	f3 1f       	adc	r31, r19
 468:	40 83       	st	Z, r20
			temp_shape_array[i][j] = temp[j][i];	//transpose
		}
	}
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 46a:	2f 5f       	subi	r18, 0xFF	; 255
 46c:	3f 4f       	sbci	r19, 0xFF	; 255
 46e:	02 c0       	rjmp	.+4      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 470:	20 e0       	ldi	r18, 0x00	; 0
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	24 30       	cpi	r18, 0x04	; 4
 476:	31 05       	cpc	r19, r1
 478:	1c f3       	brlt	.-58     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		for (int j=0; j<4; j++){
			temp_shape_array[i][j] = temp[j][i];	//transpose
		}
	}
	
	for (int i=0; i<4; i++){
 47a:	6f 5f       	subi	r22, 0xFF	; 255
 47c:	7f 4f       	sbci	r23, 0xFF	; 255
 47e:	64 30       	cpi	r22, 0x04	; 4
 480:	71 05       	cpc	r23, r1
 482:	b4 f3       	brlt	.-20     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	22 c0       	rjmp	.+68     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
		}
	}

	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
			temp_shape_array[i][j] = temp[i][3-j];	//mirror
 48a:	e3 e0       	ldi	r30, 0x03	; 3
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	e2 1b       	sub	r30, r18
 490:	f3 0b       	sbc	r31, r19
 492:	cb 01       	movw	r24, r22
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	41 e0       	ldi	r20, 0x01	; 1
 49e:	50 e0       	ldi	r21, 0x00	; 0
 4a0:	4c 0f       	add	r20, r28
 4a2:	5d 1f       	adc	r21, r29
 4a4:	48 0f       	add	r20, r24
 4a6:	59 1f       	adc	r21, r25
 4a8:	e4 0f       	add	r30, r20
 4aa:	f5 1f       	adc	r31, r21
 4ac:	40 81       	ld	r20, Z
 4ae:	82 5d       	subi	r24, 0xD2	; 210
 4b0:	9d 4f       	sbci	r25, 0xFD	; 253
 4b2:	fc 01       	movw	r30, r24
 4b4:	e2 0f       	add	r30, r18
 4b6:	f3 1f       	adc	r31, r19
 4b8:	40 83       	st	Z, r20
			temp[i][j] = temp_shape_array[i][j];
		}
	}

	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 4ba:	2f 5f       	subi	r18, 0xFF	; 255
 4bc:	3f 4f       	sbci	r19, 0xFF	; 255
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4c0:	20 e0       	ldi	r18, 0x00	; 0
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	24 30       	cpi	r18, 0x04	; 4
 4c6:	31 05       	cpc	r19, r1
 4c8:	04 f3       	brlt	.-64     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
		for (int j=0; j<4; j++){
			temp[i][j] = temp_shape_array[i][j];
		}
	}

	for (int i=0; i<4; i++){
 4ca:	6f 5f       	subi	r22, 0xFF	; 255
 4cc:	7f 4f       	sbci	r23, 0xFF	; 255
 4ce:	64 30       	cpi	r22, 0x04	; 4
 4d0:	71 05       	cpc	r23, r1
 4d2:	b4 f3       	brlt	.-20     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
		for (int j=0; j<4; j++){
			temp_shape_array[i][j] = temp[i][3-j];	//mirror
		}
	}
	align_top_left_justify(temp_shape_array);
 4d4:	8e e2       	ldi	r24, 0x2E	; 46
 4d6:	92 e0       	ldi	r25, 0x02	; 2
 4d8:	0e 94 43 01 	call	0x286	; 0x286 <align_top_left_justify>
}
 4dc:	60 96       	adiw	r28, 0x10	; 16
 4de:	0f b6       	in	r0, 0x3f	; 63
 4e0:	f8 94       	cli
 4e2:	de bf       	out	0x3e, r29	; 62
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	cd bf       	out	0x3d, r28	; 61
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	08 95       	ret

000004ee <check_valid>:

bool check_valid(int row, int col, bool shape_array[][4])
{
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	ec 01       	movw	r28, r24
	for(int i=0; i<4; i++){
 4f4:	a0 e0       	ldi	r26, 0x00	; 0
 4f6:	b0 e0       	ldi	r27, 0x00	; 0
 4f8:	2e c0       	rjmp	.+92     	; 0x556 <check_valid+0x68>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
 4fa:	fd 01       	movw	r30, r26
 4fc:	ee 0f       	add	r30, r30
 4fe:	ff 1f       	adc	r31, r31
 500:	ee 0f       	add	r30, r30
 502:	ff 1f       	adc	r31, r31
 504:	e4 0f       	add	r30, r20
 506:	f5 1f       	adc	r31, r21
 508:	e2 0f       	add	r30, r18
 50a:	f3 1f       	adc	r31, r19
 50c:	90 81       	ld	r25, Z
 50e:	9f 3f       	cpi	r25, 0xFF	; 255
 510:	c9 f4       	brne	.+50     	; 0x544 <check_valid+0x56>
				if((row+i) > 15){
 512:	fd 01       	movw	r30, r26
 514:	ec 0f       	add	r30, r28
 516:	fd 1f       	adc	r31, r29
 518:	e0 31       	cpi	r30, 0x10	; 16
 51a:	f1 05       	cpc	r31, r1
 51c:	0c f5       	brge	.+66     	; 0x560 <check_valid+0x72>
					//bottom row reached
					//invalid
					return FALSE;
				}
				if((col+j) < 0 || (col+j) > 7){
 51e:	c9 01       	movw	r24, r18
 520:	86 0f       	add	r24, r22
 522:	97 1f       	adc	r25, r23
 524:	88 30       	cpi	r24, 0x08	; 8
 526:	91 05       	cpc	r25, r1
 528:	e8 f4       	brcc	.+58     	; 0x564 <check_valid+0x76>
					//left/right col reached
					//invalid
					return FALSE;
				}
				if(current_display[row+i][col+j] == TRUE){
 52a:	ee 0f       	add	r30, r30
 52c:	ff 1f       	adc	r31, r31
 52e:	ee 0f       	add	r30, r30
 530:	ff 1f       	adc	r31, r31
 532:	ee 0f       	add	r30, r30
 534:	ff 1f       	adc	r31, r31
 536:	e2 55       	subi	r30, 0x52	; 82
 538:	fe 4f       	sbci	r31, 0xFE	; 254
 53a:	e8 0f       	add	r30, r24
 53c:	f9 1f       	adc	r31, r25
 53e:	80 81       	ld	r24, Z
 540:	8f 3f       	cpi	r24, 0xFF	; 255
 542:	91 f0       	breq	.+36     	; 0x568 <check_valid+0x7a>
}

bool check_valid(int row, int col, bool shape_array[][4])
{
	for(int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 544:	2f 5f       	subi	r18, 0xFF	; 255
 546:	3f 4f       	sbci	r19, 0xFF	; 255
 548:	02 c0       	rjmp	.+4      	; 0x54e <check_valid+0x60>
 54a:	20 e0       	ldi	r18, 0x00	; 0
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	24 30       	cpi	r18, 0x04	; 4
 550:	31 05       	cpc	r19, r1
 552:	9c f2       	brlt	.-90     	; 0x4fa <check_valid+0xc>
	align_top_left_justify(temp_shape_array);
}

bool check_valid(int row, int col, bool shape_array[][4])
{
	for(int i=0; i<4; i++){
 554:	11 96       	adiw	r26, 0x01	; 1
 556:	a4 30       	cpi	r26, 0x04	; 4
 558:	b1 05       	cpc	r27, r1
 55a:	bc f3       	brlt	.-18     	; 0x54a <check_valid+0x5c>
					return FALSE;
				}
			}
		}
	}
	return TRUE;
 55c:	8f ef       	ldi	r24, 0xFF	; 255
 55e:	05 c0       	rjmp	.+10     	; 0x56a <check_valid+0x7c>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
				if((row+i) > 15){
					//bottom row reached
					//invalid
					return FALSE;
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	03 c0       	rjmp	.+6      	; 0x56a <check_valid+0x7c>
				}
				if((col+j) < 0 || (col+j) > 7){
					//left/right col reached
					//invalid
					return FALSE;
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	01 c0       	rjmp	.+2      	; 0x56a <check_valid+0x7c>
				}
				if(current_display[row+i][col+j] == TRUE){
					//position filled
					//invalid
					return FALSE;
 568:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
	return TRUE;
}
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	08 95       	ret

00000570 <set_shape>:

void set_shape(bool shape_array[][4])
{
 570:	dc 01       	movw	r26, r24
	for(int i=0; i<4; i++){
 572:	60 e0       	ldi	r22, 0x00	; 0
 574:	70 e0       	ldi	r23, 0x00	; 0
 576:	2d c0       	rjmp	.+90     	; 0x5d2 <set_shape+0x62>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
 578:	fb 01       	movw	r30, r22
 57a:	ee 0f       	add	r30, r30
 57c:	ff 1f       	adc	r31, r31
 57e:	ee 0f       	add	r30, r30
 580:	ff 1f       	adc	r31, r31
 582:	ea 0f       	add	r30, r26
 584:	fb 1f       	adc	r31, r27
 586:	e2 0f       	add	r30, r18
 588:	f3 1f       	adc	r31, r19
 58a:	90 81       	ld	r25, Z
 58c:	9f 3f       	cpi	r25, 0xFF	; 255
 58e:	b9 f4       	brne	.+46     	; 0x5be <set_shape+0x4e>
				current_display[current_R+i][current_C+j] = shape_array[i][j];
 590:	40 91 ac 01 	lds	r20, 0x01AC	; 0x8001ac <current_R>
 594:	50 91 ad 01 	lds	r21, 0x01AD	; 0x8001ad <current_R+0x1>
 598:	46 0f       	add	r20, r22
 59a:	57 1f       	adc	r21, r23
 59c:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <current_C>
 5a0:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <current_C+0x1>
 5a4:	e2 0f       	add	r30, r18
 5a6:	f3 1f       	adc	r31, r19
 5a8:	44 0f       	add	r20, r20
 5aa:	55 1f       	adc	r21, r21
 5ac:	44 0f       	add	r20, r20
 5ae:	55 1f       	adc	r21, r21
 5b0:	44 0f       	add	r20, r20
 5b2:	55 1f       	adc	r21, r21
 5b4:	42 55       	subi	r20, 0x52	; 82
 5b6:	5e 4f       	sbci	r21, 0xFE	; 254
 5b8:	e4 0f       	add	r30, r20
 5ba:	f5 1f       	adc	r31, r21
 5bc:	90 83       	st	Z, r25
}

void set_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 5be:	2f 5f       	subi	r18, 0xFF	; 255
 5c0:	3f 4f       	sbci	r19, 0xFF	; 255
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <set_shape+0x58>
 5c4:	20 e0       	ldi	r18, 0x00	; 0
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	24 30       	cpi	r18, 0x04	; 4
 5ca:	31 05       	cpc	r19, r1
 5cc:	ac f2       	brlt	.-86     	; 0x578 <set_shape+0x8>
	return TRUE;
}

void set_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
 5ce:	6f 5f       	subi	r22, 0xFF	; 255
 5d0:	7f 4f       	sbci	r23, 0xFF	; 255
 5d2:	64 30       	cpi	r22, 0x04	; 4
 5d4:	71 05       	cpc	r23, r1
 5d6:	b4 f3       	brlt	.-20     	; 0x5c4 <set_shape+0x54>
				current_display[current_R+i][current_C+j] = shape_array[i][j];
			}
		}
	}
	//_delay_ms(50);
}
 5d8:	08 95       	ret

000005da <remove_shape>:
void remove_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	2d c0       	rjmp	.+90     	; 0x63a <remove_shape+0x60>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
 5e0:	fb 01       	movw	r30, r22
 5e2:	ee 0f       	add	r30, r30
 5e4:	ff 1f       	adc	r31, r31
 5e6:	ee 0f       	add	r30, r30
 5e8:	ff 1f       	adc	r31, r31
 5ea:	e8 0f       	add	r30, r24
 5ec:	f9 1f       	adc	r31, r25
 5ee:	e2 0f       	add	r30, r18
 5f0:	f3 1f       	adc	r31, r19
 5f2:	40 81       	ld	r20, Z
 5f4:	4f 3f       	cpi	r20, 0xFF	; 255
 5f6:	b9 f4       	brne	.+46     	; 0x626 <remove_shape+0x4c>
				current_display[current_R+i][current_C+j] = FALSE;
 5f8:	40 91 ac 01 	lds	r20, 0x01AC	; 0x8001ac <current_R>
 5fc:	50 91 ad 01 	lds	r21, 0x01AD	; 0x8001ad <current_R+0x1>
 600:	46 0f       	add	r20, r22
 602:	57 1f       	adc	r21, r23
 604:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <current_C>
 608:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <current_C+0x1>
 60c:	e2 0f       	add	r30, r18
 60e:	f3 1f       	adc	r31, r19
 610:	44 0f       	add	r20, r20
 612:	55 1f       	adc	r21, r21
 614:	44 0f       	add	r20, r20
 616:	55 1f       	adc	r21, r21
 618:	44 0f       	add	r20, r20
 61a:	55 1f       	adc	r21, r21
 61c:	42 55       	subi	r20, 0x52	; 82
 61e:	5e 4f       	sbci	r21, 0xFE	; 254
 620:	e4 0f       	add	r30, r20
 622:	f5 1f       	adc	r31, r21
 624:	10 82       	st	Z, r1
	//_delay_ms(50);
}
void remove_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 626:	2f 5f       	subi	r18, 0xFF	; 255
 628:	3f 4f       	sbci	r19, 0xFF	; 255
 62a:	02 c0       	rjmp	.+4      	; 0x630 <remove_shape+0x56>
 62c:	20 e0       	ldi	r18, 0x00	; 0
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	24 30       	cpi	r18, 0x04	; 4
 632:	31 05       	cpc	r19, r1
 634:	ac f2       	brlt	.-86     	; 0x5e0 <remove_shape+0x6>
	}
	//_delay_ms(50);
}
void remove_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
 636:	6f 5f       	subi	r22, 0xFF	; 255
 638:	7f 4f       	sbci	r23, 0xFF	; 255
 63a:	64 30       	cpi	r22, 0x04	; 4
 63c:	71 05       	cpc	r23, r1
 63e:	b4 f3       	brlt	.-20     	; 0x62c <remove_shape+0x52>
				current_display[current_R+i][current_C+j] = FALSE;
			}
		}
	}
	//_delay_ms(100);
}
 640:	08 95       	ret

00000642 <get_col>:

int get_col(int row)
{
 642:	ac 01       	movw	r20, r24
	int col_value = 0x00;
	for (int j=0; j<8; j++){
 644:	20 e0       	ldi	r18, 0x00	; 0
 646:	30 e0       	ldi	r19, 0x00	; 0
	//_delay_ms(100);
}

int get_col(int row)
{
	int col_value = 0x00;
 648:	a0 e0       	ldi	r26, 0x00	; 0
 64a:	b0 e0       	ldi	r27, 0x00	; 0
	for (int j=0; j<8; j++){
 64c:	1a c0       	rjmp	.+52     	; 0x682 <get_col+0x40>
		if(current_display[row][j] == TRUE){
 64e:	fa 01       	movw	r30, r20
 650:	ee 0f       	add	r30, r30
 652:	ff 1f       	adc	r31, r31
 654:	ee 0f       	add	r30, r30
 656:	ff 1f       	adc	r31, r31
 658:	ee 0f       	add	r30, r30
 65a:	ff 1f       	adc	r31, r31
 65c:	e2 55       	subi	r30, 0x52	; 82
 65e:	fe 4f       	sbci	r31, 0xFE	; 254
 660:	e2 0f       	add	r30, r18
 662:	f3 1f       	adc	r31, r19
 664:	90 81       	ld	r25, Z
 666:	9f 3f       	cpi	r25, 0xFF	; 255
 668:	51 f4       	brne	.+20     	; 0x67e <get_col+0x3c>
			col_value |= 1<<(j);
 66a:	61 e0       	ldi	r22, 0x01	; 1
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	02 2e       	mov	r0, r18
 670:	02 c0       	rjmp	.+4      	; 0x676 <get_col+0x34>
 672:	66 0f       	add	r22, r22
 674:	77 1f       	adc	r23, r23
 676:	0a 94       	dec	r0
 678:	e2 f7       	brpl	.-8      	; 0x672 <get_col+0x30>
 67a:	a6 2b       	or	r26, r22
 67c:	b7 2b       	or	r27, r23
}

int get_col(int row)
{
	int col_value = 0x00;
	for (int j=0; j<8; j++){
 67e:	2f 5f       	subi	r18, 0xFF	; 255
 680:	3f 4f       	sbci	r19, 0xFF	; 255
 682:	28 30       	cpi	r18, 0x08	; 8
 684:	31 05       	cpc	r19, r1
 686:	1c f3       	brlt	.-58     	; 0x64e <get_col+0xc>
		if(current_display[row][j] == TRUE){
			col_value |= 1<<(j);
		}
	}
	return col_value;
}
 688:	cd 01       	movw	r24, r26
 68a:	08 95       	ret

0000068c <remove_row>:

void remove_row(int row){
	//shift rows downwards from row to 1
	for(int i = row ; i > 0 ; i--){
 68c:	22 c0       	rjmp	.+68     	; 0x6d2 <remove_row+0x46>
		for(int j = 0 ; j< 8; j++){
			current_display[i][j] = current_display[i-1][j];
 68e:	fc 01       	movw	r30, r24
 690:	31 97       	sbiw	r30, 0x01	; 1
 692:	ee 0f       	add	r30, r30
 694:	ff 1f       	adc	r31, r31
 696:	ee 0f       	add	r30, r30
 698:	ff 1f       	adc	r31, r31
 69a:	ee 0f       	add	r30, r30
 69c:	ff 1f       	adc	r31, r31
 69e:	e2 55       	subi	r30, 0x52	; 82
 6a0:	fe 4f       	sbci	r31, 0xFE	; 254
 6a2:	e2 0f       	add	r30, r18
 6a4:	f3 1f       	adc	r31, r19
 6a6:	40 81       	ld	r20, Z
 6a8:	fc 01       	movw	r30, r24
 6aa:	ee 0f       	add	r30, r30
 6ac:	ff 1f       	adc	r31, r31
 6ae:	ee 0f       	add	r30, r30
 6b0:	ff 1f       	adc	r31, r31
 6b2:	ee 0f       	add	r30, r30
 6b4:	ff 1f       	adc	r31, r31
 6b6:	e2 55       	subi	r30, 0x52	; 82
 6b8:	fe 4f       	sbci	r31, 0xFE	; 254
 6ba:	e2 0f       	add	r30, r18
 6bc:	f3 1f       	adc	r31, r19
 6be:	40 83       	st	Z, r20
}

void remove_row(int row){
	//shift rows downwards from row to 1
	for(int i = row ; i > 0 ; i--){
		for(int j = 0 ; j< 8; j++){
 6c0:	2f 5f       	subi	r18, 0xFF	; 255
 6c2:	3f 4f       	sbci	r19, 0xFF	; 255
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <remove_row+0x3e>
 6c6:	20 e0       	ldi	r18, 0x00	; 0
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	28 30       	cpi	r18, 0x08	; 8
 6cc:	31 05       	cpc	r19, r1
 6ce:	fc f2       	brlt	.-66     	; 0x68e <remove_row+0x2>
	return col_value;
}

void remove_row(int row){
	//shift rows downwards from row to 1
	for(int i = row ; i > 0 ; i--){
 6d0:	01 97       	sbiw	r24, 0x01	; 1
 6d2:	18 16       	cp	r1, r24
 6d4:	19 06       	cpc	r1, r25
 6d6:	bc f3       	brlt	.-18     	; 0x6c6 <remove_row+0x3a>
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	05 c0       	rjmp	.+10     	; 0x6e8 <remove_row+0x5c>
			current_display[i][j] = current_display[i-1][j];
		}
	}
	//put false in row 0
	for(int i = 0 ; i < 8; i++){
		current_display[0][i] = FALSE;
 6de:	fc 01       	movw	r30, r24
 6e0:	e2 55       	subi	r30, 0x52	; 82
 6e2:	fe 4f       	sbci	r31, 0xFE	; 254
 6e4:	10 82       	st	Z, r1
		for(int j = 0 ; j< 8; j++){
			current_display[i][j] = current_display[i-1][j];
		}
	}
	//put false in row 0
	for(int i = 0 ; i < 8; i++){
 6e6:	01 96       	adiw	r24, 0x01	; 1
 6e8:	88 30       	cpi	r24, 0x08	; 8
 6ea:	91 05       	cpc	r25, r1
 6ec:	c4 f3       	brlt	.-16     	; 0x6de <remove_row+0x52>
		current_display[0][i] = FALSE;
	}
}
 6ee:	08 95       	ret

000006f0 <update_score1x>:
void update_score1x(){
 6f0:	cf 93       	push	r28
 6f2:	df 93       	push	r29
	uint8_t temp ;
	for(int i = 0 ; i < 16 ; i++){
 6f4:	c0 e0       	ldi	r28, 0x00	; 0
 6f6:	d0 e0       	ldi	r29, 0x00	; 0
 6f8:	30 c0       	rjmp	.+96     	; 0x75a <update_score1x+0x6a>
		temp = TRUE;
		for(int j = 0 ; j < 8; j++){
			temp &= current_display[i][j];
 6fa:	fe 01       	movw	r30, r28
 6fc:	ee 0f       	add	r30, r30
 6fe:	ff 1f       	adc	r31, r31
 700:	ee 0f       	add	r30, r30
 702:	ff 1f       	adc	r31, r31
 704:	ee 0f       	add	r30, r30
 706:	ff 1f       	adc	r31, r31
 708:	e2 55       	subi	r30, 0x52	; 82
 70a:	fe 4f       	sbci	r31, 0xFE	; 254
 70c:	e8 0f       	add	r30, r24
 70e:	f9 1f       	adc	r31, r25
 710:	30 81       	ld	r19, Z
 712:	23 23       	and	r18, r19
}
void update_score1x(){
	uint8_t temp ;
	for(int i = 0 ; i < 16 ; i++){
		temp = TRUE;
		for(int j = 0 ; j < 8; j++){
 714:	01 96       	adiw	r24, 0x01	; 1
 716:	03 c0       	rjmp	.+6      	; 0x71e <update_score1x+0x2e>
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	2f ef       	ldi	r18, 0xFF	; 255
 71e:	88 30       	cpi	r24, 0x08	; 8
 720:	91 05       	cpc	r25, r1
 722:	5c f3       	brlt	.-42     	; 0x6fa <update_score1x+0xa>
			temp &= current_display[i][j];
		}
		if(temp == TRUE){
 724:	2f 3f       	cpi	r18, 0xFF	; 255
 726:	c1 f4       	brne	.+48     	; 0x758 <update_score1x+0x68>
			UART_send(10);
 728:	8a e0       	ldi	r24, 0x0A	; 10
 72a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_send>
			PORTA |= 1 << PA2 ;
 72e:	8b b3       	in	r24, 0x1b	; 27
 730:	84 60       	ori	r24, 0x04	; 4
 732:	8b bb       	out	0x1b, r24	; 27
 734:	8f e4       	ldi	r24, 0x4F	; 79
 736:	93 ec       	ldi	r25, 0xC3	; 195
 738:	01 97       	sbiw	r24, 0x01	; 1
 73a:	f1 f7       	brne	.-4      	; 0x738 <update_score1x+0x48>
 73c:	00 c0       	rjmp	.+0      	; 0x73e <update_score1x+0x4e>
 73e:	00 00       	nop
			_delay_ms(200);
			PORTA &= ~(1 << PA2);
 740:	8b b3       	in	r24, 0x1b	; 27
 742:	8b 7f       	andi	r24, 0xFB	; 251
 744:	8b bb       	out	0x1b, r24	; 27
 746:	8f e4       	ldi	r24, 0x4F	; 79
 748:	93 ec       	ldi	r25, 0xC3	; 195
 74a:	01 97       	sbiw	r24, 0x01	; 1
 74c:	f1 f7       	brne	.-4      	; 0x74a <update_score1x+0x5a>
 74e:	00 c0       	rjmp	.+0      	; 0x750 <update_score1x+0x60>
 750:	00 00       	nop
			_delay_ms(200);
			remove_row(i);
 752:	ce 01       	movw	r24, r28
 754:	0e 94 46 03 	call	0x68c	; 0x68c <remove_row>
		current_display[0][i] = FALSE;
	}
}
void update_score1x(){
	uint8_t temp ;
	for(int i = 0 ; i < 16 ; i++){
 758:	21 96       	adiw	r28, 0x01	; 1
 75a:	c0 31       	cpi	r28, 0x10	; 16
 75c:	d1 05       	cpc	r29, r1
 75e:	e4 f2       	brlt	.-72     	; 0x718 <update_score1x+0x28>
			PORTA &= ~(1 << PA2);
			_delay_ms(200);
			remove_row(i);
		}
	}
}
 760:	df 91       	pop	r29
 762:	cf 91       	pop	r28
 764:	08 95       	ret

00000766 <update_score2x>:
void update_score2x(){
 766:	0f 93       	push	r16
 768:	1f 93       	push	r17
 76a:	cf 93       	push	r28
 76c:	df 93       	push	r29
	uint8_t temp ;
	for(int i = 0 ; i < 12 ; i++){
 76e:	c0 e0       	ldi	r28, 0x00	; 0
 770:	d0 e0       	ldi	r29, 0x00	; 0
 772:	43 c0       	rjmp	.+134    	; 0x7fa <update_score2x+0x94>
		temp = TRUE;
		int ii = i;
		for(int t = 0; t < 4; t++){
			for(int j = 0 ; j < 8; j++){
				temp &= current_display[ii][j];
 774:	fa 01       	movw	r30, r20
 776:	ee 0f       	add	r30, r30
 778:	ff 1f       	adc	r31, r31
 77a:	ee 0f       	add	r30, r30
 77c:	ff 1f       	adc	r31, r31
 77e:	ee 0f       	add	r30, r30
 780:	ff 1f       	adc	r31, r31
 782:	e2 55       	subi	r30, 0x52	; 82
 784:	fe 4f       	sbci	r31, 0xFE	; 254
 786:	e8 0f       	add	r30, r24
 788:	f9 1f       	adc	r31, r25
 78a:	30 81       	ld	r19, Z
 78c:	23 23       	and	r18, r19
	uint8_t temp ;
	for(int i = 0 ; i < 12 ; i++){
		temp = TRUE;
		int ii = i;
		for(int t = 0; t < 4; t++){
			for(int j = 0 ; j < 8; j++){
 78e:	01 96       	adiw	r24, 0x01	; 1
 790:	02 c0       	rjmp	.+4      	; 0x796 <update_score2x+0x30>
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	88 30       	cpi	r24, 0x08	; 8
 798:	91 05       	cpc	r25, r1
 79a:	64 f3       	brlt	.-40     	; 0x774 <update_score2x+0xe>
				temp &= current_display[ii][j];
			}
			ii++;
 79c:	4f 5f       	subi	r20, 0xFF	; 255
 79e:	5f 4f       	sbci	r21, 0xFF	; 255
void update_score2x(){
	uint8_t temp ;
	for(int i = 0 ; i < 12 ; i++){
		temp = TRUE;
		int ii = i;
		for(int t = 0; t < 4; t++){
 7a0:	6f 5f       	subi	r22, 0xFF	; 255
 7a2:	7f 4f       	sbci	r23, 0xFF	; 255
 7a4:	04 c0       	rjmp	.+8      	; 0x7ae <update_score2x+0x48>
 7a6:	ae 01       	movw	r20, r28
 7a8:	60 e0       	ldi	r22, 0x00	; 0
 7aa:	70 e0       	ldi	r23, 0x00	; 0
 7ac:	2f ef       	ldi	r18, 0xFF	; 255
 7ae:	64 30       	cpi	r22, 0x04	; 4
 7b0:	71 05       	cpc	r23, r1
 7b2:	7c f3       	brlt	.-34     	; 0x792 <update_score2x+0x2c>
			for(int j = 0 ; j < 8; j++){
				temp &= current_display[ii][j];
			}
			ii++;
		}
		if(temp == TRUE){
 7b4:	2f 3f       	cpi	r18, 0xFF	; 255
 7b6:	01 f5       	brne	.+64     	; 0x7f8 <update_score2x+0x92>
			UART_send(11);
 7b8:	8b e0       	ldi	r24, 0x0B	; 11
 7ba:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_send>
			PORTA |= 1 << PA2 ;
 7be:	8b b3       	in	r24, 0x1b	; 27
 7c0:	84 60       	ori	r24, 0x04	; 4
 7c2:	8b bb       	out	0x1b, r24	; 27
 7c4:	8f e4       	ldi	r24, 0x4F	; 79
 7c6:	93 ec       	ldi	r25, 0xC3	; 195
 7c8:	01 97       	sbiw	r24, 0x01	; 1
 7ca:	f1 f7       	brne	.-4      	; 0x7c8 <update_score2x+0x62>
 7cc:	00 c0       	rjmp	.+0      	; 0x7ce <update_score2x+0x68>
 7ce:	00 00       	nop
			_delay_ms(200);
			PORTA &= ~(1 << PA2);
 7d0:	8b b3       	in	r24, 0x1b	; 27
 7d2:	8b 7f       	andi	r24, 0xFB	; 251
 7d4:	8b bb       	out	0x1b, r24	; 27
 7d6:	8f e4       	ldi	r24, 0x4F	; 79
 7d8:	93 ec       	ldi	r25, 0xC3	; 195
 7da:	01 97       	sbiw	r24, 0x01	; 1
 7dc:	f1 f7       	brne	.-4      	; 0x7da <update_score2x+0x74>
 7de:	00 c0       	rjmp	.+0      	; 0x7e0 <update_score2x+0x7a>
 7e0:	00 00       	nop
			_delay_ms(200);
			for(int t = 0; t < 4; t++){
 7e2:	00 e0       	ldi	r16, 0x00	; 0
 7e4:	10 e0       	ldi	r17, 0x00	; 0
 7e6:	05 c0       	rjmp	.+10     	; 0x7f2 <update_score2x+0x8c>
				remove_row(i);
 7e8:	ce 01       	movw	r24, r28
 7ea:	0e 94 46 03 	call	0x68c	; 0x68c <remove_row>
			UART_send(11);
			PORTA |= 1 << PA2 ;
			_delay_ms(200);
			PORTA &= ~(1 << PA2);
			_delay_ms(200);
			for(int t = 0; t < 4; t++){
 7ee:	0f 5f       	subi	r16, 0xFF	; 255
 7f0:	1f 4f       	sbci	r17, 0xFF	; 255
 7f2:	04 30       	cpi	r16, 0x04	; 4
 7f4:	11 05       	cpc	r17, r1
 7f6:	c4 f3       	brlt	.-16     	; 0x7e8 <update_score2x+0x82>
		}
	}
}
void update_score2x(){
	uint8_t temp ;
	for(int i = 0 ; i < 12 ; i++){
 7f8:	21 96       	adiw	r28, 0x01	; 1
 7fa:	cc 30       	cpi	r28, 0x0C	; 12
 7fc:	d1 05       	cpc	r29, r1
 7fe:	9c f2       	brlt	.-90     	; 0x7a6 <update_score2x+0x40>
			for(int t = 0; t < 4; t++){
				remove_row(i);
			}
		}
	}
}
 800:	df 91       	pop	r29
 802:	cf 91       	pop	r28
 804:	1f 91       	pop	r17
 806:	0f 91       	pop	r16
 808:	08 95       	ret

0000080a <go_left>:
void go_left(){
	remove_shape(current_shape_array);
 80a:	8e e3       	ldi	r24, 0x3E	; 62
 80c:	92 e0       	ldi	r25, 0x02	; 2
 80e:	0e 94 ed 02 	call	0x5da	; 0x5da <remove_shape>
	if(check_valid(current_R, current_C-1 , current_shape_array) == TRUE){
 812:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <current_C>
 816:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <current_C+0x1>
 81a:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <current_R>
 81e:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <current_R+0x1>
 822:	61 50       	subi	r22, 0x01	; 1
 824:	71 09       	sbc	r23, r1
 826:	4e e3       	ldi	r20, 0x3E	; 62
 828:	52 e0       	ldi	r21, 0x02	; 2
 82a:	0e 94 77 02 	call	0x4ee	; 0x4ee <check_valid>
 82e:	8f 3f       	cpi	r24, 0xFF	; 255
 830:	49 f4       	brne	.+18     	; 0x844 <go_left+0x3a>
		current_C--;
 832:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <current_C>
 836:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <current_C+0x1>
 83a:	01 97       	sbiw	r24, 0x01	; 1
 83c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <current_C+0x1>
 840:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <current_C>
	}
	set_shape(current_shape_array);
 844:	8e e3       	ldi	r24, 0x3E	; 62
 846:	92 e0       	ldi	r25, 0x02	; 2
 848:	0e 94 b8 02 	call	0x570	; 0x570 <set_shape>
 84c:	08 95       	ret

0000084e <go_right>:
}
void go_right(){
	remove_shape(current_shape_array);
 84e:	8e e3       	ldi	r24, 0x3E	; 62
 850:	92 e0       	ldi	r25, 0x02	; 2
 852:	0e 94 ed 02 	call	0x5da	; 0x5da <remove_shape>
	if(check_valid(current_R, current_C+1 , current_shape_array) == TRUE){
 856:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <current_C>
 85a:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <current_C+0x1>
 85e:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <current_R>
 862:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <current_R+0x1>
 866:	6f 5f       	subi	r22, 0xFF	; 255
 868:	7f 4f       	sbci	r23, 0xFF	; 255
 86a:	4e e3       	ldi	r20, 0x3E	; 62
 86c:	52 e0       	ldi	r21, 0x02	; 2
 86e:	0e 94 77 02 	call	0x4ee	; 0x4ee <check_valid>
 872:	8f 3f       	cpi	r24, 0xFF	; 255
 874:	49 f4       	brne	.+18     	; 0x888 <__stack+0x29>
		current_C++;
 876:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <current_C>
 87a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <current_C+0x1>
 87e:	01 96       	adiw	r24, 0x01	; 1
 880:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <current_C+0x1>
 884:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <current_C>
	}
	set_shape(current_shape_array);
 888:	8e e3       	ldi	r24, 0x3E	; 62
 88a:	92 e0       	ldi	r25, 0x02	; 2
 88c:	0e 94 b8 02 	call	0x570	; 0x570 <set_shape>
 890:	08 95       	ret

00000892 <go_down>:
}
void go_down(){
	remove_shape(current_shape_array);
 892:	8e e3       	ldi	r24, 0x3E	; 62
 894:	92 e0       	ldi	r25, 0x02	; 2
 896:	0e 94 ed 02 	call	0x5da	; 0x5da <remove_shape>
	if(check_valid(current_R+1, current_C , current_shape_array) == TRUE){
 89a:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <current_C>
 89e:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <current_C+0x1>
 8a2:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <current_R>
 8a6:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <current_R+0x1>
 8aa:	4e e3       	ldi	r20, 0x3E	; 62
 8ac:	52 e0       	ldi	r21, 0x02	; 2
 8ae:	01 96       	adiw	r24, 0x01	; 1
 8b0:	0e 94 77 02 	call	0x4ee	; 0x4ee <check_valid>
 8b4:	8f 3f       	cpi	r24, 0xFF	; 255
 8b6:	71 f4       	brne	.+28     	; 0x8d4 <go_down+0x42>
		current_R++;
 8b8:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <current_R>
 8bc:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <current_R+0x1>
 8c0:	01 96       	adiw	r24, 0x01	; 1
 8c2:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <current_R+0x1>
 8c6:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <current_R>
		set_shape(current_shape_array);
 8ca:	8e e3       	ldi	r24, 0x3E	; 62
 8cc:	92 e0       	ldi	r25, 0x02	; 2
 8ce:	0e 94 b8 02 	call	0x570	; 0x570 <set_shape>
 8d2:	08 95       	ret
	}
	else{
		set_shape(current_shape_array);
 8d4:	8e e3       	ldi	r24, 0x3E	; 62
 8d6:	92 e0       	ldi	r25, 0x02	; 2
 8d8:	0e 94 b8 02 	call	0x570	; 0x570 <set_shape>
		current_C = 2;
 8dc:	82 e0       	ldi	r24, 0x02	; 2
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <current_C+0x1>
 8e4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <current_C>
		current_R = 0;
 8e8:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <current_R+0x1>
 8ec:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <current_R>
		for(int i = 0 ; i < 4; i++){
 8f0:	20 e0       	ldi	r18, 0x00	; 0
 8f2:	30 e0       	ldi	r19, 0x00	; 0
 8f4:	13 c0       	rjmp	.+38     	; 0x91c <go_down+0x8a>
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = FALSE;
 8f6:	f9 01       	movw	r30, r18
 8f8:	ee 0f       	add	r30, r30
 8fa:	ff 1f       	adc	r31, r31
 8fc:	ee 0f       	add	r30, r30
 8fe:	ff 1f       	adc	r31, r31
 900:	e2 5c       	subi	r30, 0xC2	; 194
 902:	fd 4f       	sbci	r31, 0xFD	; 253
 904:	e8 0f       	add	r30, r24
 906:	f9 1f       	adc	r31, r25
 908:	10 82       	st	Z, r1
	else{
		set_shape(current_shape_array);
		current_C = 2;
		current_R = 0;
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
 90a:	01 96       	adiw	r24, 0x01	; 1
 90c:	02 c0       	rjmp	.+4      	; 0x912 <go_down+0x80>
 90e:	80 e0       	ldi	r24, 0x00	; 0
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	84 30       	cpi	r24, 0x04	; 4
 914:	91 05       	cpc	r25, r1
 916:	7c f3       	brlt	.-34     	; 0x8f6 <go_down+0x64>
	}
	else{
		set_shape(current_shape_array);
		current_C = 2;
		current_R = 0;
		for(int i = 0 ; i < 4; i++){
 918:	2f 5f       	subi	r18, 0xFF	; 255
 91a:	3f 4f       	sbci	r19, 0xFF	; 255
 91c:	24 30       	cpi	r18, 0x04	; 4
 91e:	31 05       	cpc	r19, r1
 920:	b4 f3       	brlt	.-20     	; 0x90e <go_down+0x7c>
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = FALSE;
			}
		}
		current_shape = -1;
 922:	8f ef       	ldi	r24, 0xFF	; 255
 924:	9f ef       	ldi	r25, 0xFF	; 255
 926:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <current_shape+0x1>
 92a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <current_shape>
		update_score2x();
 92e:	0e 94 b3 03 	call	0x766	; 0x766 <update_score2x>
		update_score1x();
 932:	0e 94 78 03 	call	0x6f0	; 0x6f0 <update_score1x>
 936:	08 95       	ret

00000938 <generate_shape>:
	}
}
void generate_shape(int shape){
	//int shape = 0;
	//int shape = rand()%7;
	current_shape = shape;
 938:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <current_shape+0x1>
 93c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <current_shape>
	if( shape == 0){
 940:	00 97       	sbiw	r24, 0x00	; 0
 942:	e9 f0       	breq	.+58     	; 0x97e <generate_shape+0x46>
 944:	22 c0       	rjmp	.+68     	; 0x98a <generate_shape+0x52>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_O_array[i][j];
 946:	cb 01       	movw	r24, r22
 948:	88 0f       	add	r24, r24
 94a:	99 1f       	adc	r25, r25
 94c:	88 0f       	add	r24, r24
 94e:	99 1f       	adc	r25, r25
 950:	fc 01       	movw	r30, r24
 952:	e6 53       	subi	r30, 0x36	; 54
 954:	ff 4f       	sbci	r31, 0xFF	; 255
 956:	e2 0f       	add	r30, r18
 958:	f3 1f       	adc	r31, r19
 95a:	40 81       	ld	r20, Z
 95c:	82 5c       	subi	r24, 0xC2	; 194
 95e:	9d 4f       	sbci	r25, 0xFD	; 253
 960:	fc 01       	movw	r30, r24
 962:	e2 0f       	add	r30, r18
 964:	f3 1f       	adc	r31, r19
 966:	40 83       	st	Z, r20
	//int shape = 0;
	//int shape = rand()%7;
	current_shape = shape;
	if( shape == 0){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
 968:	2f 5f       	subi	r18, 0xFF	; 255
 96a:	3f 4f       	sbci	r19, 0xFF	; 255
 96c:	02 c0       	rjmp	.+4      	; 0x972 <generate_shape+0x3a>
 96e:	20 e0       	ldi	r18, 0x00	; 0
 970:	30 e0       	ldi	r19, 0x00	; 0
 972:	24 30       	cpi	r18, 0x04	; 4
 974:	31 05       	cpc	r19, r1
 976:	3c f3       	brlt	.-50     	; 0x946 <generate_shape+0xe>
void generate_shape(int shape){
	//int shape = 0;
	//int shape = rand()%7;
	current_shape = shape;
	if( shape == 0){
		for(int i = 0 ; i < 4; i++){
 978:	6f 5f       	subi	r22, 0xFF	; 255
 97a:	7f 4f       	sbci	r23, 0xFF	; 255
 97c:	02 c0       	rjmp	.+4      	; 0x982 <generate_shape+0x4a>
 97e:	60 e0       	ldi	r22, 0x00	; 0
 980:	70 e0       	ldi	r23, 0x00	; 0
 982:	64 30       	cpi	r22, 0x04	; 4
 984:	71 05       	cpc	r23, r1
 986:	9c f3       	brlt	.-26     	; 0x96e <generate_shape+0x36>
 988:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_O_array[i][j];
			}
		}
	}
	else if(shape == 1){
 98a:	81 30       	cpi	r24, 0x01	; 1
 98c:	91 05       	cpc	r25, r1
 98e:	19 f5       	brne	.+70     	; 0x9d6 <generate_shape+0x9e>
 990:	1c c0       	rjmp	.+56     	; 0x9ca <generate_shape+0x92>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_I_array[i][j];
 992:	cb 01       	movw	r24, r22
 994:	88 0f       	add	r24, r24
 996:	99 1f       	adc	r25, r25
 998:	88 0f       	add	r24, r24
 99a:	99 1f       	adc	r25, r25
 99c:	fc 01       	movw	r30, r24
 99e:	e6 54       	subi	r30, 0x46	; 70
 9a0:	ff 4f       	sbci	r31, 0xFF	; 255
 9a2:	e2 0f       	add	r30, r18
 9a4:	f3 1f       	adc	r31, r19
 9a6:	40 81       	ld	r20, Z
 9a8:	82 5c       	subi	r24, 0xC2	; 194
 9aa:	9d 4f       	sbci	r25, 0xFD	; 253
 9ac:	fc 01       	movw	r30, r24
 9ae:	e2 0f       	add	r30, r18
 9b0:	f3 1f       	adc	r31, r19
 9b2:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 1){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
 9b4:	2f 5f       	subi	r18, 0xFF	; 255
 9b6:	3f 4f       	sbci	r19, 0xFF	; 255
 9b8:	02 c0       	rjmp	.+4      	; 0x9be <generate_shape+0x86>
 9ba:	20 e0       	ldi	r18, 0x00	; 0
 9bc:	30 e0       	ldi	r19, 0x00	; 0
 9be:	24 30       	cpi	r18, 0x04	; 4
 9c0:	31 05       	cpc	r19, r1
 9c2:	3c f3       	brlt	.-50     	; 0x992 <generate_shape+0x5a>
				current_shape_array[i][j] = shape_O_array[i][j];
			}
		}
	}
	else if(shape == 1){
		for(int i = 0 ; i < 4; i++){
 9c4:	6f 5f       	subi	r22, 0xFF	; 255
 9c6:	7f 4f       	sbci	r23, 0xFF	; 255
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <generate_shape+0x96>
 9ca:	60 e0       	ldi	r22, 0x00	; 0
 9cc:	70 e0       	ldi	r23, 0x00	; 0
 9ce:	64 30       	cpi	r22, 0x04	; 4
 9d0:	71 05       	cpc	r23, r1
 9d2:	9c f3       	brlt	.-26     	; 0x9ba <generate_shape+0x82>
 9d4:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_I_array[i][j];
			}
		}
	}
	else if(shape == 2){
 9d6:	82 30       	cpi	r24, 0x02	; 2
 9d8:	91 05       	cpc	r25, r1
 9da:	19 f5       	brne	.+70     	; 0xa22 <generate_shape+0xea>
 9dc:	1c c0       	rjmp	.+56     	; 0xa16 <generate_shape+0xde>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_L_array[i][j];
 9de:	cb 01       	movw	r24, r22
 9e0:	88 0f       	add	r24, r24
 9e2:	99 1f       	adc	r25, r25
 9e4:	88 0f       	add	r24, r24
 9e6:	99 1f       	adc	r25, r25
 9e8:	fc 01       	movw	r30, r24
 9ea:	e6 55       	subi	r30, 0x56	; 86
 9ec:	ff 4f       	sbci	r31, 0xFF	; 255
 9ee:	e2 0f       	add	r30, r18
 9f0:	f3 1f       	adc	r31, r19
 9f2:	40 81       	ld	r20, Z
 9f4:	82 5c       	subi	r24, 0xC2	; 194
 9f6:	9d 4f       	sbci	r25, 0xFD	; 253
 9f8:	fc 01       	movw	r30, r24
 9fa:	e2 0f       	add	r30, r18
 9fc:	f3 1f       	adc	r31, r19
 9fe:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 2){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
 a00:	2f 5f       	subi	r18, 0xFF	; 255
 a02:	3f 4f       	sbci	r19, 0xFF	; 255
 a04:	02 c0       	rjmp	.+4      	; 0xa0a <generate_shape+0xd2>
 a06:	20 e0       	ldi	r18, 0x00	; 0
 a08:	30 e0       	ldi	r19, 0x00	; 0
 a0a:	24 30       	cpi	r18, 0x04	; 4
 a0c:	31 05       	cpc	r19, r1
 a0e:	3c f3       	brlt	.-50     	; 0x9de <generate_shape+0xa6>
				current_shape_array[i][j] = shape_I_array[i][j];
			}
		}
	}
	else if(shape == 2){
		for(int i = 0 ; i < 4; i++){
 a10:	6f 5f       	subi	r22, 0xFF	; 255
 a12:	7f 4f       	sbci	r23, 0xFF	; 255
 a14:	02 c0       	rjmp	.+4      	; 0xa1a <generate_shape+0xe2>
 a16:	60 e0       	ldi	r22, 0x00	; 0
 a18:	70 e0       	ldi	r23, 0x00	; 0
 a1a:	64 30       	cpi	r22, 0x04	; 4
 a1c:	71 05       	cpc	r23, r1
 a1e:	9c f3       	brlt	.-26     	; 0xa06 <generate_shape+0xce>
 a20:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_L_array[i][j];
			}
		}
	}
	else if(shape == 3){
 a22:	83 30       	cpi	r24, 0x03	; 3
 a24:	91 05       	cpc	r25, r1
 a26:	19 f5       	brne	.+70     	; 0xa6e <generate_shape+0x136>
 a28:	1c c0       	rjmp	.+56     	; 0xa62 <generate_shape+0x12a>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_J_array[i][j];
 a2a:	cb 01       	movw	r24, r22
 a2c:	88 0f       	add	r24, r24
 a2e:	99 1f       	adc	r25, r25
 a30:	88 0f       	add	r24, r24
 a32:	99 1f       	adc	r25, r25
 a34:	fc 01       	movw	r30, r24
 a36:	e6 56       	subi	r30, 0x66	; 102
 a38:	ff 4f       	sbci	r31, 0xFF	; 255
 a3a:	e2 0f       	add	r30, r18
 a3c:	f3 1f       	adc	r31, r19
 a3e:	40 81       	ld	r20, Z
 a40:	82 5c       	subi	r24, 0xC2	; 194
 a42:	9d 4f       	sbci	r25, 0xFD	; 253
 a44:	fc 01       	movw	r30, r24
 a46:	e2 0f       	add	r30, r18
 a48:	f3 1f       	adc	r31, r19
 a4a:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 3){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
 a4c:	2f 5f       	subi	r18, 0xFF	; 255
 a4e:	3f 4f       	sbci	r19, 0xFF	; 255
 a50:	02 c0       	rjmp	.+4      	; 0xa56 <generate_shape+0x11e>
 a52:	20 e0       	ldi	r18, 0x00	; 0
 a54:	30 e0       	ldi	r19, 0x00	; 0
 a56:	24 30       	cpi	r18, 0x04	; 4
 a58:	31 05       	cpc	r19, r1
 a5a:	3c f3       	brlt	.-50     	; 0xa2a <generate_shape+0xf2>
				current_shape_array[i][j] = shape_L_array[i][j];
			}
		}
	}
	else if(shape == 3){
		for(int i = 0 ; i < 4; i++){
 a5c:	6f 5f       	subi	r22, 0xFF	; 255
 a5e:	7f 4f       	sbci	r23, 0xFF	; 255
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <generate_shape+0x12e>
 a62:	60 e0       	ldi	r22, 0x00	; 0
 a64:	70 e0       	ldi	r23, 0x00	; 0
 a66:	64 30       	cpi	r22, 0x04	; 4
 a68:	71 05       	cpc	r23, r1
 a6a:	9c f3       	brlt	.-26     	; 0xa52 <generate_shape+0x11a>
 a6c:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_J_array[i][j];
			}
		}
	}
	else if(shape == 4){
 a6e:	84 30       	cpi	r24, 0x04	; 4
 a70:	91 05       	cpc	r25, r1
 a72:	19 f5       	brne	.+70     	; 0xaba <generate_shape+0x182>
 a74:	1c c0       	rjmp	.+56     	; 0xaae <generate_shape+0x176>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_S_array[i][j];
 a76:	cb 01       	movw	r24, r22
 a78:	88 0f       	add	r24, r24
 a7a:	99 1f       	adc	r25, r25
 a7c:	88 0f       	add	r24, r24
 a7e:	99 1f       	adc	r25, r25
 a80:	fc 01       	movw	r30, r24
 a82:	e6 57       	subi	r30, 0x76	; 118
 a84:	ff 4f       	sbci	r31, 0xFF	; 255
 a86:	e2 0f       	add	r30, r18
 a88:	f3 1f       	adc	r31, r19
 a8a:	40 81       	ld	r20, Z
 a8c:	82 5c       	subi	r24, 0xC2	; 194
 a8e:	9d 4f       	sbci	r25, 0xFD	; 253
 a90:	fc 01       	movw	r30, r24
 a92:	e2 0f       	add	r30, r18
 a94:	f3 1f       	adc	r31, r19
 a96:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 4){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
 a98:	2f 5f       	subi	r18, 0xFF	; 255
 a9a:	3f 4f       	sbci	r19, 0xFF	; 255
 a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <generate_shape+0x16a>
 a9e:	20 e0       	ldi	r18, 0x00	; 0
 aa0:	30 e0       	ldi	r19, 0x00	; 0
 aa2:	24 30       	cpi	r18, 0x04	; 4
 aa4:	31 05       	cpc	r19, r1
 aa6:	3c f3       	brlt	.-50     	; 0xa76 <generate_shape+0x13e>
				current_shape_array[i][j] = shape_J_array[i][j];
			}
		}
	}
	else if(shape == 4){
		for(int i = 0 ; i < 4; i++){
 aa8:	6f 5f       	subi	r22, 0xFF	; 255
 aaa:	7f 4f       	sbci	r23, 0xFF	; 255
 aac:	02 c0       	rjmp	.+4      	; 0xab2 <generate_shape+0x17a>
 aae:	60 e0       	ldi	r22, 0x00	; 0
 ab0:	70 e0       	ldi	r23, 0x00	; 0
 ab2:	64 30       	cpi	r22, 0x04	; 4
 ab4:	71 05       	cpc	r23, r1
 ab6:	9c f3       	brlt	.-26     	; 0xa9e <generate_shape+0x166>
 ab8:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_S_array[i][j];
			}
		}
	}
	else if(shape == 5){
 aba:	85 30       	cpi	r24, 0x05	; 5
 abc:	91 05       	cpc	r25, r1
 abe:	19 f5       	brne	.+70     	; 0xb06 <generate_shape+0x1ce>
 ac0:	1c c0       	rjmp	.+56     	; 0xafa <generate_shape+0x1c2>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_Z_array[i][j];
 ac2:	cb 01       	movw	r24, r22
 ac4:	88 0f       	add	r24, r24
 ac6:	99 1f       	adc	r25, r25
 ac8:	88 0f       	add	r24, r24
 aca:	99 1f       	adc	r25, r25
 acc:	fc 01       	movw	r30, r24
 ace:	e6 58       	subi	r30, 0x86	; 134
 ad0:	ff 4f       	sbci	r31, 0xFF	; 255
 ad2:	e2 0f       	add	r30, r18
 ad4:	f3 1f       	adc	r31, r19
 ad6:	40 81       	ld	r20, Z
 ad8:	82 5c       	subi	r24, 0xC2	; 194
 ada:	9d 4f       	sbci	r25, 0xFD	; 253
 adc:	fc 01       	movw	r30, r24
 ade:	e2 0f       	add	r30, r18
 ae0:	f3 1f       	adc	r31, r19
 ae2:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 5){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
 ae4:	2f 5f       	subi	r18, 0xFF	; 255
 ae6:	3f 4f       	sbci	r19, 0xFF	; 255
 ae8:	02 c0       	rjmp	.+4      	; 0xaee <generate_shape+0x1b6>
 aea:	20 e0       	ldi	r18, 0x00	; 0
 aec:	30 e0       	ldi	r19, 0x00	; 0
 aee:	24 30       	cpi	r18, 0x04	; 4
 af0:	31 05       	cpc	r19, r1
 af2:	3c f3       	brlt	.-50     	; 0xac2 <generate_shape+0x18a>
				current_shape_array[i][j] = shape_S_array[i][j];
			}
		}
	}
	else if(shape == 5){
		for(int i = 0 ; i < 4; i++){
 af4:	6f 5f       	subi	r22, 0xFF	; 255
 af6:	7f 4f       	sbci	r23, 0xFF	; 255
 af8:	02 c0       	rjmp	.+4      	; 0xafe <generate_shape+0x1c6>
 afa:	60 e0       	ldi	r22, 0x00	; 0
 afc:	70 e0       	ldi	r23, 0x00	; 0
 afe:	64 30       	cpi	r22, 0x04	; 4
 b00:	71 05       	cpc	r23, r1
 b02:	9c f3       	brlt	.-26     	; 0xaea <generate_shape+0x1b2>
 b04:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_Z_array[i][j];
			}
		}
	}
	else if(shape == 6){
 b06:	06 97       	sbiw	r24, 0x06	; 6
 b08:	11 f5       	brne	.+68     	; 0xb4e <generate_shape+0x216>
 b0a:	1c c0       	rjmp	.+56     	; 0xb44 <generate_shape+0x20c>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_T_array[i][j];
 b0c:	cb 01       	movw	r24, r22
 b0e:	88 0f       	add	r24, r24
 b10:	99 1f       	adc	r25, r25
 b12:	88 0f       	add	r24, r24
 b14:	99 1f       	adc	r25, r25
 b16:	fc 01       	movw	r30, r24
 b18:	e6 59       	subi	r30, 0x96	; 150
 b1a:	ff 4f       	sbci	r31, 0xFF	; 255
 b1c:	e2 0f       	add	r30, r18
 b1e:	f3 1f       	adc	r31, r19
 b20:	40 81       	ld	r20, Z
 b22:	82 5c       	subi	r24, 0xC2	; 194
 b24:	9d 4f       	sbci	r25, 0xFD	; 253
 b26:	fc 01       	movw	r30, r24
 b28:	e2 0f       	add	r30, r18
 b2a:	f3 1f       	adc	r31, r19
 b2c:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 6){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
 b2e:	2f 5f       	subi	r18, 0xFF	; 255
 b30:	3f 4f       	sbci	r19, 0xFF	; 255
 b32:	02 c0       	rjmp	.+4      	; 0xb38 <generate_shape+0x200>
 b34:	20 e0       	ldi	r18, 0x00	; 0
 b36:	30 e0       	ldi	r19, 0x00	; 0
 b38:	24 30       	cpi	r18, 0x04	; 4
 b3a:	31 05       	cpc	r19, r1
 b3c:	3c f3       	brlt	.-50     	; 0xb0c <generate_shape+0x1d4>
				current_shape_array[i][j] = shape_Z_array[i][j];
			}
		}
	}
	else if(shape == 6){
		for(int i = 0 ; i < 4; i++){
 b3e:	6f 5f       	subi	r22, 0xFF	; 255
 b40:	7f 4f       	sbci	r23, 0xFF	; 255
 b42:	02 c0       	rjmp	.+4      	; 0xb48 <generate_shape+0x210>
 b44:	60 e0       	ldi	r22, 0x00	; 0
 b46:	70 e0       	ldi	r23, 0x00	; 0
 b48:	64 30       	cpi	r22, 0x04	; 4
 b4a:	71 05       	cpc	r23, r1
 b4c:	9c f3       	brlt	.-26     	; 0xb34 <generate_shape+0x1fc>
 b4e:	08 95       	ret

00000b50 <start_again>:

int count_speed = 175;
int count_count = 0;

void start_again(){
	for(int i = 0; i < 16; i++){
 b50:	20 e0       	ldi	r18, 0x00	; 0
 b52:	30 e0       	ldi	r19, 0x00	; 0
 b54:	15 c0       	rjmp	.+42     	; 0xb80 <start_again+0x30>
		for(int j = 0; j < 8; j++){
			current_display[i][j] = FALSE;
 b56:	f9 01       	movw	r30, r18
 b58:	ee 0f       	add	r30, r30
 b5a:	ff 1f       	adc	r31, r31
 b5c:	ee 0f       	add	r30, r30
 b5e:	ff 1f       	adc	r31, r31
 b60:	ee 0f       	add	r30, r30
 b62:	ff 1f       	adc	r31, r31
 b64:	e2 55       	subi	r30, 0x52	; 82
 b66:	fe 4f       	sbci	r31, 0xFE	; 254
 b68:	e8 0f       	add	r30, r24
 b6a:	f9 1f       	adc	r31, r25
 b6c:	10 82       	st	Z, r1
int count_speed = 175;
int count_count = 0;

void start_again(){
	for(int i = 0; i < 16; i++){
		for(int j = 0; j < 8; j++){
 b6e:	01 96       	adiw	r24, 0x01	; 1
 b70:	02 c0       	rjmp	.+4      	; 0xb76 <start_again+0x26>
 b72:	80 e0       	ldi	r24, 0x00	; 0
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	88 30       	cpi	r24, 0x08	; 8
 b78:	91 05       	cpc	r25, r1
 b7a:	6c f3       	brlt	.-38     	; 0xb56 <start_again+0x6>

int count_speed = 175;
int count_count = 0;

void start_again(){
	for(int i = 0; i < 16; i++){
 b7c:	2f 5f       	subi	r18, 0xFF	; 255
 b7e:	3f 4f       	sbci	r19, 0xFF	; 255
 b80:	20 31       	cpi	r18, 0x10	; 16
 b82:	31 05       	cpc	r19, r1
 b84:	b4 f3       	brlt	.-20     	; 0xb72 <start_again+0x22>
		for(int j = 0; j < 8; j++){
			current_display[i][j] = FALSE;
		}
	}
	count_speed = 175;
 b86:	8f ea       	ldi	r24, 0xAF	; 175
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <count_speed+0x1>
 b8e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <count_speed>
	count_count = 0;
 b92:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <__data_end+0x1>
 b96:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__data_end>
	
	PORTA |= 1 << PA2 ;
 b9a:	8b b3       	in	r24, 0x1b	; 27
 b9c:	84 60       	ori	r24, 0x04	; 4
 b9e:	8b bb       	out	0x1b, r24	; 27
 ba0:	8f e4       	ldi	r24, 0x4F	; 79
 ba2:	93 ec       	ldi	r25, 0xC3	; 195
 ba4:	01 97       	sbiw	r24, 0x01	; 1
 ba6:	f1 f7       	brne	.-4      	; 0xba4 <start_again+0x54>
 ba8:	00 c0       	rjmp	.+0      	; 0xbaa <start_again+0x5a>
 baa:	00 00       	nop
	_delay_ms(200);
	PORTA &= ~(1 << PA2);
 bac:	8b b3       	in	r24, 0x1b	; 27
 bae:	8b 7f       	andi	r24, 0xFB	; 251
 bb0:	8b bb       	out	0x1b, r24	; 27
 bb2:	8f e4       	ldi	r24, 0x4F	; 79
 bb4:	93 ec       	ldi	r25, 0xC3	; 195
 bb6:	01 97       	sbiw	r24, 0x01	; 1
 bb8:	f1 f7       	brne	.-4      	; 0xbb6 <start_again+0x66>
 bba:	00 c0       	rjmp	.+0      	; 0xbbc <start_again+0x6c>
 bbc:	00 00       	nop
 bbe:	08 95       	ret

00000bc0 <main>:
	_delay_ms(200);
}

int main(void)
{
	MCUCSR |= 1<<JTD;
 bc0:	84 b7       	in	r24, 0x34	; 52
 bc2:	80 68       	ori	r24, 0x80	; 128
 bc4:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= 1<<JTD;
 bc6:	84 b7       	in	r24, 0x34	; 52
 bc8:	80 68       	ori	r24, 0x80	; 128
 bca:	84 bf       	out	0x34, r24	; 52
	srand(time(NULL));
 bcc:	80 e0       	ldi	r24, 0x00	; 0
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	0e 94 49 00 	call	0x92	; 0x92 <time>
 bd4:	cb 01       	movw	r24, r22
 bd6:	0e 94 6e 07 	call	0xedc	; 0xedc <srand>
	DDRA = 0b11111100;
 bda:	8c ef       	ldi	r24, 0xFC	; 252
 bdc:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
 bde:	8f ef       	ldi	r24, 0xFF	; 255
 be0:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
 be2:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
 be4:	81 bb       	out	0x11, r24	; 17
	PORTA &= 0b11111011;
 be6:	8b b3       	in	r24, 0x1b	; 27
 be8:	8b 7f       	andi	r24, 0xFB	; 251
 bea:	8b bb       	out	0x1b, r24	; 27
	uint8_t led_col = 0x00;
	int i = 7, count = 0,r = 0;
	int ADC_Value_X = -1, ADC_Value_Y = -1;
	ADC_Init();
 bec:	0e 94 5c 00 	call	0xb8	; 0xb8 <ADC_Init>
	UART_init();
 bf0:	0e 94 74 00 	call	0xe8	; 0xe8 <UART_init>
	DDRB = 0xFF;
	DDRC = 0xFF;
	DDRD = 0xFF;
	PORTA &= 0b11111011;
	uint8_t led_col = 0x00;
	int i = 7, count = 0,r = 0;
 bf4:	e1 2c       	mov	r14, r1
 bf6:	f1 2c       	mov	r15, r1
 bf8:	00 e0       	ldi	r16, 0x00	; 0
 bfa:	10 e0       	ldi	r17, 0x00	; 0
 bfc:	c7 e0       	ldi	r28, 0x07	; 7
 bfe:	d0 e0       	ldi	r29, 0x00	; 0
	int ADC_Value_X = -1, ADC_Value_Y = -1;
	ADC_Init();
	UART_init();
	while (1)
	{
		PORTC = 0x00; // common row connection
 c00:	15 ba       	out	0x15, r1	; 21
		PORTC |= row[i]; // common row connection
 c02:	fe 01       	movw	r30, r28
 c04:	ee 55       	subi	r30, 0x5E	; 94
 c06:	fe 4f       	sbci	r31, 0xFE	; 254
 c08:	90 81       	ld	r25, Z
 c0a:	85 b3       	in	r24, 0x15	; 21
 c0c:	89 2b       	or	r24, r25
 c0e:	85 bb       	out	0x15, r24	; 21
		PORTB = ~get_col(i); // upper matrix column
 c10:	ce 01       	movw	r24, r28
 c12:	0e 94 21 03 	call	0x642	; 0x642 <get_col>
 c16:	80 95       	com	r24
 c18:	88 bb       	out	0x18, r24	; 24
		// lower matrix column
		led_col = ~get_col(i+8);
 c1a:	ce 01       	movw	r24, r28
 c1c:	08 96       	adiw	r24, 0x08	; 8
 c1e:	0e 94 21 03 	call	0x642	; 0x642 <get_col>
 c22:	80 95       	com	r24
		PORTA |= 0xF0;
 c24:	9b b3       	in	r25, 0x1b	; 27
 c26:	90 6f       	ori	r25, 0xF0	; 240
 c28:	9b bb       	out	0x1b, r25	; 27
		PORTD |= 0xF0;
 c2a:	92 b3       	in	r25, 0x12	; 18
 c2c:	90 6f       	ori	r25, 0xF0	; 240
 c2e:	92 bb       	out	0x12, r25	; 18
		PORTA &= ((led_col & 0x0F) << 4) | 0x0F;
 c30:	2b b3       	in	r18, 0x1b	; 27
 c32:	90 e1       	ldi	r25, 0x10	; 16
 c34:	89 9f       	mul	r24, r25
 c36:	a0 01       	movw	r20, r0
 c38:	11 24       	eor	r1, r1
 c3a:	94 2f       	mov	r25, r20
 c3c:	9f 60       	ori	r25, 0x0F	; 15
 c3e:	92 23       	and	r25, r18
 c40:	9b bb       	out	0x1b, r25	; 27
		PORTD &= (led_col & 0xF0) | 0x0F;
 c42:	92 b3       	in	r25, 0x12	; 18
 c44:	8f 60       	ori	r24, 0x0F	; 15
 c46:	89 23       	and	r24, r25
 c48:	82 bb       	out	0x12, r24	; 18
 c4a:	83 ef       	ldi	r24, 0xF3	; 243
 c4c:	91 e0       	ldi	r25, 0x01	; 1
 c4e:	01 97       	sbiw	r24, 0x01	; 1
 c50:	f1 f7       	brne	.-4      	; 0xc4e <main+0x8e>
 c52:	00 c0       	rjmp	.+0      	; 0xc54 <main+0x94>
 c54:	00 00       	nop
		
		_delay_ms(2);
		PORTB = ~0x0; // upper matrix column
 c56:	8f ef       	ldi	r24, 0xFF	; 255
 c58:	88 bb       	out	0x18, r24	; 24
		//PORTA = ~0x0; // lower matrix column
		PORTA |= 0xF0;
 c5a:	8b b3       	in	r24, 0x1b	; 27
 c5c:	80 6f       	ori	r24, 0xF0	; 240
 c5e:	8b bb       	out	0x1b, r24	; 27
		PORTD |= 0xF0;
 c60:	82 b3       	in	r24, 0x12	; 18
 c62:	80 6f       	ori	r24, 0xF0	; 240
 c64:	82 bb       	out	0x12, r24	; 18
		if(i == 7) i = 0;
 c66:	c7 30       	cpi	r28, 0x07	; 7
 c68:	d1 05       	cpc	r29, r1
 c6a:	11 f0       	breq	.+4      	; 0xc70 <main+0xb0>
		else i++;
 c6c:	21 96       	adiw	r28, 0x01	; 1
 c6e:	02 c0       	rjmp	.+4      	; 0xc74 <main+0xb4>
		_delay_ms(2);
		PORTB = ~0x0; // upper matrix column
		//PORTA = ~0x0; // lower matrix column
		PORTA |= 0xF0;
		PORTD |= 0xF0;
		if(i == 7) i = 0;
 c70:	c0 e0       	ldi	r28, 0x00	; 0
 c72:	d0 e0       	ldi	r29, 0x00	; 0
		else i++;
		//_delay_us(1500);
		if(current_R == 0 && current_C == 2 && current_shape == -1){
 c74:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <current_R>
 c78:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <current_R+0x1>
 c7c:	89 2b       	or	r24, r25
 c7e:	c9 f5       	brne	.+114    	; 0xcf2 <main+0x132>
 c80:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <current_C>
 c84:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <current_C+0x1>
 c88:	02 97       	sbiw	r24, 0x02	; 2
 c8a:	99 f5       	brne	.+102    	; 0xcf2 <main+0x132>
 c8c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <current_shape>
 c90:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <current_shape+0x1>
 c94:	01 96       	adiw	r24, 0x01	; 1
 c96:	69 f5       	brne	.+90     	; 0xcf2 <main+0x132>
			generate_shape(rand_val[r]);
 c98:	f7 01       	movw	r30, r14
 c9a:	ee 0f       	add	r30, r30
 c9c:	ff 1f       	adc	r31, r31
 c9e:	e6 52       	subi	r30, 0x26	; 38
 ca0:	ff 4f       	sbci	r31, 0xFF	; 255
 ca2:	80 81       	ld	r24, Z
 ca4:	91 81       	ldd	r25, Z+1	; 0x01
 ca6:	0e 94 9c 04 	call	0x938	; 0x938 <generate_shape>
			r++;
 caa:	8f ef       	ldi	r24, 0xFF	; 255
 cac:	e8 1a       	sub	r14, r24
 cae:	f8 0a       	sbc	r15, r24
			if(r == 100) r = 0;
 cb0:	94 e6       	ldi	r25, 0x64	; 100
 cb2:	e9 16       	cp	r14, r25
 cb4:	f1 04       	cpc	r15, r1
 cb6:	11 f4       	brne	.+4      	; 0xcbc <main+0xfc>
 cb8:	e1 2c       	mov	r14, r1
 cba:	f1 2c       	mov	r15, r1
			//remove_shape(current_shape_array);
			if(check_valid(0 , 2 , current_shape_array) == TRUE){
 cbc:	4e e3       	ldi	r20, 0x3E	; 62
 cbe:	52 e0       	ldi	r21, 0x02	; 2
 cc0:	62 e0       	ldi	r22, 0x02	; 2
 cc2:	70 e0       	ldi	r23, 0x00	; 0
 cc4:	80 e0       	ldi	r24, 0x00	; 0
 cc6:	90 e0       	ldi	r25, 0x00	; 0
 cc8:	0e 94 77 02 	call	0x4ee	; 0x4ee <check_valid>
 ccc:	8f 3f       	cpi	r24, 0xFF	; 255
 cce:	29 f4       	brne	.+10     	; 0xcda <main+0x11a>
				UART_send(current_shape);
 cd0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <current_shape>
 cd4:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_send>
 cd8:	08 c0       	rjmp	.+16     	; 0xcea <main+0x12a>
				//PORTD |= (1<< PD7);
				//_delay_ms(200);
				//PORTD &= ~(1<< PD7);
				//_delay_ms(200);
				
				start_again();
 cda:	0e 94 a8 05 	call	0xb50	; 0xb50 <start_again>
 cde:	8f e4       	ldi	r24, 0x4F	; 79
 ce0:	93 ec       	ldi	r25, 0xC3	; 195
 ce2:	01 97       	sbiw	r24, 0x01	; 1
 ce4:	f1 f7       	brne	.-4      	; 0xce2 <main+0x122>
 ce6:	00 c0       	rjmp	.+0      	; 0xce8 <main+0x128>
 ce8:	00 00       	nop
				_delay_ms(200);
			}
			set_shape(current_shape_array);
 cea:	8e e3       	ldi	r24, 0x3E	; 62
 cec:	92 e0       	ldi	r25, 0x02	; 2
 cee:	0e 94 b8 02 	call	0x570	; 0x570 <set_shape>
		}
		count++;
 cf2:	0f 5f       	subi	r16, 0xFF	; 255
 cf4:	1f 4f       	sbci	r17, 0xFF	; 255
		if(count == count_speed){
 cf6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count_speed>
 cfa:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <count_speed+0x1>
 cfe:	08 17       	cp	r16, r24
 d00:	19 07       	cpc	r17, r25
 d02:	29 f5       	brne	.+74     	; 0xd4e <main+0x18e>
			go_down();
 d04:	0e 94 49 04 	call	0x892	; 0x892 <go_down>
			count_count++;
 d08:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
 d0c:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
 d10:	01 96       	adiw	r24, 0x01	; 1
 d12:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <__data_end+0x1>
 d16:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <__data_end>
			count = 0;
			if(count_count == 50){
 d1a:	c2 97       	sbiw	r24, 0x32	; 50
 d1c:	81 f4       	brne	.+32     	; 0xd3e <main+0x17e>
				count_count = 0;
 d1e:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <__data_end+0x1>
 d22:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__data_end>
				if(count_speed >=100)
 d26:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count_speed>
 d2a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <count_speed+0x1>
 d2e:	84 36       	cpi	r24, 0x64	; 100
 d30:	91 05       	cpc	r25, r1
 d32:	2c f0       	brlt	.+10     	; 0xd3e <main+0x17e>
					count_speed -= 50;
 d34:	c2 97       	sbiw	r24, 0x32	; 50
 d36:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <count_speed+0x1>
 d3a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <count_speed>
 d3e:	81 ee       	ldi	r24, 0xE1	; 225
 d40:	94 e0       	ldi	r25, 0x04	; 4
 d42:	01 97       	sbiw	r24, 0x01	; 1
 d44:	f1 f7       	brne	.-4      	; 0xd42 <main+0x182>
 d46:	00 c0       	rjmp	.+0      	; 0xd48 <main+0x188>
 d48:	00 00       	nop
		}
		count++;
		if(count == count_speed){
			go_down();
			count_count++;
			count = 0;
 d4a:	00 e0       	ldi	r16, 0x00	; 0
 d4c:	10 e0       	ldi	r17, 0x00	; 0
					count_speed -= 50;
			}
			_delay_ms(5);
		}
		
		ADC_Value_X = ADC_Read(0);
 d4e:	80 e0       	ldi	r24, 0x00	; 0
 d50:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_Read>
 d54:	5c 01       	movw	r10, r24
		ADC_Value_Y = ADC_Read(1);	
 d56:	81 e0       	ldi	r24, 0x01	; 1
 d58:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_Read>
 d5c:	6c 01       	movw	r12, r24
		if(ADC_Value_X < 100){
 d5e:	94 e6       	ldi	r25, 0x64	; 100
 d60:	a9 16       	cp	r10, r25
 d62:	b1 04       	cpc	r11, r1
 d64:	44 f4       	brge	.+16     	; 0xd76 <main+0x1b6>
			go_left();
 d66:	0e 94 05 04 	call	0x80a	; 0x80a <go_left>
 d6a:	8f e4       	ldi	r24, 0x4F	; 79
 d6c:	93 ec       	ldi	r25, 0xC3	; 195
 d6e:	01 97       	sbiw	r24, 0x01	; 1
 d70:	f1 f7       	brne	.-4      	; 0xd6e <main+0x1ae>
 d72:	00 c0       	rjmp	.+0      	; 0xd74 <main+0x1b4>
 d74:	00 00       	nop
			_delay_ms(200);
		}
		if(ADC_Value_X > 900){
 d76:	95 e8       	ldi	r25, 0x85	; 133
 d78:	a9 16       	cp	r10, r25
 d7a:	93 e0       	ldi	r25, 0x03	; 3
 d7c:	b9 06       	cpc	r11, r25
 d7e:	44 f0       	brlt	.+16     	; 0xd90 <main+0x1d0>
			go_right();
 d80:	0e 94 27 04 	call	0x84e	; 0x84e <go_right>
 d84:	8f e4       	ldi	r24, 0x4F	; 79
 d86:	93 ec       	ldi	r25, 0xC3	; 195
 d88:	01 97       	sbiw	r24, 0x01	; 1
 d8a:	f1 f7       	brne	.-4      	; 0xd88 <main+0x1c8>
 d8c:	00 c0       	rjmp	.+0      	; 0xd8e <main+0x1ce>
 d8e:	00 00       	nop
			_delay_ms(200);
		}
		if(ADC_Value_Y > 900){
 d90:	95 e8       	ldi	r25, 0x85	; 133
 d92:	c9 16       	cp	r12, r25
 d94:	93 e0       	ldi	r25, 0x03	; 3
 d96:	d9 06       	cpc	r13, r25
 d98:	44 f0       	brlt	.+16     	; 0xdaa <main+0x1ea>
			go_down();
 d9a:	0e 94 49 04 	call	0x892	; 0x892 <go_down>
 d9e:	87 ea       	ldi	r24, 0xA7	; 167
 da0:	91 e6       	ldi	r25, 0x61	; 97
 da2:	01 97       	sbiw	r24, 0x01	; 1
 da4:	f1 f7       	brne	.-4      	; 0xda2 <main+0x1e2>
 da6:	00 c0       	rjmp	.+0      	; 0xda8 <main+0x1e8>
 da8:	00 00       	nop
			//go_down();
			_delay_ms(100);
		}
		if(ADC_Value_Y < 100){ 
 daa:	94 e6       	ldi	r25, 0x64	; 100
 dac:	c9 16       	cp	r12, r25
 dae:	d1 04       	cpc	r13, r1
 db0:	0c f0       	brlt	.+2      	; 0xdb4 <main+0x1f4>
 db2:	26 cf       	rjmp	.-436    	; 0xc00 <main+0x40>
			rotate_shape(current_shape_array);
 db4:	8e e3       	ldi	r24, 0x3E	; 62
 db6:	92 e0       	ldi	r25, 0x02	; 2
 db8:	0e 94 c6 01 	call	0x38c	; 0x38c <rotate_shape>
			remove_shape(current_shape_array);
 dbc:	8e e3       	ldi	r24, 0x3E	; 62
 dbe:	92 e0       	ldi	r25, 0x02	; 2
 dc0:	0e 94 ed 02 	call	0x5da	; 0x5da <remove_shape>
			if(check_valid(current_R, current_C, temp_shape_array) == TRUE){
 dc4:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <current_C>
 dc8:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <current_C+0x1>
 dcc:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <current_R>
 dd0:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <current_R+0x1>
 dd4:	4e e2       	ldi	r20, 0x2E	; 46
 dd6:	52 e0       	ldi	r21, 0x02	; 2
 dd8:	0e 94 77 02 	call	0x4ee	; 0x4ee <check_valid>
 ddc:	8f 3f       	cpi	r24, 0xFF	; 255
 dde:	11 f5       	brne	.+68     	; 0xe24 <main+0x264>
 de0:	1c c0       	rjmp	.+56     	; 0xe1a <main+0x25a>
				for(int i = 0 ; i < 4; i++){
					for(int j = 0; j < 4; j++){
						current_shape_array[i][j] = temp_shape_array[i][j];
 de2:	ca 01       	movw	r24, r20
 de4:	88 0f       	add	r24, r24
 de6:	99 1f       	adc	r25, r25
 de8:	88 0f       	add	r24, r24
 dea:	99 1f       	adc	r25, r25
 dec:	fc 01       	movw	r30, r24
 dee:	e2 5d       	subi	r30, 0xD2	; 210
 df0:	fd 4f       	sbci	r31, 0xFD	; 253
 df2:	e2 0f       	add	r30, r18
 df4:	f3 1f       	adc	r31, r19
 df6:	60 81       	ld	r22, Z
 df8:	82 5c       	subi	r24, 0xC2	; 194
 dfa:	9d 4f       	sbci	r25, 0xFD	; 253
 dfc:	fc 01       	movw	r30, r24
 dfe:	e2 0f       	add	r30, r18
 e00:	f3 1f       	adc	r31, r19
 e02:	60 83       	st	Z, r22
		if(ADC_Value_Y < 100){ 
			rotate_shape(current_shape_array);
			remove_shape(current_shape_array);
			if(check_valid(current_R, current_C, temp_shape_array) == TRUE){
				for(int i = 0 ; i < 4; i++){
					for(int j = 0; j < 4; j++){
 e04:	2f 5f       	subi	r18, 0xFF	; 255
 e06:	3f 4f       	sbci	r19, 0xFF	; 255
 e08:	02 c0       	rjmp	.+4      	; 0xe0e <main+0x24e>
 e0a:	20 e0       	ldi	r18, 0x00	; 0
 e0c:	30 e0       	ldi	r19, 0x00	; 0
 e0e:	24 30       	cpi	r18, 0x04	; 4
 e10:	31 05       	cpc	r19, r1
 e12:	3c f3       	brlt	.-50     	; 0xde2 <main+0x222>
		}
		if(ADC_Value_Y < 100){ 
			rotate_shape(current_shape_array);
			remove_shape(current_shape_array);
			if(check_valid(current_R, current_C, temp_shape_array) == TRUE){
				for(int i = 0 ; i < 4; i++){
 e14:	4f 5f       	subi	r20, 0xFF	; 255
 e16:	5f 4f       	sbci	r21, 0xFF	; 255
 e18:	02 c0       	rjmp	.+4      	; 0xe1e <main+0x25e>
 e1a:	40 e0       	ldi	r20, 0x00	; 0
 e1c:	50 e0       	ldi	r21, 0x00	; 0
 e1e:	44 30       	cpi	r20, 0x04	; 4
 e20:	51 05       	cpc	r21, r1
 e22:	9c f3       	brlt	.-26     	; 0xe0a <main+0x24a>
					for(int j = 0; j < 4; j++){
						current_shape_array[i][j] = temp_shape_array[i][j];
					}
				}
			}
			set_shape(current_shape_array);
 e24:	8e e3       	ldi	r24, 0x3E	; 62
 e26:	92 e0       	ldi	r25, 0x02	; 2
 e28:	0e 94 b8 02 	call	0x570	; 0x570 <set_shape>
 e2c:	83 e2       	ldi	r24, 0x23	; 35
 e2e:	94 ef       	ldi	r25, 0xF4	; 244
 e30:	01 97       	sbiw	r24, 0x01	; 1
 e32:	f1 f7       	brne	.-4      	; 0xe30 <main+0x270>
 e34:	00 c0       	rjmp	.+0      	; 0xe36 <main+0x276>
 e36:	00 00       	nop
 e38:	e3 ce       	rjmp	.-570    	; 0xc00 <main+0x40>

00000e3a <do_rand>:
 e3a:	8f 92       	push	r8
 e3c:	9f 92       	push	r9
 e3e:	af 92       	push	r10
 e40:	bf 92       	push	r11
 e42:	cf 92       	push	r12
 e44:	df 92       	push	r13
 e46:	ef 92       	push	r14
 e48:	ff 92       	push	r15
 e4a:	cf 93       	push	r28
 e4c:	df 93       	push	r29
 e4e:	ec 01       	movw	r28, r24
 e50:	68 81       	ld	r22, Y
 e52:	79 81       	ldd	r23, Y+1	; 0x01
 e54:	8a 81       	ldd	r24, Y+2	; 0x02
 e56:	9b 81       	ldd	r25, Y+3	; 0x03
 e58:	61 15       	cp	r22, r1
 e5a:	71 05       	cpc	r23, r1
 e5c:	81 05       	cpc	r24, r1
 e5e:	91 05       	cpc	r25, r1
 e60:	21 f4       	brne	.+8      	; 0xe6a <do_rand+0x30>
 e62:	64 e2       	ldi	r22, 0x24	; 36
 e64:	79 ed       	ldi	r23, 0xD9	; 217
 e66:	8b e5       	ldi	r24, 0x5B	; 91
 e68:	97 e0       	ldi	r25, 0x07	; 7
 e6a:	2d e1       	ldi	r18, 0x1D	; 29
 e6c:	33 ef       	ldi	r19, 0xF3	; 243
 e6e:	41 e0       	ldi	r20, 0x01	; 1
 e70:	50 e0       	ldi	r21, 0x00	; 0
 e72:	0e 94 79 07 	call	0xef2	; 0xef2 <__divmodsi4>
 e76:	49 01       	movw	r8, r18
 e78:	5a 01       	movw	r10, r20
 e7a:	9b 01       	movw	r18, r22
 e7c:	ac 01       	movw	r20, r24
 e7e:	a7 ea       	ldi	r26, 0xA7	; 167
 e80:	b1 e4       	ldi	r27, 0x41	; 65
 e82:	0e 94 98 07 	call	0xf30	; 0xf30 <__muluhisi3>
 e86:	6b 01       	movw	r12, r22
 e88:	7c 01       	movw	r14, r24
 e8a:	ac ee       	ldi	r26, 0xEC	; 236
 e8c:	b4 ef       	ldi	r27, 0xF4	; 244
 e8e:	a5 01       	movw	r20, r10
 e90:	94 01       	movw	r18, r8
 e92:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__mulohisi3>
 e96:	dc 01       	movw	r26, r24
 e98:	cb 01       	movw	r24, r22
 e9a:	8c 0d       	add	r24, r12
 e9c:	9d 1d       	adc	r25, r13
 e9e:	ae 1d       	adc	r26, r14
 ea0:	bf 1d       	adc	r27, r15
 ea2:	b7 ff       	sbrs	r27, 7
 ea4:	03 c0       	rjmp	.+6      	; 0xeac <do_rand+0x72>
 ea6:	01 97       	sbiw	r24, 0x01	; 1
 ea8:	a1 09       	sbc	r26, r1
 eaa:	b0 48       	sbci	r27, 0x80	; 128
 eac:	88 83       	st	Y, r24
 eae:	99 83       	std	Y+1, r25	; 0x01
 eb0:	aa 83       	std	Y+2, r26	; 0x02
 eb2:	bb 83       	std	Y+3, r27	; 0x03
 eb4:	9f 77       	andi	r25, 0x7F	; 127
 eb6:	df 91       	pop	r29
 eb8:	cf 91       	pop	r28
 eba:	ff 90       	pop	r15
 ebc:	ef 90       	pop	r14
 ebe:	df 90       	pop	r13
 ec0:	cf 90       	pop	r12
 ec2:	bf 90       	pop	r11
 ec4:	af 90       	pop	r10
 ec6:	9f 90       	pop	r9
 ec8:	8f 90       	pop	r8
 eca:	08 95       	ret

00000ecc <rand_r>:
 ecc:	0e 94 1d 07 	call	0xe3a	; 0xe3a <do_rand>
 ed0:	08 95       	ret

00000ed2 <rand>:
 ed2:	80 e6       	ldi	r24, 0x60	; 96
 ed4:	90 e0       	ldi	r25, 0x00	; 0
 ed6:	0e 94 1d 07 	call	0xe3a	; 0xe3a <do_rand>
 eda:	08 95       	ret

00000edc <srand>:
 edc:	a0 e0       	ldi	r26, 0x00	; 0
 ede:	b0 e0       	ldi	r27, 0x00	; 0
 ee0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 ee4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 ee8:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 eec:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 ef0:	08 95       	ret

00000ef2 <__divmodsi4>:
 ef2:	05 2e       	mov	r0, r21
 ef4:	97 fb       	bst	r25, 7
 ef6:	1e f4       	brtc	.+6      	; 0xefe <__divmodsi4+0xc>
 ef8:	00 94       	com	r0
 efa:	0e 94 90 07 	call	0xf20	; 0xf20 <__negsi2>
 efe:	57 fd       	sbrc	r21, 7
 f00:	07 d0       	rcall	.+14     	; 0xf10 <__divmodsi4_neg2>
 f02:	0e 94 ab 07 	call	0xf56	; 0xf56 <__udivmodsi4>
 f06:	07 fc       	sbrc	r0, 7
 f08:	03 d0       	rcall	.+6      	; 0xf10 <__divmodsi4_neg2>
 f0a:	4e f4       	brtc	.+18     	; 0xf1e <__divmodsi4_exit>
 f0c:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__negsi2>

00000f10 <__divmodsi4_neg2>:
 f10:	50 95       	com	r21
 f12:	40 95       	com	r20
 f14:	30 95       	com	r19
 f16:	21 95       	neg	r18
 f18:	3f 4f       	sbci	r19, 0xFF	; 255
 f1a:	4f 4f       	sbci	r20, 0xFF	; 255
 f1c:	5f 4f       	sbci	r21, 0xFF	; 255

00000f1e <__divmodsi4_exit>:
 f1e:	08 95       	ret

00000f20 <__negsi2>:
 f20:	90 95       	com	r25
 f22:	80 95       	com	r24
 f24:	70 95       	com	r23
 f26:	61 95       	neg	r22
 f28:	7f 4f       	sbci	r23, 0xFF	; 255
 f2a:	8f 4f       	sbci	r24, 0xFF	; 255
 f2c:	9f 4f       	sbci	r25, 0xFF	; 255
 f2e:	08 95       	ret

00000f30 <__muluhisi3>:
 f30:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__umulhisi3>
 f34:	a5 9f       	mul	r26, r21
 f36:	90 0d       	add	r25, r0
 f38:	b4 9f       	mul	r27, r20
 f3a:	90 0d       	add	r25, r0
 f3c:	a4 9f       	mul	r26, r20
 f3e:	80 0d       	add	r24, r0
 f40:	91 1d       	adc	r25, r1
 f42:	11 24       	eor	r1, r1
 f44:	08 95       	ret

00000f46 <__mulshisi3>:
 f46:	b7 ff       	sbrs	r27, 7
 f48:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__muluhisi3>

00000f4c <__mulohisi3>:
 f4c:	0e 94 98 07 	call	0xf30	; 0xf30 <__muluhisi3>
 f50:	82 1b       	sub	r24, r18
 f52:	93 0b       	sbc	r25, r19
 f54:	08 95       	ret

00000f56 <__udivmodsi4>:
 f56:	a1 e2       	ldi	r26, 0x21	; 33
 f58:	1a 2e       	mov	r1, r26
 f5a:	aa 1b       	sub	r26, r26
 f5c:	bb 1b       	sub	r27, r27
 f5e:	fd 01       	movw	r30, r26
 f60:	0d c0       	rjmp	.+26     	; 0xf7c <__udivmodsi4_ep>

00000f62 <__udivmodsi4_loop>:
 f62:	aa 1f       	adc	r26, r26
 f64:	bb 1f       	adc	r27, r27
 f66:	ee 1f       	adc	r30, r30
 f68:	ff 1f       	adc	r31, r31
 f6a:	a2 17       	cp	r26, r18
 f6c:	b3 07       	cpc	r27, r19
 f6e:	e4 07       	cpc	r30, r20
 f70:	f5 07       	cpc	r31, r21
 f72:	20 f0       	brcs	.+8      	; 0xf7c <__udivmodsi4_ep>
 f74:	a2 1b       	sub	r26, r18
 f76:	b3 0b       	sbc	r27, r19
 f78:	e4 0b       	sbc	r30, r20
 f7a:	f5 0b       	sbc	r31, r21

00000f7c <__udivmodsi4_ep>:
 f7c:	66 1f       	adc	r22, r22
 f7e:	77 1f       	adc	r23, r23
 f80:	88 1f       	adc	r24, r24
 f82:	99 1f       	adc	r25, r25
 f84:	1a 94       	dec	r1
 f86:	69 f7       	brne	.-38     	; 0xf62 <__udivmodsi4_loop>
 f88:	60 95       	com	r22
 f8a:	70 95       	com	r23
 f8c:	80 95       	com	r24
 f8e:	90 95       	com	r25
 f90:	9b 01       	movw	r18, r22
 f92:	ac 01       	movw	r20, r24
 f94:	bd 01       	movw	r22, r26
 f96:	cf 01       	movw	r24, r30
 f98:	08 95       	ret

00000f9a <__umulhisi3>:
 f9a:	a2 9f       	mul	r26, r18
 f9c:	b0 01       	movw	r22, r0
 f9e:	b3 9f       	mul	r27, r19
 fa0:	c0 01       	movw	r24, r0
 fa2:	a3 9f       	mul	r26, r19
 fa4:	70 0d       	add	r23, r0
 fa6:	81 1d       	adc	r24, r1
 fa8:	11 24       	eor	r1, r1
 faa:	91 1d       	adc	r25, r1
 fac:	b2 9f       	mul	r27, r18
 fae:	70 0d       	add	r23, r0
 fb0:	81 1d       	adc	r24, r1
 fb2:	11 24       	eor	r1, r1
 fb4:	91 1d       	adc	r25, r1
 fb6:	08 95       	ret

00000fb8 <_exit>:
 fb8:	f8 94       	cli

00000fba <__stop_program>:
 fba:	ff cf       	rjmp	.-2      	; 0xfba <__stop_program>
