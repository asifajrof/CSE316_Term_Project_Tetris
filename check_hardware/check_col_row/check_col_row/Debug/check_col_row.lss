
check_col_row.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000110c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000102  00800060  0000110c  000011a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ac  00800162  00800162  000012a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001906  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000810  00000000  00000000  00002cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f7d  00000000  00000000  0000350e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  0000448c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005eb  00000000  00000000  00004710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001522  00000000  00000000  00004cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000488  00000000  00000000  0000621d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 30       	cpi	r26, 0x0E	; 14
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4d 07 	call	0xe9a	; 0xe9a <main>
      8a:	0c 94 84 08 	jmp	0x1108	; 0x1108 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <time>:
      92:	fc 01       	movw	r30, r24
      94:	0f b6       	in	r0, 0x3f	; 63
      96:	f8 94       	cli
      98:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <__system_time>
      9c:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <__system_time+0x1>
      a0:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__system_time+0x2>
      a4:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__system_time+0x3>
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	30 97       	sbiw	r30, 0x00	; 0
      ac:	21 f0       	breq	.+8      	; 0xb6 <time+0x24>
      ae:	60 83       	st	Z, r22
      b0:	71 83       	std	Z+1, r23	; 0x01
      b2:	82 83       	std	Z+2, r24	; 0x02
      b4:	93 83       	std	Z+3, r25	; 0x03
      b6:	08 95       	ret

000000b8 <ADC_Init>:
typedef enum { O, I, L, J, S, Z,  T } shape_type;
	
void ADC_Init()
{
	//DDRA = 0x00;		/* Make ADC port as input */
	ADCSRA = 0b10000001;		/* Enable ADC, fr/128  */
      b8:	81 e8       	ldi	r24, 0x81	; 129
      ba:	86 b9       	out	0x06, r24	; 6
	ADMUX =  0b01000000;		/* Vref: Avcc, ADC channel: 0 */
      bc:	80 e4       	ldi	r24, 0x40	; 64
      be:	87 b9       	out	0x07, r24	; 7
      c0:	08 95       	ret

000000c2 <ADC_Read>:

int ADC_Read(char channel)
{
	int ADC_value;
	
	ADMUX = (0x40) | (channel & 0x07);/* set input channel to read */
      c2:	87 70       	andi	r24, 0x07	; 7
      c4:	80 64       	ori	r24, 0x40	; 64
      c6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);	/* start conversion */
      c8:	86 b1       	in	r24, 0x06	; 6
      ca:	80 64       	ori	r24, 0x40	; 64
      cc:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA &(1<<ADIF))== 0);	/* monitor end of conversion interrupt flag */
      ce:	34 9b       	sbis	0x06, 4	; 6
      d0:	fe cf       	rjmp	.-4      	; 0xce <ADC_Read+0xc>
	
	ADCSRA |= (1<<ADIF);	/* clear interrupt flag */
      d2:	86 b1       	in	r24, 0x06	; 6
      d4:	80 61       	ori	r24, 0x10	; 16
      d6:	86 b9       	out	0x06, r24	; 6
	ADC_value = (int)ADCL;	/* read lower byte */
      d8:	24 b1       	in	r18, 0x04	; 4
	ADC_value = ADC_value + (int)ADCH*256;/* read higher 2 bits, Multiply with weightage */
      da:	85 b1       	in	r24, 0x05	; 5
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	98 2f       	mov	r25, r24
      e0:	88 27       	eor	r24, r24

	return ADC_value;		/* return digital value */
}
      e2:	82 0f       	add	r24, r18
      e4:	91 1d       	adc	r25, r1
      e6:	08 95       	ret

000000e8 <UART_init>:
	
	int UBBRValue = 25;//AS described before setting baud rate

	//Put the upper part of the baud number here (bits 8 to 11)

	UBRRH = (unsigned char) (UBBRValue >> 8);
      e8:	10 bc       	out	0x20, r1	; 32

	//Put the remaining part of the baud number here

	UBRRL = (unsigned char) UBBRValue;
      ea:	89 e1       	ldi	r24, 0x19	; 25
      ec:	89 b9       	out	0x09, r24	; 9

	//Enable the receiver and transmitter

	UCSRB = (1<<RXEN) |(1 << TXEN);
      ee:	88 e1       	ldi	r24, 0x18	; 24
      f0:	8a b9       	out	0x0a, r24	; 10

	//Set 2 stop bits and data bit length is 8-bit

	UCSRC = (1 << USBS) | (3 << UCSZ0);
      f2:	8e e0       	ldi	r24, 0x0E	; 14
      f4:	80 bd       	out	0x20, r24	; 32
      f6:	08 95       	ret

000000f8 <UART_send>:
	//UCSRC = 0b10001110;
}

void UART_send(unsigned char data){
	// wait until UDRE flag is set to logic 1
	while ((UCSRA & (1<<UDRE)) == 0x00);
      f8:	5d 9b       	sbis	0x0b, 5	; 11
      fa:	fe cf       	rjmp	.-4      	; 0xf8 <UART_send>
	UDR = data; // Write character to UDR for transmission
      fc:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fe:	87 ee       	ldi	r24, 0xE7	; 231
     100:	93 e0       	ldi	r25, 0x03	; 3
     102:	01 97       	sbiw	r24, 0x01	; 1
     104:	f1 f7       	brne	.-4      	; 0x102 <UART_send+0xa>
     106:	00 c0       	rjmp	.+0      	; 0x108 <UART_send+0x10>
     108:	00 00       	nop
     10a:	08 95       	ret

0000010c <row_shift>:
	
}


void row_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
     10c:	cf 92       	push	r12
     10e:	df 92       	push	r13
     110:	ef 92       	push	r14
     112:	ff 92       	push	r15
     114:	0f 93       	push	r16
     116:	1f 93       	push	r17
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
	for(int counter=0; counter<shift_count; counter++){
     11c:	c1 2c       	mov	r12, r1
     11e:	d1 2c       	mov	r13, r1
     120:	47 c0       	rjmp	.+142    	; 0x1b0 <row_shift+0xa4>
		int index = 0;
		if (direction>0){
     122:	14 16       	cp	r1, r20
     124:	15 06       	cpc	r1, r21
     126:	24 f4       	brge	.+8      	; 0x130 <row_shift+0x24>
			index = length-1;
     128:	8c 01       	movw	r16, r24
     12a:	01 50       	subi	r16, 0x01	; 1
     12c:	11 09       	sbc	r17, r1
     12e:	02 c0       	rjmp	.+4      	; 0x134 <row_shift+0x28>


void row_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
	for(int counter=0; counter<shift_count; counter++){
		int index = 0;
     130:	00 e0       	ldi	r16, 0x00	; 0
     132:	10 e0       	ldi	r17, 0x00	; 0
     134:	e1 2c       	mov	r14, r1
     136:	f1 2c       	mov	r15, r1
     138:	22 c0       	rjmp	.+68     	; 0x17e <row_shift+0x72>
			index = length-1;
		}

		for (int i=0; i<length-1; i++){
			for (int j=0; j<length; j++){
				shape_array[index][j] = shape_array[index-direction][j];
     13a:	d8 01       	movw	r26, r16
     13c:	aa 0f       	add	r26, r26
     13e:	bb 1f       	adc	r27, r27
     140:	aa 0f       	add	r26, r26
     142:	bb 1f       	adc	r27, r27
     144:	a6 0f       	add	r26, r22
     146:	b7 1f       	adc	r27, r23
     148:	f8 01       	movw	r30, r16
     14a:	e4 1b       	sub	r30, r20
     14c:	f5 0b       	sbc	r31, r21
     14e:	ee 0f       	add	r30, r30
     150:	ff 1f       	adc	r31, r31
     152:	ee 0f       	add	r30, r30
     154:	ff 1f       	adc	r31, r31
     156:	e6 0f       	add	r30, r22
     158:	f7 1f       	adc	r31, r23
     15a:	ec 0f       	add	r30, r28
     15c:	fd 1f       	adc	r31, r29
     15e:	e0 81       	ld	r30, Z
     160:	ac 0f       	add	r26, r28
     162:	bd 1f       	adc	r27, r29
     164:	ec 93       	st	X, r30
		if (direction>0){
			index = length-1;
		}

		for (int i=0; i<length-1; i++){
			for (int j=0; j<length; j++){
     166:	21 96       	adiw	r28, 0x01	; 1
     168:	02 c0       	rjmp	.+4      	; 0x16e <row_shift+0x62>
     16a:	c0 e0       	ldi	r28, 0x00	; 0
     16c:	d0 e0       	ldi	r29, 0x00	; 0
     16e:	c8 17       	cp	r28, r24
     170:	d9 07       	cpc	r29, r25
     172:	1c f3       	brlt	.-58     	; 0x13a <row_shift+0x2e>
				shape_array[index][j] = shape_array[index-direction][j];
			}
			index = index - direction;
     174:	04 1b       	sub	r16, r20
     176:	15 0b       	sbc	r17, r21
		int index = 0;
		if (direction>0){
			index = length-1;
		}

		for (int i=0; i<length-1; i++){
     178:	ef ef       	ldi	r30, 0xFF	; 255
     17a:	ee 1a       	sub	r14, r30
     17c:	fe 0a       	sbc	r15, r30
     17e:	fc 01       	movw	r30, r24
     180:	31 97       	sbiw	r30, 0x01	; 1
     182:	ee 16       	cp	r14, r30
     184:	ff 06       	cpc	r15, r31
     186:	8c f3       	brlt	.-30     	; 0x16a <row_shift+0x5e>
     188:	a0 e0       	ldi	r26, 0x00	; 0
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	0b c0       	rjmp	.+22     	; 0x1a4 <row_shift+0x98>
				shape_array[index][j] = shape_array[index-direction][j];
			}
			index = index - direction;
		}
		for (int j=0; j<length; j++){
			shape_array[index][j] = FALSE;
     18e:	f8 01       	movw	r30, r16
     190:	ee 0f       	add	r30, r30
     192:	ff 1f       	adc	r31, r31
     194:	ee 0f       	add	r30, r30
     196:	ff 1f       	adc	r31, r31
     198:	e6 0f       	add	r30, r22
     19a:	f7 1f       	adc	r31, r23
     19c:	ea 0f       	add	r30, r26
     19e:	fb 1f       	adc	r31, r27
     1a0:	10 82       	st	Z, r1
			for (int j=0; j<length; j++){
				shape_array[index][j] = shape_array[index-direction][j];
			}
			index = index - direction;
		}
		for (int j=0; j<length; j++){
     1a2:	11 96       	adiw	r26, 0x01	; 1
     1a4:	a8 17       	cp	r26, r24
     1a6:	b9 07       	cpc	r27, r25
     1a8:	94 f3       	brlt	.-28     	; 0x18e <row_shift+0x82>
}


void row_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
	for(int counter=0; counter<shift_count; counter++){
     1aa:	ef ef       	ldi	r30, 0xFF	; 255
     1ac:	ce 1a       	sub	r12, r30
     1ae:	de 0a       	sbc	r13, r30
     1b0:	c2 16       	cp	r12, r18
     1b2:	d3 06       	cpc	r13, r19
     1b4:	0c f4       	brge	.+2      	; 0x1b8 <row_shift+0xac>
     1b6:	b5 cf       	rjmp	.-150    	; 0x122 <row_shift+0x16>
		}
		for (int j=0; j<length; j++){
			shape_array[index][j] = FALSE;
		}
	}
}
     1b8:	df 91       	pop	r29
     1ba:	cf 91       	pop	r28
     1bc:	1f 91       	pop	r17
     1be:	0f 91       	pop	r16
     1c0:	ff 90       	pop	r15
     1c2:	ef 90       	pop	r14
     1c4:	df 90       	pop	r13
     1c6:	cf 90       	pop	r12
     1c8:	08 95       	ret

000001ca <col_shift>:

void col_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
     1ca:	af 92       	push	r10
     1cc:	bf 92       	push	r11
     1ce:	cf 92       	push	r12
     1d0:	df 92       	push	r13
     1d2:	ef 92       	push	r14
     1d4:	ff 92       	push	r15
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
     1da:	cf 93       	push	r28
     1dc:	df 93       	push	r29
     1de:	5c 01       	movw	r10, r24
     1e0:	79 01       	movw	r14, r18
	for(int counter=0; counter<shift_count; counter++){
     1e2:	00 e0       	ldi	r16, 0x00	; 0
     1e4:	10 e0       	ldi	r17, 0x00	; 0
     1e6:	40 c0       	rjmp	.+128    	; 0x268 <col_shift+0x9e>
		int index = 0;
		if (direction>0){
     1e8:	14 16       	cp	r1, r20
     1ea:	15 06       	cpc	r1, r21
     1ec:	1c f4       	brge	.+6      	; 0x1f4 <col_shift+0x2a>
			index = length-1;
     1ee:	c5 01       	movw	r24, r10
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <col_shift+0x2e>
}

void col_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
	for(int counter=0; counter<shift_count; counter++){
		int index = 0;
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	20 e0       	ldi	r18, 0x00	; 0
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	1c c0       	rjmp	.+56     	; 0x236 <col_shift+0x6c>
			index = length-1;
		}

		for (int j=0; j<length-1; j++){
			for (int i=0; i<length; i++){
				shape_array[i][index] = shape_array[i][index-direction];
     1fe:	fd 01       	movw	r30, r26
     200:	ee 0f       	add	r30, r30
     202:	ff 1f       	adc	r31, r31
     204:	ee 0f       	add	r30, r30
     206:	ff 1f       	adc	r31, r31
     208:	e6 0f       	add	r30, r22
     20a:	f7 1f       	adc	r31, r23
     20c:	6c 01       	movw	r12, r24
     20e:	c4 1a       	sub	r12, r20
     210:	d5 0a       	sbc	r13, r21
     212:	ce 0e       	add	r12, r30
     214:	df 1e       	adc	r13, r31
     216:	e6 01       	movw	r28, r12
     218:	d8 80       	ld	r13, Y
     21a:	e8 0f       	add	r30, r24
     21c:	f9 1f       	adc	r31, r25
     21e:	d0 82       	st	Z, r13
		if (direction>0){
			index = length-1;
		}

		for (int j=0; j<length-1; j++){
			for (int i=0; i<length; i++){
     220:	11 96       	adiw	r26, 0x01	; 1
     222:	02 c0       	rjmp	.+4      	; 0x228 <col_shift+0x5e>
     224:	a0 e0       	ldi	r26, 0x00	; 0
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	aa 15       	cp	r26, r10
     22a:	bb 05       	cpc	r27, r11
     22c:	44 f3       	brlt	.-48     	; 0x1fe <col_shift+0x34>
				shape_array[i][index] = shape_array[i][index-direction];
			}
			index = index - direction;
     22e:	84 1b       	sub	r24, r20
     230:	95 0b       	sbc	r25, r21
		int index = 0;
		if (direction>0){
			index = length-1;
		}

		for (int j=0; j<length-1; j++){
     232:	2f 5f       	subi	r18, 0xFF	; 255
     234:	3f 4f       	sbci	r19, 0xFF	; 255
     236:	f5 01       	movw	r30, r10
     238:	31 97       	sbiw	r30, 0x01	; 1
     23a:	2e 17       	cp	r18, r30
     23c:	3f 07       	cpc	r19, r31
     23e:	94 f3       	brlt	.-28     	; 0x224 <col_shift+0x5a>
     240:	20 e0       	ldi	r18, 0x00	; 0
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	0c c0       	rjmp	.+24     	; 0x25e <col_shift+0x94>
				shape_array[i][index] = shape_array[i][index-direction];
			}
			index = index - direction;
		}
		for (int i=0; i<length; i++){
			shape_array[i][index] = FALSE;
     246:	f9 01       	movw	r30, r18
     248:	ee 0f       	add	r30, r30
     24a:	ff 1f       	adc	r31, r31
     24c:	ee 0f       	add	r30, r30
     24e:	ff 1f       	adc	r31, r31
     250:	e6 0f       	add	r30, r22
     252:	f7 1f       	adc	r31, r23
     254:	e8 0f       	add	r30, r24
     256:	f9 1f       	adc	r31, r25
     258:	10 82       	st	Z, r1
			for (int i=0; i<length; i++){
				shape_array[i][index] = shape_array[i][index-direction];
			}
			index = index - direction;
		}
		for (int i=0; i<length; i++){
     25a:	2f 5f       	subi	r18, 0xFF	; 255
     25c:	3f 4f       	sbci	r19, 0xFF	; 255
     25e:	2a 15       	cp	r18, r10
     260:	3b 05       	cpc	r19, r11
     262:	8c f3       	brlt	.-30     	; 0x246 <col_shift+0x7c>
	}
}

void col_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
	for(int counter=0; counter<shift_count; counter++){
     264:	0f 5f       	subi	r16, 0xFF	; 255
     266:	1f 4f       	sbci	r17, 0xFF	; 255
     268:	0e 15       	cp	r16, r14
     26a:	1f 05       	cpc	r17, r15
     26c:	0c f4       	brge	.+2      	; 0x270 <col_shift+0xa6>
     26e:	bc cf       	rjmp	.-136    	; 0x1e8 <col_shift+0x1e>
		}
		for (int i=0; i<length; i++){
			shape_array[i][index] = FALSE;
		}
	}
}
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	1f 91       	pop	r17
     276:	0f 91       	pop	r16
     278:	ff 90       	pop	r15
     27a:	ef 90       	pop	r14
     27c:	df 90       	pop	r13
     27e:	cf 90       	pop	r12
     280:	bf 90       	pop	r11
     282:	af 90       	pop	r10
     284:	08 95       	ret

00000286 <align_top_left_justify>:

void align_top_left_justify(bool shape_array[][4])
{
     286:	0f 93       	push	r16
     288:	1f 93       	push	r17
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	ec 01       	movw	r28, r24
	//top left justify shape after rotation
	//top
	int shift_count = -1;
	int shift_direction = UP;
	for (int i=0; i<4; i++){
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	30 e0       	ldi	r19, 0x00	; 0

void align_top_left_justify(bool shape_array[][4])
{
	//top left justify shape after rotation
	//top
	int shift_count = -1;
     294:	0f ef       	ldi	r16, 0xFF	; 255
     296:	1f ef       	ldi	r17, 0xFF	; 255
	int shift_direction = UP;
	for (int i=0; i<4; i++){
     298:	1b c0       	rjmp	.+54     	; 0x2d0 <align_top_left_justify+0x4a>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
     29a:	f9 01       	movw	r30, r18
     29c:	ee 0f       	add	r30, r30
     29e:	ff 1f       	adc	r31, r31
     2a0:	ee 0f       	add	r30, r30
     2a2:	ff 1f       	adc	r31, r31
     2a4:	ec 0f       	add	r30, r28
     2a6:	fd 1f       	adc	r31, r29
     2a8:	e8 0f       	add	r30, r24
     2aa:	f9 1f       	adc	r31, r25
     2ac:	40 81       	ld	r20, Z
     2ae:	4f 3f       	cpi	r20, 0xFF	; 255
     2b0:	41 f0       	breq	.+16     	; 0x2c2 <align_top_left_justify+0x3c>
	//top left justify shape after rotation
	//top
	int shift_count = -1;
	int shift_direction = UP;
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
     2b2:	01 96       	adiw	r24, 0x01	; 1
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <align_top_left_justify+0x34>
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	84 30       	cpi	r24, 0x04	; 4
     2bc:	91 05       	cpc	r25, r1
     2be:	6c f3       	brlt	.-38     	; 0x29a <align_top_left_justify+0x14>
     2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <align_top_left_justify+0x3e>
			if(shape_array[i][j] == TRUE){
				shift_count = i;
     2c2:	89 01       	movw	r16, r18
				break;
			}
		}
		if (shift_count != -1){
     2c4:	0f 3f       	cpi	r16, 0xFF	; 255
     2c6:	8f ef       	ldi	r24, 0xFF	; 255
     2c8:	18 07       	cpc	r17, r24
     2ca:	29 f4       	brne	.+10     	; 0x2d6 <align_top_left_justify+0x50>
{
	//top left justify shape after rotation
	//top
	int shift_count = -1;
	int shift_direction = UP;
	for (int i=0; i<4; i++){
     2cc:	2f 5f       	subi	r18, 0xFF	; 255
     2ce:	3f 4f       	sbci	r19, 0xFF	; 255
     2d0:	24 30       	cpi	r18, 0x04	; 4
     2d2:	31 05       	cpc	r19, r1
     2d4:	84 f3       	brlt	.-32     	; 0x2b6 <align_top_left_justify+0x30>
		}
		if (shift_count != -1){
			break;
		}
	}
	row_shift(4, shape_array,shift_direction,shift_count);
     2d6:	98 01       	movw	r18, r16
     2d8:	4f ef       	ldi	r20, 0xFF	; 255
     2da:	5f ef       	ldi	r21, 0xFF	; 255
     2dc:	be 01       	movw	r22, r28
     2de:	84 e0       	ldi	r24, 0x04	; 4
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 86 00 	call	0x10c	; 0x10c <row_shift>
	
	//left justify
	int width = 0;
	int w1 = -1, w2 = -1;
	for (int j=0; j<4; j++){
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	30 e0       	ldi	r19, 0x00	; 0
	}
	row_shift(4, shape_array,shift_direction,shift_count);
	
	//left justify
	int width = 0;
	int w1 = -1, w2 = -1;
     2ea:	6f ef       	ldi	r22, 0xFF	; 255
     2ec:	7f ef       	ldi	r23, 0xFF	; 255
     2ee:	af ef       	ldi	r26, 0xFF	; 255
     2f0:	bf ef       	ldi	r27, 0xFF	; 255
	for (int j=0; j<4; j++){
     2f2:	25 c0       	rjmp	.+74     	; 0x33e <align_top_left_justify+0xb8>
		for (int i=0; i<4; i++){
			if(shape_array[i][j] == TRUE){
     2f4:	fc 01       	movw	r30, r24
     2f6:	ee 0f       	add	r30, r30
     2f8:	ff 1f       	adc	r31, r31
     2fa:	ee 0f       	add	r30, r30
     2fc:	ff 1f       	adc	r31, r31
     2fe:	ec 0f       	add	r30, r28
     300:	fd 1f       	adc	r31, r29
     302:	e2 0f       	add	r30, r18
     304:	f3 1f       	adc	r31, r19
     306:	40 81       	ld	r20, Z
     308:	4f 3f       	cpi	r20, 0xFF	; 255
     30a:	31 f4       	brne	.+12     	; 0x318 <align_top_left_justify+0x92>
				if(w1 == -1){
     30c:	af 3f       	cpi	r26, 0xFF	; 255
     30e:	8f ef       	ldi	r24, 0xFF	; 255
     310:	b8 07       	cpc	r27, r24
     312:	51 f0       	breq	.+20     	; 0x328 <align_top_left_justify+0xa2>
					w1 = j;
				}
				w2 = j;
     314:	b9 01       	movw	r22, r18
     316:	0a c0       	rjmp	.+20     	; 0x32c <align_top_left_justify+0xa6>
	
	//left justify
	int width = 0;
	int w1 = -1, w2 = -1;
	for (int j=0; j<4; j++){
		for (int i=0; i<4; i++){
     318:	01 96       	adiw	r24, 0x01	; 1
     31a:	02 c0       	rjmp	.+4      	; 0x320 <align_top_left_justify+0x9a>
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	84 30       	cpi	r24, 0x04	; 4
     322:	91 05       	cpc	r25, r1
     324:	3c f3       	brlt	.-50     	; 0x2f4 <align_top_left_justify+0x6e>
     326:	02 c0       	rjmp	.+4      	; 0x32c <align_top_left_justify+0xa6>
			if(shape_array[i][j] == TRUE){
				if(w1 == -1){
					w1 = j;
				}
				w2 = j;
     328:	b9 01       	movw	r22, r18
	int w1 = -1, w2 = -1;
	for (int j=0; j<4; j++){
		for (int i=0; i<4; i++){
			if(shape_array[i][j] == TRUE){
				if(w1 == -1){
					w1 = j;
     32a:	d9 01       	movw	r26, r18
				}
				w2 = j;
				break;
			}
		}
		if((w1 != -1) && (w2<j)){
     32c:	af 3f       	cpi	r26, 0xFF	; 255
     32e:	8f ef       	ldi	r24, 0xFF	; 255
     330:	b8 07       	cpc	r27, r24
     332:	19 f0       	breq	.+6      	; 0x33a <align_top_left_justify+0xb4>
     334:	62 17       	cp	r22, r18
     336:	73 07       	cpc	r23, r19
     338:	2c f0       	brlt	.+10     	; 0x344 <align_top_left_justify+0xbe>
	row_shift(4, shape_array,shift_direction,shift_count);
	
	//left justify
	int width = 0;
	int w1 = -1, w2 = -1;
	for (int j=0; j<4; j++){
     33a:	2f 5f       	subi	r18, 0xFF	; 255
     33c:	3f 4f       	sbci	r19, 0xFF	; 255
     33e:	24 30       	cpi	r18, 0x04	; 4
     340:	31 05       	cpc	r19, r1
     342:	64 f3       	brlt	.-40     	; 0x31c <align_top_left_justify+0x96>
		}
		if((w1 != -1) && (w2<j)){
			break;
		}
	}
	width = w2 - w1 + 1;
     344:	6a 1b       	sub	r22, r26
     346:	7b 0b       	sbc	r23, r27
     348:	cb 01       	movw	r24, r22
     34a:	01 96       	adiw	r24, 0x01	; 1
	if(width == 1 || width == 2){
     34c:	62 30       	cpi	r22, 0x02	; 2
     34e:	71 05       	cpc	r23, r1
     350:	20 f4       	brcc	.+8      	; 0x35a <align_top_left_justify+0xd4>
		shift_count = w1 - 1;
     352:	8d 01       	movw	r16, r26
     354:	01 50       	subi	r16, 0x01	; 1
     356:	11 09       	sbc	r17, r1
     358:	04 c0       	rjmp	.+8      	; 0x362 <align_top_left_justify+0xdc>
	}
	else if(width == 3 || width == 4){
     35a:	03 97       	sbiw	r24, 0x03	; 3
     35c:	02 97       	sbiw	r24, 0x02	; 2
     35e:	08 f4       	brcc	.+2      	; 0x362 <align_top_left_justify+0xdc>
		shift_count = w1 - 0;
     360:	8d 01       	movw	r16, r26
	}
	if(shift_count<0){
     362:	11 23       	and	r17, r17
     364:	34 f4       	brge	.+12     	; 0x372 <align_top_left_justify+0xec>
		shift_count = -shift_count;
     366:	11 95       	neg	r17
     368:	01 95       	neg	r16
     36a:	11 09       	sbc	r17, r1
		shift_direction = RIGHT;
     36c:	41 e0       	ldi	r20, 0x01	; 1
     36e:	50 e0       	ldi	r21, 0x00	; 0
     370:	02 c0       	rjmp	.+4      	; 0x376 <align_top_left_justify+0xf0>
	}
	else{
		shift_direction = LEFT;
     372:	4f ef       	ldi	r20, 0xFF	; 255
     374:	5f ef       	ldi	r21, 0xFF	; 255
	}
	col_shift(4,shape_array,shift_direction,shift_count);
     376:	98 01       	movw	r18, r16
     378:	be 01       	movw	r22, r28
     37a:	84 e0       	ldi	r24, 0x04	; 4
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <col_shift>
}
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	1f 91       	pop	r17
     388:	0f 91       	pop	r16
     38a:	08 95       	ret

0000038c <rotate_shape>:

void rotate_shape(bool shape_array[][4])
{
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
     394:	60 97       	sbiw	r28, 0x10	; 16
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	f8 94       	cli
     39a:	de bf       	out	0x3e, r29	; 62
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	cd bf       	out	0x3d, r28	; 61
     3a0:	dc 01       	movw	r26, r24
	//rotate clockwise.
	//transpose, mirror.
	bool temp[4][4];
	
	for (int i=0; i<4; i++){
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	1f c0       	rjmp	.+62     	; 0x3e6 <rotate_shape+0x5a>
		for (int j=0; j<4; j++){
			temp[i][j] = shape_array[i][j];	//copy
     3a8:	9b 01       	movw	r18, r22
     3aa:	22 0f       	add	r18, r18
     3ac:	33 1f       	adc	r19, r19
     3ae:	22 0f       	add	r18, r18
     3b0:	33 1f       	adc	r19, r19
     3b2:	fd 01       	movw	r30, r26
     3b4:	e2 0f       	add	r30, r18
     3b6:	f3 1f       	adc	r31, r19
     3b8:	e4 0f       	add	r30, r20
     3ba:	f5 1f       	adc	r31, r21
     3bc:	90 81       	ld	r25, Z
     3be:	e1 e0       	ldi	r30, 0x01	; 1
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	ec 0f       	add	r30, r28
     3c4:	fd 1f       	adc	r31, r29
     3c6:	2e 0f       	add	r18, r30
     3c8:	3f 1f       	adc	r19, r31
     3ca:	f9 01       	movw	r30, r18
     3cc:	e4 0f       	add	r30, r20
     3ce:	f5 1f       	adc	r31, r21
     3d0:	90 83       	st	Z, r25
	//rotate clockwise.
	//transpose, mirror.
	bool temp[4][4];
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
     3d2:	4f 5f       	subi	r20, 0xFF	; 255
     3d4:	5f 4f       	sbci	r21, 0xFF	; 255
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <rotate_shape+0x50>
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	50 e0       	ldi	r21, 0x00	; 0
     3dc:	44 30       	cpi	r20, 0x04	; 4
     3de:	51 05       	cpc	r21, r1
     3e0:	1c f3       	brlt	.-58     	; 0x3a8 <rotate_shape+0x1c>
{
	//rotate clockwise.
	//transpose, mirror.
	bool temp[4][4];
	
	for (int i=0; i<4; i++){
     3e2:	6f 5f       	subi	r22, 0xFF	; 255
     3e4:	7f 4f       	sbci	r23, 0xFF	; 255
     3e6:	64 30       	cpi	r22, 0x04	; 4
     3e8:	71 05       	cpc	r23, r1
     3ea:	b4 f3       	brlt	.-20     	; 0x3d8 <rotate_shape+0x4c>
     3ec:	20 e0       	ldi	r18, 0x00	; 0
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	21 c0       	rjmp	.+66     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
		}
	}
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
			temp_shape_array[i][j] = temp[j][i];	//transpose
     3f2:	fc 01       	movw	r30, r24
     3f4:	ee 0f       	add	r30, r30
     3f6:	ff 1f       	adc	r31, r31
     3f8:	ee 0f       	add	r30, r30
     3fa:	ff 1f       	adc	r31, r31
     3fc:	41 e0       	ldi	r20, 0x01	; 1
     3fe:	50 e0       	ldi	r21, 0x00	; 0
     400:	4c 0f       	add	r20, r28
     402:	5d 1f       	adc	r21, r29
     404:	e4 0f       	add	r30, r20
     406:	f5 1f       	adc	r31, r21
     408:	e2 0f       	add	r30, r18
     40a:	f3 1f       	adc	r31, r19
     40c:	40 81       	ld	r20, Z
     40e:	f9 01       	movw	r30, r18
     410:	ee 0f       	add	r30, r30
     412:	ff 1f       	adc	r31, r31
     414:	ee 0f       	add	r30, r30
     416:	ff 1f       	adc	r31, r31
     418:	e6 51       	subi	r30, 0x16	; 22
     41a:	fe 4f       	sbci	r31, 0xFE	; 254
     41c:	e8 0f       	add	r30, r24
     41e:	f9 1f       	adc	r31, r25
     420:	40 83       	st	Z, r20
			temp[i][j] = shape_array[i][j];	//copy
		}
	}
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
     422:	01 96       	adiw	r24, 0x01	; 1
     424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	84 30       	cpi	r24, 0x04	; 4
     42c:	91 05       	cpc	r25, r1
     42e:	0c f3       	brlt	.-62     	; 0x3f2 <rotate_shape+0x66>
		for (int j=0; j<4; j++){
			temp[i][j] = shape_array[i][j];	//copy
		}
	}
	
	for (int i=0; i<4; i++){
     430:	2f 5f       	subi	r18, 0xFF	; 255
     432:	3f 4f       	sbci	r19, 0xFF	; 255
     434:	24 30       	cpi	r18, 0x04	; 4
     436:	31 05       	cpc	r19, r1
     438:	b4 f3       	brlt	.-20     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	1f c0       	rjmp	.+62     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
		}
	}
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
			temp[i][j] = temp_shape_array[i][j];
     440:	cb 01       	movw	r24, r22
     442:	88 0f       	add	r24, r24
     444:	99 1f       	adc	r25, r25
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	fc 01       	movw	r30, r24
     44c:	e6 51       	subi	r30, 0x16	; 22
     44e:	fe 4f       	sbci	r31, 0xFE	; 254
     450:	e2 0f       	add	r30, r18
     452:	f3 1f       	adc	r31, r19
     454:	40 81       	ld	r20, Z
     456:	e1 e0       	ldi	r30, 0x01	; 1
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	ec 0f       	add	r30, r28
     45c:	fd 1f       	adc	r31, r29
     45e:	8e 0f       	add	r24, r30
     460:	9f 1f       	adc	r25, r31
     462:	fc 01       	movw	r30, r24
     464:	e2 0f       	add	r30, r18
     466:	f3 1f       	adc	r31, r19
     468:	40 83       	st	Z, r20
			temp_shape_array[i][j] = temp[j][i];	//transpose
		}
	}
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
     46a:	2f 5f       	subi	r18, 0xFF	; 255
     46c:	3f 4f       	sbci	r19, 0xFF	; 255
     46e:	02 c0       	rjmp	.+4      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
     470:	20 e0       	ldi	r18, 0x00	; 0
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	24 30       	cpi	r18, 0x04	; 4
     476:	31 05       	cpc	r19, r1
     478:	1c f3       	brlt	.-58     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		for (int j=0; j<4; j++){
			temp_shape_array[i][j] = temp[j][i];	//transpose
		}
	}
	
	for (int i=0; i<4; i++){
     47a:	6f 5f       	subi	r22, 0xFF	; 255
     47c:	7f 4f       	sbci	r23, 0xFF	; 255
     47e:	64 30       	cpi	r22, 0x04	; 4
     480:	71 05       	cpc	r23, r1
     482:	b4 f3       	brlt	.-20     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	22 c0       	rjmp	.+68     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
		}
	}

	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
			temp_shape_array[i][j] = temp[i][3-j];	//mirror
     48a:	e3 e0       	ldi	r30, 0x03	; 3
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	e2 1b       	sub	r30, r18
     490:	f3 0b       	sbc	r31, r19
     492:	cb 01       	movw	r24, r22
     494:	88 0f       	add	r24, r24
     496:	99 1f       	adc	r25, r25
     498:	88 0f       	add	r24, r24
     49a:	99 1f       	adc	r25, r25
     49c:	41 e0       	ldi	r20, 0x01	; 1
     49e:	50 e0       	ldi	r21, 0x00	; 0
     4a0:	4c 0f       	add	r20, r28
     4a2:	5d 1f       	adc	r21, r29
     4a4:	48 0f       	add	r20, r24
     4a6:	59 1f       	adc	r21, r25
     4a8:	e4 0f       	add	r30, r20
     4aa:	f5 1f       	adc	r31, r21
     4ac:	40 81       	ld	r20, Z
     4ae:	86 51       	subi	r24, 0x16	; 22
     4b0:	9e 4f       	sbci	r25, 0xFE	; 254
     4b2:	fc 01       	movw	r30, r24
     4b4:	e2 0f       	add	r30, r18
     4b6:	f3 1f       	adc	r31, r19
     4b8:	40 83       	st	Z, r20
			temp[i][j] = temp_shape_array[i][j];
		}
	}

	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
     4ba:	2f 5f       	subi	r18, 0xFF	; 255
     4bc:	3f 4f       	sbci	r19, 0xFF	; 255
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
     4c0:	20 e0       	ldi	r18, 0x00	; 0
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	24 30       	cpi	r18, 0x04	; 4
     4c6:	31 05       	cpc	r19, r1
     4c8:	04 f3       	brlt	.-64     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
		for (int j=0; j<4; j++){
			temp[i][j] = temp_shape_array[i][j];
		}
	}

	for (int i=0; i<4; i++){
     4ca:	6f 5f       	subi	r22, 0xFF	; 255
     4cc:	7f 4f       	sbci	r23, 0xFF	; 255
     4ce:	64 30       	cpi	r22, 0x04	; 4
     4d0:	71 05       	cpc	r23, r1
     4d2:	b4 f3       	brlt	.-20     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
		for (int j=0; j<4; j++){
			temp_shape_array[i][j] = temp[i][3-j];	//mirror
		}
	}
	align_top_left_justify(temp_shape_array);
     4d4:	8a ee       	ldi	r24, 0xEA	; 234
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	0e 94 43 01 	call	0x286	; 0x286 <align_top_left_justify>
}
     4dc:	60 96       	adiw	r28, 0x10	; 16
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	f8 94       	cli
     4e2:	de bf       	out	0x3e, r29	; 62
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	cd bf       	out	0x3d, r28	; 61
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	08 95       	ret

000004ee <check_valid>:

bool check_valid(int row, int col, bool shape_array[][4])
{
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	ec 01       	movw	r28, r24
	for(int i=0; i<4; i++){
     4f4:	a0 e0       	ldi	r26, 0x00	; 0
     4f6:	b0 e0       	ldi	r27, 0x00	; 0
     4f8:	2e c0       	rjmp	.+92     	; 0x556 <check_valid+0x68>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
     4fa:	fd 01       	movw	r30, r26
     4fc:	ee 0f       	add	r30, r30
     4fe:	ff 1f       	adc	r31, r31
     500:	ee 0f       	add	r30, r30
     502:	ff 1f       	adc	r31, r31
     504:	e4 0f       	add	r30, r20
     506:	f5 1f       	adc	r31, r21
     508:	e2 0f       	add	r30, r18
     50a:	f3 1f       	adc	r31, r19
     50c:	90 81       	ld	r25, Z
     50e:	9f 3f       	cpi	r25, 0xFF	; 255
     510:	c9 f4       	brne	.+50     	; 0x544 <check_valid+0x56>
				if((row+i) > 15){
     512:	fd 01       	movw	r30, r26
     514:	ec 0f       	add	r30, r28
     516:	fd 1f       	adc	r31, r29
     518:	e0 31       	cpi	r30, 0x10	; 16
     51a:	f1 05       	cpc	r31, r1
     51c:	0c f5       	brge	.+66     	; 0x560 <check_valid+0x72>
					//bottom row reached
					//invalid
					return FALSE;
				}
				if((col+j) < 0 || (col+j) > 7){
     51e:	c9 01       	movw	r24, r18
     520:	86 0f       	add	r24, r22
     522:	97 1f       	adc	r25, r23
     524:	88 30       	cpi	r24, 0x08	; 8
     526:	91 05       	cpc	r25, r1
     528:	e8 f4       	brcc	.+58     	; 0x564 <check_valid+0x76>
					//left/right col reached
					//invalid
					return FALSE;
				}
				if(current_display[row+i][col+j] == TRUE){
     52a:	ee 0f       	add	r30, r30
     52c:	ff 1f       	adc	r31, r31
     52e:	ee 0f       	add	r30, r30
     530:	ff 1f       	adc	r31, r31
     532:	ee 0f       	add	r30, r30
     534:	ff 1f       	adc	r31, r31
     536:	e6 59       	subi	r30, 0x96	; 150
     538:	fe 4f       	sbci	r31, 0xFE	; 254
     53a:	e8 0f       	add	r30, r24
     53c:	f9 1f       	adc	r31, r25
     53e:	80 81       	ld	r24, Z
     540:	8f 3f       	cpi	r24, 0xFF	; 255
     542:	91 f0       	breq	.+36     	; 0x568 <check_valid+0x7a>
}

bool check_valid(int row, int col, bool shape_array[][4])
{
	for(int i=0; i<4; i++){
		for (int j=0; j<4; j++){
     544:	2f 5f       	subi	r18, 0xFF	; 255
     546:	3f 4f       	sbci	r19, 0xFF	; 255
     548:	02 c0       	rjmp	.+4      	; 0x54e <check_valid+0x60>
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	24 30       	cpi	r18, 0x04	; 4
     550:	31 05       	cpc	r19, r1
     552:	9c f2       	brlt	.-90     	; 0x4fa <check_valid+0xc>
	align_top_left_justify(temp_shape_array);
}

bool check_valid(int row, int col, bool shape_array[][4])
{
	for(int i=0; i<4; i++){
     554:	11 96       	adiw	r26, 0x01	; 1
     556:	a4 30       	cpi	r26, 0x04	; 4
     558:	b1 05       	cpc	r27, r1
     55a:	bc f3       	brlt	.-18     	; 0x54a <check_valid+0x5c>
					return FALSE;
				}
			}
		}
	}
	return TRUE;
     55c:	8f ef       	ldi	r24, 0xFF	; 255
     55e:	05 c0       	rjmp	.+10     	; 0x56a <check_valid+0x7c>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
				if((row+i) > 15){
					//bottom row reached
					//invalid
					return FALSE;
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	03 c0       	rjmp	.+6      	; 0x56a <check_valid+0x7c>
				}
				if((col+j) < 0 || (col+j) > 7){
					//left/right col reached
					//invalid
					return FALSE;
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	01 c0       	rjmp	.+2      	; 0x56a <check_valid+0x7c>
				}
				if(current_display[row+i][col+j] == TRUE){
					//position filled
					//invalid
					return FALSE;
     568:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
	return TRUE;
}
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	08 95       	ret

00000570 <set_shape>:

void set_shape(bool shape_array[][4])
{
     570:	dc 01       	movw	r26, r24
	for(int i=0; i<4; i++){
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	2d c0       	rjmp	.+90     	; 0x5d2 <set_shape+0x62>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
     578:	fb 01       	movw	r30, r22
     57a:	ee 0f       	add	r30, r30
     57c:	ff 1f       	adc	r31, r31
     57e:	ee 0f       	add	r30, r30
     580:	ff 1f       	adc	r31, r31
     582:	ea 0f       	add	r30, r26
     584:	fb 1f       	adc	r31, r27
     586:	e2 0f       	add	r30, r18
     588:	f3 1f       	adc	r31, r19
     58a:	90 81       	ld	r25, Z
     58c:	9f 3f       	cpi	r25, 0xFF	; 255
     58e:	b9 f4       	brne	.+46     	; 0x5be <set_shape+0x4e>
				current_display[current_R+i][current_C+j] = shape_array[i][j];
     590:	40 91 68 01 	lds	r20, 0x0168	; 0x800168 <current_R>
     594:	50 91 69 01 	lds	r21, 0x0169	; 0x800169 <current_R+0x1>
     598:	46 0f       	add	r20, r22
     59a:	57 1f       	adc	r21, r23
     59c:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <current_C>
     5a0:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <current_C+0x1>
     5a4:	e2 0f       	add	r30, r18
     5a6:	f3 1f       	adc	r31, r19
     5a8:	44 0f       	add	r20, r20
     5aa:	55 1f       	adc	r21, r21
     5ac:	44 0f       	add	r20, r20
     5ae:	55 1f       	adc	r21, r21
     5b0:	44 0f       	add	r20, r20
     5b2:	55 1f       	adc	r21, r21
     5b4:	46 59       	subi	r20, 0x96	; 150
     5b6:	5e 4f       	sbci	r21, 0xFE	; 254
     5b8:	e4 0f       	add	r30, r20
     5ba:	f5 1f       	adc	r31, r21
     5bc:	90 83       	st	Z, r25
}

void set_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
		for (int j=0; j<4; j++){
     5be:	2f 5f       	subi	r18, 0xFF	; 255
     5c0:	3f 4f       	sbci	r19, 0xFF	; 255
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <set_shape+0x58>
     5c4:	20 e0       	ldi	r18, 0x00	; 0
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	24 30       	cpi	r18, 0x04	; 4
     5ca:	31 05       	cpc	r19, r1
     5cc:	ac f2       	brlt	.-86     	; 0x578 <set_shape+0x8>
	return TRUE;
}

void set_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
     5ce:	6f 5f       	subi	r22, 0xFF	; 255
     5d0:	7f 4f       	sbci	r23, 0xFF	; 255
     5d2:	64 30       	cpi	r22, 0x04	; 4
     5d4:	71 05       	cpc	r23, r1
     5d6:	b4 f3       	brlt	.-20     	; 0x5c4 <set_shape+0x54>
				current_display[current_R+i][current_C+j] = shape_array[i][j];
			}
		}
	}
	//_delay_ms(50);
}
     5d8:	08 95       	ret

000005da <remove_shape>:
void remove_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	2d c0       	rjmp	.+90     	; 0x63a <remove_shape+0x60>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
     5e0:	fb 01       	movw	r30, r22
     5e2:	ee 0f       	add	r30, r30
     5e4:	ff 1f       	adc	r31, r31
     5e6:	ee 0f       	add	r30, r30
     5e8:	ff 1f       	adc	r31, r31
     5ea:	e8 0f       	add	r30, r24
     5ec:	f9 1f       	adc	r31, r25
     5ee:	e2 0f       	add	r30, r18
     5f0:	f3 1f       	adc	r31, r19
     5f2:	40 81       	ld	r20, Z
     5f4:	4f 3f       	cpi	r20, 0xFF	; 255
     5f6:	b9 f4       	brne	.+46     	; 0x626 <remove_shape+0x4c>
				current_display[current_R+i][current_C+j] = FALSE;
     5f8:	40 91 68 01 	lds	r20, 0x0168	; 0x800168 <current_R>
     5fc:	50 91 69 01 	lds	r21, 0x0169	; 0x800169 <current_R+0x1>
     600:	46 0f       	add	r20, r22
     602:	57 1f       	adc	r21, r23
     604:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <current_C>
     608:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <current_C+0x1>
     60c:	e2 0f       	add	r30, r18
     60e:	f3 1f       	adc	r31, r19
     610:	44 0f       	add	r20, r20
     612:	55 1f       	adc	r21, r21
     614:	44 0f       	add	r20, r20
     616:	55 1f       	adc	r21, r21
     618:	44 0f       	add	r20, r20
     61a:	55 1f       	adc	r21, r21
     61c:	46 59       	subi	r20, 0x96	; 150
     61e:	5e 4f       	sbci	r21, 0xFE	; 254
     620:	e4 0f       	add	r30, r20
     622:	f5 1f       	adc	r31, r21
     624:	10 82       	st	Z, r1
	//_delay_ms(50);
}
void remove_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
		for (int j=0; j<4; j++){
     626:	2f 5f       	subi	r18, 0xFF	; 255
     628:	3f 4f       	sbci	r19, 0xFF	; 255
     62a:	02 c0       	rjmp	.+4      	; 0x630 <remove_shape+0x56>
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	24 30       	cpi	r18, 0x04	; 4
     632:	31 05       	cpc	r19, r1
     634:	ac f2       	brlt	.-86     	; 0x5e0 <remove_shape+0x6>
	}
	//_delay_ms(50);
}
void remove_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
     636:	6f 5f       	subi	r22, 0xFF	; 255
     638:	7f 4f       	sbci	r23, 0xFF	; 255
     63a:	64 30       	cpi	r22, 0x04	; 4
     63c:	71 05       	cpc	r23, r1
     63e:	b4 f3       	brlt	.-20     	; 0x62c <remove_shape+0x52>
				current_display[current_R+i][current_C+j] = FALSE;
			}
		}
	}
	//_delay_ms(100);
}
     640:	08 95       	ret

00000642 <get_col>:

int get_col(int row)
{
     642:	ac 01       	movw	r20, r24
	int col_value = 0x00;
	for (int j=0; j<8; j++){
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	30 e0       	ldi	r19, 0x00	; 0
	//_delay_ms(100);
}

int get_col(int row)
{
	int col_value = 0x00;
     648:	a0 e0       	ldi	r26, 0x00	; 0
     64a:	b0 e0       	ldi	r27, 0x00	; 0
	for (int j=0; j<8; j++){
     64c:	1a c0       	rjmp	.+52     	; 0x682 <get_col+0x40>
		if(current_display[row][j] == TRUE){
     64e:	fa 01       	movw	r30, r20
     650:	ee 0f       	add	r30, r30
     652:	ff 1f       	adc	r31, r31
     654:	ee 0f       	add	r30, r30
     656:	ff 1f       	adc	r31, r31
     658:	ee 0f       	add	r30, r30
     65a:	ff 1f       	adc	r31, r31
     65c:	e6 59       	subi	r30, 0x96	; 150
     65e:	fe 4f       	sbci	r31, 0xFE	; 254
     660:	e2 0f       	add	r30, r18
     662:	f3 1f       	adc	r31, r19
     664:	90 81       	ld	r25, Z
     666:	9f 3f       	cpi	r25, 0xFF	; 255
     668:	51 f4       	brne	.+20     	; 0x67e <get_col+0x3c>
			col_value |= 1<<(j);
     66a:	61 e0       	ldi	r22, 0x01	; 1
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	02 2e       	mov	r0, r18
     670:	02 c0       	rjmp	.+4      	; 0x676 <get_col+0x34>
     672:	66 0f       	add	r22, r22
     674:	77 1f       	adc	r23, r23
     676:	0a 94       	dec	r0
     678:	e2 f7       	brpl	.-8      	; 0x672 <get_col+0x30>
     67a:	a6 2b       	or	r26, r22
     67c:	b7 2b       	or	r27, r23
}

int get_col(int row)
{
	int col_value = 0x00;
	for (int j=0; j<8; j++){
     67e:	2f 5f       	subi	r18, 0xFF	; 255
     680:	3f 4f       	sbci	r19, 0xFF	; 255
     682:	28 30       	cpi	r18, 0x08	; 8
     684:	31 05       	cpc	r19, r1
     686:	1c f3       	brlt	.-58     	; 0x64e <get_col+0xc>
		if(current_display[row][j] == TRUE){
			col_value |= 1<<(j);
		}
	}
	return col_value;
}
     688:	cd 01       	movw	r24, r26
     68a:	08 95       	ret

0000068c <remove_row>:

void remove_row(int row){
	//shift rows downwards from row to 1
	for(int i = row ; i > 0 ; i--){
     68c:	22 c0       	rjmp	.+68     	; 0x6d2 <remove_row+0x46>
		for(int j = 0 ; j< 8; j++){
			current_display[i][j] = current_display[i-1][j];
     68e:	fc 01       	movw	r30, r24
     690:	31 97       	sbiw	r30, 0x01	; 1
     692:	ee 0f       	add	r30, r30
     694:	ff 1f       	adc	r31, r31
     696:	ee 0f       	add	r30, r30
     698:	ff 1f       	adc	r31, r31
     69a:	ee 0f       	add	r30, r30
     69c:	ff 1f       	adc	r31, r31
     69e:	e6 59       	subi	r30, 0x96	; 150
     6a0:	fe 4f       	sbci	r31, 0xFE	; 254
     6a2:	e2 0f       	add	r30, r18
     6a4:	f3 1f       	adc	r31, r19
     6a6:	40 81       	ld	r20, Z
     6a8:	fc 01       	movw	r30, r24
     6aa:	ee 0f       	add	r30, r30
     6ac:	ff 1f       	adc	r31, r31
     6ae:	ee 0f       	add	r30, r30
     6b0:	ff 1f       	adc	r31, r31
     6b2:	ee 0f       	add	r30, r30
     6b4:	ff 1f       	adc	r31, r31
     6b6:	e6 59       	subi	r30, 0x96	; 150
     6b8:	fe 4f       	sbci	r31, 0xFE	; 254
     6ba:	e2 0f       	add	r30, r18
     6bc:	f3 1f       	adc	r31, r19
     6be:	40 83       	st	Z, r20
}

void remove_row(int row){
	//shift rows downwards from row to 1
	for(int i = row ; i > 0 ; i--){
		for(int j = 0 ; j< 8; j++){
     6c0:	2f 5f       	subi	r18, 0xFF	; 255
     6c2:	3f 4f       	sbci	r19, 0xFF	; 255
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <remove_row+0x3e>
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	28 30       	cpi	r18, 0x08	; 8
     6cc:	31 05       	cpc	r19, r1
     6ce:	fc f2       	brlt	.-66     	; 0x68e <remove_row+0x2>
	return col_value;
}

void remove_row(int row){
	//shift rows downwards from row to 1
	for(int i = row ; i > 0 ; i--){
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	18 16       	cp	r1, r24
     6d4:	19 06       	cpc	r1, r25
     6d6:	bc f3       	brlt	.-18     	; 0x6c6 <remove_row+0x3a>
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	05 c0       	rjmp	.+10     	; 0x6e8 <remove_row+0x5c>
			current_display[i][j] = current_display[i-1][j];
		}
	}
	//put false in row 0
	for(int i = 0 ; i < 8; i++){
		current_display[0][i] = FALSE;
     6de:	fc 01       	movw	r30, r24
     6e0:	e6 59       	subi	r30, 0x96	; 150
     6e2:	fe 4f       	sbci	r31, 0xFE	; 254
     6e4:	10 82       	st	Z, r1
		for(int j = 0 ; j< 8; j++){
			current_display[i][j] = current_display[i-1][j];
		}
	}
	//put false in row 0
	for(int i = 0 ; i < 8; i++){
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	88 30       	cpi	r24, 0x08	; 8
     6ea:	91 05       	cpc	r25, r1
     6ec:	c4 f3       	brlt	.-16     	; 0x6de <remove_row+0x52>
		current_display[0][i] = FALSE;
	}
}
     6ee:	08 95       	ret

000006f0 <update_score1x>:
void update_score1x(){
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
	uint8_t temp ;
	for(int i = 0 ; i < 16 ; i++){
     6f4:	c0 e0       	ldi	r28, 0x00	; 0
     6f6:	d0 e0       	ldi	r29, 0x00	; 0
     6f8:	30 c0       	rjmp	.+96     	; 0x75a <update_score1x+0x6a>
		temp = TRUE;
		for(int j = 0 ; j < 8; j++){
			temp &= current_display[i][j];
     6fa:	fe 01       	movw	r30, r28
     6fc:	ee 0f       	add	r30, r30
     6fe:	ff 1f       	adc	r31, r31
     700:	ee 0f       	add	r30, r30
     702:	ff 1f       	adc	r31, r31
     704:	ee 0f       	add	r30, r30
     706:	ff 1f       	adc	r31, r31
     708:	e6 59       	subi	r30, 0x96	; 150
     70a:	fe 4f       	sbci	r31, 0xFE	; 254
     70c:	e8 0f       	add	r30, r24
     70e:	f9 1f       	adc	r31, r25
     710:	30 81       	ld	r19, Z
     712:	23 23       	and	r18, r19
}
void update_score1x(){
	uint8_t temp ;
	for(int i = 0 ; i < 16 ; i++){
		temp = TRUE;
		for(int j = 0 ; j < 8; j++){
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	03 c0       	rjmp	.+6      	; 0x71e <update_score1x+0x2e>
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	2f ef       	ldi	r18, 0xFF	; 255
     71e:	88 30       	cpi	r24, 0x08	; 8
     720:	91 05       	cpc	r25, r1
     722:	5c f3       	brlt	.-42     	; 0x6fa <update_score1x+0xa>
			temp &= current_display[i][j];
		}
		if(temp == TRUE){
     724:	2f 3f       	cpi	r18, 0xFF	; 255
     726:	c1 f4       	brne	.+48     	; 0x758 <update_score1x+0x68>
			UART_send(10);
     728:	8a e0       	ldi	r24, 0x0A	; 10
     72a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_send>
			PORTA |= 1 << PA2 ;
     72e:	8b b3       	in	r24, 0x1b	; 27
     730:	84 60       	ori	r24, 0x04	; 4
     732:	8b bb       	out	0x1b, r24	; 27
     734:	8f e4       	ldi	r24, 0x4F	; 79
     736:	93 ec       	ldi	r25, 0xC3	; 195
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	f1 f7       	brne	.-4      	; 0x738 <update_score1x+0x48>
     73c:	00 c0       	rjmp	.+0      	; 0x73e <update_score1x+0x4e>
     73e:	00 00       	nop
			_delay_ms(200);
			PORTA &= ~(1 << PA2);
     740:	8b b3       	in	r24, 0x1b	; 27
     742:	8b 7f       	andi	r24, 0xFB	; 251
     744:	8b bb       	out	0x1b, r24	; 27
     746:	8f e4       	ldi	r24, 0x4F	; 79
     748:	93 ec       	ldi	r25, 0xC3	; 195
     74a:	01 97       	sbiw	r24, 0x01	; 1
     74c:	f1 f7       	brne	.-4      	; 0x74a <update_score1x+0x5a>
     74e:	00 c0       	rjmp	.+0      	; 0x750 <update_score1x+0x60>
     750:	00 00       	nop
			_delay_ms(200);
			remove_row(i);
     752:	ce 01       	movw	r24, r28
     754:	0e 94 46 03 	call	0x68c	; 0x68c <remove_row>
		current_display[0][i] = FALSE;
	}
}
void update_score1x(){
	uint8_t temp ;
	for(int i = 0 ; i < 16 ; i++){
     758:	21 96       	adiw	r28, 0x01	; 1
     75a:	c0 31       	cpi	r28, 0x10	; 16
     75c:	d1 05       	cpc	r29, r1
     75e:	e4 f2       	brlt	.-72     	; 0x718 <update_score1x+0x28>
			PORTA &= ~(1 << PA2);
			_delay_ms(200);
			remove_row(i);
		}
	}
}
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <update_score2x>:
void update_score2x(){
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
	uint8_t temp ;
	for(int i = 0 ; i < 12 ; i++){
     76e:	c0 e0       	ldi	r28, 0x00	; 0
     770:	d0 e0       	ldi	r29, 0x00	; 0
     772:	43 c0       	rjmp	.+134    	; 0x7fa <update_score2x+0x94>
		temp = TRUE;
		int ii = i;
		for(int t = 0; t < 4; t++){
			for(int j = 0 ; j < 8; j++){
				temp &= current_display[ii][j];
     774:	fa 01       	movw	r30, r20
     776:	ee 0f       	add	r30, r30
     778:	ff 1f       	adc	r31, r31
     77a:	ee 0f       	add	r30, r30
     77c:	ff 1f       	adc	r31, r31
     77e:	ee 0f       	add	r30, r30
     780:	ff 1f       	adc	r31, r31
     782:	e6 59       	subi	r30, 0x96	; 150
     784:	fe 4f       	sbci	r31, 0xFE	; 254
     786:	e8 0f       	add	r30, r24
     788:	f9 1f       	adc	r31, r25
     78a:	30 81       	ld	r19, Z
     78c:	23 23       	and	r18, r19
	uint8_t temp ;
	for(int i = 0 ; i < 12 ; i++){
		temp = TRUE;
		int ii = i;
		for(int t = 0; t < 4; t++){
			for(int j = 0 ; j < 8; j++){
     78e:	01 96       	adiw	r24, 0x01	; 1
     790:	02 c0       	rjmp	.+4      	; 0x796 <update_score2x+0x30>
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	88 30       	cpi	r24, 0x08	; 8
     798:	91 05       	cpc	r25, r1
     79a:	64 f3       	brlt	.-40     	; 0x774 <update_score2x+0xe>
				temp &= current_display[ii][j];
			}
			ii++;
     79c:	4f 5f       	subi	r20, 0xFF	; 255
     79e:	5f 4f       	sbci	r21, 0xFF	; 255
void update_score2x(){
	uint8_t temp ;
	for(int i = 0 ; i < 12 ; i++){
		temp = TRUE;
		int ii = i;
		for(int t = 0; t < 4; t++){
     7a0:	6f 5f       	subi	r22, 0xFF	; 255
     7a2:	7f 4f       	sbci	r23, 0xFF	; 255
     7a4:	04 c0       	rjmp	.+8      	; 0x7ae <update_score2x+0x48>
     7a6:	ae 01       	movw	r20, r28
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	2f ef       	ldi	r18, 0xFF	; 255
     7ae:	64 30       	cpi	r22, 0x04	; 4
     7b0:	71 05       	cpc	r23, r1
     7b2:	7c f3       	brlt	.-34     	; 0x792 <update_score2x+0x2c>
			for(int j = 0 ; j < 8; j++){
				temp &= current_display[ii][j];
			}
			ii++;
		}
		if(temp == TRUE){
     7b4:	2f 3f       	cpi	r18, 0xFF	; 255
     7b6:	01 f5       	brne	.+64     	; 0x7f8 <update_score2x+0x92>
			UART_send(11);
     7b8:	8b e0       	ldi	r24, 0x0B	; 11
     7ba:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_send>
			PORTA |= 1 << PA2 ;
     7be:	8b b3       	in	r24, 0x1b	; 27
     7c0:	84 60       	ori	r24, 0x04	; 4
     7c2:	8b bb       	out	0x1b, r24	; 27
     7c4:	8f e4       	ldi	r24, 0x4F	; 79
     7c6:	93 ec       	ldi	r25, 0xC3	; 195
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <update_score2x+0x62>
     7cc:	00 c0       	rjmp	.+0      	; 0x7ce <update_score2x+0x68>
     7ce:	00 00       	nop
			_delay_ms(200);
			PORTA &= ~(1 << PA2);
     7d0:	8b b3       	in	r24, 0x1b	; 27
     7d2:	8b 7f       	andi	r24, 0xFB	; 251
     7d4:	8b bb       	out	0x1b, r24	; 27
     7d6:	8f e4       	ldi	r24, 0x4F	; 79
     7d8:	93 ec       	ldi	r25, 0xC3	; 195
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	f1 f7       	brne	.-4      	; 0x7da <update_score2x+0x74>
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <update_score2x+0x7a>
     7e0:	00 00       	nop
			_delay_ms(200);
			for(int t = 0; t < 4; t++){
     7e2:	00 e0       	ldi	r16, 0x00	; 0
     7e4:	10 e0       	ldi	r17, 0x00	; 0
     7e6:	05 c0       	rjmp	.+10     	; 0x7f2 <update_score2x+0x8c>
				remove_row(i);
     7e8:	ce 01       	movw	r24, r28
     7ea:	0e 94 46 03 	call	0x68c	; 0x68c <remove_row>
			UART_send(11);
			PORTA |= 1 << PA2 ;
			_delay_ms(200);
			PORTA &= ~(1 << PA2);
			_delay_ms(200);
			for(int t = 0; t < 4; t++){
     7ee:	0f 5f       	subi	r16, 0xFF	; 255
     7f0:	1f 4f       	sbci	r17, 0xFF	; 255
     7f2:	04 30       	cpi	r16, 0x04	; 4
     7f4:	11 05       	cpc	r17, r1
     7f6:	c4 f3       	brlt	.-16     	; 0x7e8 <update_score2x+0x82>
		}
	}
}
void update_score2x(){
	uint8_t temp ;
	for(int i = 0 ; i < 12 ; i++){
     7f8:	21 96       	adiw	r28, 0x01	; 1
     7fa:	cc 30       	cpi	r28, 0x0C	; 12
     7fc:	d1 05       	cpc	r29, r1
     7fe:	9c f2       	brlt	.-90     	; 0x7a6 <update_score2x+0x40>
			for(int t = 0; t < 4; t++){
				remove_row(i);
			}
		}
	}
}
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	08 95       	ret

0000080a <go_left>:
void go_left(){
	remove_shape(current_shape_array);
     80a:	8a ef       	ldi	r24, 0xFA	; 250
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 ed 02 	call	0x5da	; 0x5da <remove_shape>
	if(check_valid(current_R, current_C-1 , current_shape_array) == TRUE){
     812:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <current_C>
     816:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <current_C+0x1>
     81a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <current_R>
     81e:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <current_R+0x1>
     822:	61 50       	subi	r22, 0x01	; 1
     824:	71 09       	sbc	r23, r1
     826:	4a ef       	ldi	r20, 0xFA	; 250
     828:	51 e0       	ldi	r21, 0x01	; 1
     82a:	0e 94 77 02 	call	0x4ee	; 0x4ee <check_valid>
     82e:	8f 3f       	cpi	r24, 0xFF	; 255
     830:	49 f4       	brne	.+18     	; 0x844 <go_left+0x3a>
		current_C--;
     832:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <current_C>
     836:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <current_C+0x1>
     83a:	01 97       	sbiw	r24, 0x01	; 1
     83c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <current_C+0x1>
     840:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <current_C>
	}
	set_shape(current_shape_array);
     844:	8a ef       	ldi	r24, 0xFA	; 250
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	0e 94 b8 02 	call	0x570	; 0x570 <set_shape>
     84c:	08 95       	ret

0000084e <go_right>:
}
void go_right(){
	remove_shape(current_shape_array);
     84e:	8a ef       	ldi	r24, 0xFA	; 250
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	0e 94 ed 02 	call	0x5da	; 0x5da <remove_shape>
	if(check_valid(current_R, current_C+1 , current_shape_array) == TRUE){
     856:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <current_C>
     85a:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <current_C+0x1>
     85e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <current_R>
     862:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <current_R+0x1>
     866:	6f 5f       	subi	r22, 0xFF	; 255
     868:	7f 4f       	sbci	r23, 0xFF	; 255
     86a:	4a ef       	ldi	r20, 0xFA	; 250
     86c:	51 e0       	ldi	r21, 0x01	; 1
     86e:	0e 94 77 02 	call	0x4ee	; 0x4ee <check_valid>
     872:	8f 3f       	cpi	r24, 0xFF	; 255
     874:	49 f4       	brne	.+18     	; 0x888 <__stack+0x29>
		current_C++;
     876:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <current_C>
     87a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <current_C+0x1>
     87e:	01 96       	adiw	r24, 0x01	; 1
     880:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <current_C+0x1>
     884:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <current_C>
	}
	set_shape(current_shape_array);
     888:	8a ef       	ldi	r24, 0xFA	; 250
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	0e 94 b8 02 	call	0x570	; 0x570 <set_shape>
     890:	08 95       	ret

00000892 <go_down>:
}
void go_down(){
	remove_shape(current_shape_array);
     892:	8a ef       	ldi	r24, 0xFA	; 250
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	0e 94 ed 02 	call	0x5da	; 0x5da <remove_shape>
	if(check_valid(current_R+1, current_C , current_shape_array) == TRUE){
     89a:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <current_C>
     89e:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <current_C+0x1>
     8a2:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <current_R>
     8a6:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <current_R+0x1>
     8aa:	4a ef       	ldi	r20, 0xFA	; 250
     8ac:	51 e0       	ldi	r21, 0x01	; 1
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	0e 94 77 02 	call	0x4ee	; 0x4ee <check_valid>
     8b4:	8f 3f       	cpi	r24, 0xFF	; 255
     8b6:	71 f4       	brne	.+28     	; 0x8d4 <go_down+0x42>
		current_R++;
     8b8:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <current_R>
     8bc:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <current_R+0x1>
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <current_R+0x1>
     8c6:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <current_R>
		set_shape(current_shape_array);
     8ca:	8a ef       	ldi	r24, 0xFA	; 250
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	0e 94 b8 02 	call	0x570	; 0x570 <set_shape>
     8d2:	08 95       	ret
	}
	else{
		set_shape(current_shape_array);
     8d4:	8a ef       	ldi	r24, 0xFA	; 250
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	0e 94 b8 02 	call	0x570	; 0x570 <set_shape>
		current_C = 2;
     8dc:	82 e0       	ldi	r24, 0x02	; 2
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <current_C+0x1>
     8e4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <current_C>
		current_R = 0;
     8e8:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <current_R+0x1>
     8ec:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <current_R>
		for(int i = 0 ; i < 4; i++){
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	13 c0       	rjmp	.+38     	; 0x91c <go_down+0x8a>
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = FALSE;
     8f6:	f9 01       	movw	r30, r18
     8f8:	ee 0f       	add	r30, r30
     8fa:	ff 1f       	adc	r31, r31
     8fc:	ee 0f       	add	r30, r30
     8fe:	ff 1f       	adc	r31, r31
     900:	e6 50       	subi	r30, 0x06	; 6
     902:	fe 4f       	sbci	r31, 0xFE	; 254
     904:	e8 0f       	add	r30, r24
     906:	f9 1f       	adc	r31, r25
     908:	10 82       	st	Z, r1
	else{
		set_shape(current_shape_array);
		current_C = 2;
		current_R = 0;
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
     90a:	01 96       	adiw	r24, 0x01	; 1
     90c:	02 c0       	rjmp	.+4      	; 0x912 <go_down+0x80>
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	84 30       	cpi	r24, 0x04	; 4
     914:	91 05       	cpc	r25, r1
     916:	7c f3       	brlt	.-34     	; 0x8f6 <go_down+0x64>
	}
	else{
		set_shape(current_shape_array);
		current_C = 2;
		current_R = 0;
		for(int i = 0 ; i < 4; i++){
     918:	2f 5f       	subi	r18, 0xFF	; 255
     91a:	3f 4f       	sbci	r19, 0xFF	; 255
     91c:	24 30       	cpi	r18, 0x04	; 4
     91e:	31 05       	cpc	r19, r1
     920:	b4 f3       	brlt	.-20     	; 0x90e <go_down+0x7c>
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = FALSE;
			}
		}
		current_shape = -1;
     922:	8f ef       	ldi	r24, 0xFF	; 255
     924:	9f ef       	ldi	r25, 0xFF	; 255
     926:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <current_shape+0x1>
     92a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <current_shape>
		update_score2x();
     92e:	0e 94 b3 03 	call	0x766	; 0x766 <update_score2x>
		update_score1x();
     932:	0e 94 78 03 	call	0x6f0	; 0x6f0 <update_score1x>
     936:	08 95       	ret

00000938 <generate_shape>:
	}
}
void generate_shape(){
	//int shape = 0;
	int shape = rand()%7;
     938:	0e 94 11 08 	call	0x1022	; 0x1022 <rand>
     93c:	67 e0       	ldi	r22, 0x07	; 7
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__divmodhi4>
	current_shape = next_shape;
     944:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <next_shape>
     948:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <next_shape+0x1>
     94c:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <current_shape+0x1>
     950:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <current_shape>
	next_shape = shape;
     954:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <next_shape+0x1>
     958:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <next_shape>
	shape = current_shape;
	if( shape == 0){
     95c:	21 15       	cp	r18, r1
     95e:	31 05       	cpc	r19, r1
     960:	e9 f0       	breq	.+58     	; 0x99c <generate_shape+0x64>
     962:	22 c0       	rjmp	.+68     	; 0x9a8 <generate_shape+0x70>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_O_array[i][j];
     964:	cb 01       	movw	r24, r22
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	88 0f       	add	r24, r24
     96c:	99 1f       	adc	r25, r25
     96e:	fc 01       	movw	r30, r24
     970:	e6 5b       	subi	r30, 0xB6	; 182
     972:	fe 4f       	sbci	r31, 0xFE	; 254
     974:	e2 0f       	add	r30, r18
     976:	f3 1f       	adc	r31, r19
     978:	40 81       	ld	r20, Z
     97a:	86 50       	subi	r24, 0x06	; 6
     97c:	9e 4f       	sbci	r25, 0xFE	; 254
     97e:	fc 01       	movw	r30, r24
     980:	e2 0f       	add	r30, r18
     982:	f3 1f       	adc	r31, r19
     984:	40 83       	st	Z, r20
	current_shape = next_shape;
	next_shape = shape;
	shape = current_shape;
	if( shape == 0){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
     986:	2f 5f       	subi	r18, 0xFF	; 255
     988:	3f 4f       	sbci	r19, 0xFF	; 255
     98a:	02 c0       	rjmp	.+4      	; 0x990 <generate_shape+0x58>
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	24 30       	cpi	r18, 0x04	; 4
     992:	31 05       	cpc	r19, r1
     994:	3c f3       	brlt	.-50     	; 0x964 <generate_shape+0x2c>
	int shape = rand()%7;
	current_shape = next_shape;
	next_shape = shape;
	shape = current_shape;
	if( shape == 0){
		for(int i = 0 ; i < 4; i++){
     996:	6f 5f       	subi	r22, 0xFF	; 255
     998:	7f 4f       	sbci	r23, 0xFF	; 255
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <generate_shape+0x68>
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	64 30       	cpi	r22, 0x04	; 4
     9a2:	71 05       	cpc	r23, r1
     9a4:	9c f3       	brlt	.-26     	; 0x98c <generate_shape+0x54>
     9a6:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_O_array[i][j];
			}
		}
	}
	else if(shape == 1){
     9a8:	21 30       	cpi	r18, 0x01	; 1
     9aa:	31 05       	cpc	r19, r1
     9ac:	19 f5       	brne	.+70     	; 0x9f4 <generate_shape+0xbc>
     9ae:	1c c0       	rjmp	.+56     	; 0x9e8 <generate_shape+0xb0>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_I_array[i][j];
     9b0:	cb 01       	movw	r24, r22
     9b2:	88 0f       	add	r24, r24
     9b4:	99 1f       	adc	r25, r25
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	fc 01       	movw	r30, r24
     9bc:	e6 5c       	subi	r30, 0xC6	; 198
     9be:	fe 4f       	sbci	r31, 0xFE	; 254
     9c0:	e2 0f       	add	r30, r18
     9c2:	f3 1f       	adc	r31, r19
     9c4:	40 81       	ld	r20, Z
     9c6:	86 50       	subi	r24, 0x06	; 6
     9c8:	9e 4f       	sbci	r25, 0xFE	; 254
     9ca:	fc 01       	movw	r30, r24
     9cc:	e2 0f       	add	r30, r18
     9ce:	f3 1f       	adc	r31, r19
     9d0:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 1){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
     9d2:	2f 5f       	subi	r18, 0xFF	; 255
     9d4:	3f 4f       	sbci	r19, 0xFF	; 255
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <generate_shape+0xa4>
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	24 30       	cpi	r18, 0x04	; 4
     9de:	31 05       	cpc	r19, r1
     9e0:	3c f3       	brlt	.-50     	; 0x9b0 <generate_shape+0x78>
				current_shape_array[i][j] = shape_O_array[i][j];
			}
		}
	}
	else if(shape == 1){
		for(int i = 0 ; i < 4; i++){
     9e2:	6f 5f       	subi	r22, 0xFF	; 255
     9e4:	7f 4f       	sbci	r23, 0xFF	; 255
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <generate_shape+0xb4>
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	64 30       	cpi	r22, 0x04	; 4
     9ee:	71 05       	cpc	r23, r1
     9f0:	9c f3       	brlt	.-26     	; 0x9d8 <generate_shape+0xa0>
     9f2:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_I_array[i][j];
			}
		}
	}
	else if(shape == 2){
     9f4:	22 30       	cpi	r18, 0x02	; 2
     9f6:	31 05       	cpc	r19, r1
     9f8:	19 f5       	brne	.+70     	; 0xa40 <generate_shape+0x108>
     9fa:	1c c0       	rjmp	.+56     	; 0xa34 <generate_shape+0xfc>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_L_array[i][j];
     9fc:	cb 01       	movw	r24, r22
     9fe:	88 0f       	add	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	88 0f       	add	r24, r24
     a04:	99 1f       	adc	r25, r25
     a06:	fc 01       	movw	r30, r24
     a08:	e6 5d       	subi	r30, 0xD6	; 214
     a0a:	fe 4f       	sbci	r31, 0xFE	; 254
     a0c:	e2 0f       	add	r30, r18
     a0e:	f3 1f       	adc	r31, r19
     a10:	40 81       	ld	r20, Z
     a12:	86 50       	subi	r24, 0x06	; 6
     a14:	9e 4f       	sbci	r25, 0xFE	; 254
     a16:	fc 01       	movw	r30, r24
     a18:	e2 0f       	add	r30, r18
     a1a:	f3 1f       	adc	r31, r19
     a1c:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 2){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
     a1e:	2f 5f       	subi	r18, 0xFF	; 255
     a20:	3f 4f       	sbci	r19, 0xFF	; 255
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <generate_shape+0xf0>
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	24 30       	cpi	r18, 0x04	; 4
     a2a:	31 05       	cpc	r19, r1
     a2c:	3c f3       	brlt	.-50     	; 0x9fc <generate_shape+0xc4>
				current_shape_array[i][j] = shape_I_array[i][j];
			}
		}
	}
	else if(shape == 2){
		for(int i = 0 ; i < 4; i++){
     a2e:	6f 5f       	subi	r22, 0xFF	; 255
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <generate_shape+0x100>
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	64 30       	cpi	r22, 0x04	; 4
     a3a:	71 05       	cpc	r23, r1
     a3c:	9c f3       	brlt	.-26     	; 0xa24 <generate_shape+0xec>
     a3e:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_L_array[i][j];
			}
		}
	}
	else if(shape == 3){
     a40:	23 30       	cpi	r18, 0x03	; 3
     a42:	31 05       	cpc	r19, r1
     a44:	19 f5       	brne	.+70     	; 0xa8c <generate_shape+0x154>
     a46:	1c c0       	rjmp	.+56     	; 0xa80 <generate_shape+0x148>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_J_array[i][j];
     a48:	cb 01       	movw	r24, r22
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	88 0f       	add	r24, r24
     a50:	99 1f       	adc	r25, r25
     a52:	fc 01       	movw	r30, r24
     a54:	e6 5e       	subi	r30, 0xE6	; 230
     a56:	fe 4f       	sbci	r31, 0xFE	; 254
     a58:	e2 0f       	add	r30, r18
     a5a:	f3 1f       	adc	r31, r19
     a5c:	40 81       	ld	r20, Z
     a5e:	86 50       	subi	r24, 0x06	; 6
     a60:	9e 4f       	sbci	r25, 0xFE	; 254
     a62:	fc 01       	movw	r30, r24
     a64:	e2 0f       	add	r30, r18
     a66:	f3 1f       	adc	r31, r19
     a68:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 3){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
     a6a:	2f 5f       	subi	r18, 0xFF	; 255
     a6c:	3f 4f       	sbci	r19, 0xFF	; 255
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <generate_shape+0x13c>
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	24 30       	cpi	r18, 0x04	; 4
     a76:	31 05       	cpc	r19, r1
     a78:	3c f3       	brlt	.-50     	; 0xa48 <generate_shape+0x110>
				current_shape_array[i][j] = shape_L_array[i][j];
			}
		}
	}
	else if(shape == 3){
		for(int i = 0 ; i < 4; i++){
     a7a:	6f 5f       	subi	r22, 0xFF	; 255
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <generate_shape+0x14c>
     a80:	60 e0       	ldi	r22, 0x00	; 0
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	64 30       	cpi	r22, 0x04	; 4
     a86:	71 05       	cpc	r23, r1
     a88:	9c f3       	brlt	.-26     	; 0xa70 <generate_shape+0x138>
     a8a:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_J_array[i][j];
			}
		}
	}
	else if(shape == 4){
     a8c:	24 30       	cpi	r18, 0x04	; 4
     a8e:	31 05       	cpc	r19, r1
     a90:	19 f5       	brne	.+70     	; 0xad8 <generate_shape+0x1a0>
     a92:	1c c0       	rjmp	.+56     	; 0xacc <generate_shape+0x194>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_S_array[i][j];
     a94:	cb 01       	movw	r24, r22
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	fc 01       	movw	r30, r24
     aa0:	e6 5f       	subi	r30, 0xF6	; 246
     aa2:	fe 4f       	sbci	r31, 0xFE	; 254
     aa4:	e2 0f       	add	r30, r18
     aa6:	f3 1f       	adc	r31, r19
     aa8:	40 81       	ld	r20, Z
     aaa:	86 50       	subi	r24, 0x06	; 6
     aac:	9e 4f       	sbci	r25, 0xFE	; 254
     aae:	fc 01       	movw	r30, r24
     ab0:	e2 0f       	add	r30, r18
     ab2:	f3 1f       	adc	r31, r19
     ab4:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 4){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
     ab6:	2f 5f       	subi	r18, 0xFF	; 255
     ab8:	3f 4f       	sbci	r19, 0xFF	; 255
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <generate_shape+0x188>
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	24 30       	cpi	r18, 0x04	; 4
     ac2:	31 05       	cpc	r19, r1
     ac4:	3c f3       	brlt	.-50     	; 0xa94 <generate_shape+0x15c>
				current_shape_array[i][j] = shape_J_array[i][j];
			}
		}
	}
	else if(shape == 4){
		for(int i = 0 ; i < 4; i++){
     ac6:	6f 5f       	subi	r22, 0xFF	; 255
     ac8:	7f 4f       	sbci	r23, 0xFF	; 255
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <generate_shape+0x198>
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	64 30       	cpi	r22, 0x04	; 4
     ad2:	71 05       	cpc	r23, r1
     ad4:	9c f3       	brlt	.-26     	; 0xabc <generate_shape+0x184>
     ad6:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_S_array[i][j];
			}
		}
	}
	else if(shape == 5){
     ad8:	25 30       	cpi	r18, 0x05	; 5
     ada:	31 05       	cpc	r19, r1
     adc:	19 f5       	brne	.+70     	; 0xb24 <generate_shape+0x1ec>
     ade:	1c c0       	rjmp	.+56     	; 0xb18 <generate_shape+0x1e0>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_Z_array[i][j];
     ae0:	cb 01       	movw	r24, r22
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	fc 01       	movw	r30, r24
     aec:	e6 50       	subi	r30, 0x06	; 6
     aee:	ff 4f       	sbci	r31, 0xFF	; 255
     af0:	e2 0f       	add	r30, r18
     af2:	f3 1f       	adc	r31, r19
     af4:	40 81       	ld	r20, Z
     af6:	86 50       	subi	r24, 0x06	; 6
     af8:	9e 4f       	sbci	r25, 0xFE	; 254
     afa:	fc 01       	movw	r30, r24
     afc:	e2 0f       	add	r30, r18
     afe:	f3 1f       	adc	r31, r19
     b00:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 5){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
     b02:	2f 5f       	subi	r18, 0xFF	; 255
     b04:	3f 4f       	sbci	r19, 0xFF	; 255
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <generate_shape+0x1d4>
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	24 30       	cpi	r18, 0x04	; 4
     b0e:	31 05       	cpc	r19, r1
     b10:	3c f3       	brlt	.-50     	; 0xae0 <generate_shape+0x1a8>
				current_shape_array[i][j] = shape_S_array[i][j];
			}
		}
	}
	else if(shape == 5){
		for(int i = 0 ; i < 4; i++){
     b12:	6f 5f       	subi	r22, 0xFF	; 255
     b14:	7f 4f       	sbci	r23, 0xFF	; 255
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <generate_shape+0x1e4>
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	64 30       	cpi	r22, 0x04	; 4
     b1e:	71 05       	cpc	r23, r1
     b20:	9c f3       	brlt	.-26     	; 0xb08 <generate_shape+0x1d0>
     b22:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_Z_array[i][j];
			}
		}
	}
	else if(shape == 6){
     b24:	26 30       	cpi	r18, 0x06	; 6
     b26:	31 05       	cpc	r19, r1
     b28:	11 f5       	brne	.+68     	; 0xb6e <generate_shape+0x236>
     b2a:	1c c0       	rjmp	.+56     	; 0xb64 <generate_shape+0x22c>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_T_array[i][j];
     b2c:	cb 01       	movw	r24, r22
     b2e:	88 0f       	add	r24, r24
     b30:	99 1f       	adc	r25, r25
     b32:	88 0f       	add	r24, r24
     b34:	99 1f       	adc	r25, r25
     b36:	fc 01       	movw	r30, r24
     b38:	e6 51       	subi	r30, 0x16	; 22
     b3a:	ff 4f       	sbci	r31, 0xFF	; 255
     b3c:	e2 0f       	add	r30, r18
     b3e:	f3 1f       	adc	r31, r19
     b40:	40 81       	ld	r20, Z
     b42:	86 50       	subi	r24, 0x06	; 6
     b44:	9e 4f       	sbci	r25, 0xFE	; 254
     b46:	fc 01       	movw	r30, r24
     b48:	e2 0f       	add	r30, r18
     b4a:	f3 1f       	adc	r31, r19
     b4c:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 6){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
     b4e:	2f 5f       	subi	r18, 0xFF	; 255
     b50:	3f 4f       	sbci	r19, 0xFF	; 255
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <generate_shape+0x220>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	24 30       	cpi	r18, 0x04	; 4
     b5a:	31 05       	cpc	r19, r1
     b5c:	3c f3       	brlt	.-50     	; 0xb2c <generate_shape+0x1f4>
				current_shape_array[i][j] = shape_Z_array[i][j];
			}
		}
	}
	else if(shape == 6){
		for(int i = 0 ; i < 4; i++){
     b5e:	6f 5f       	subi	r22, 0xFF	; 255
     b60:	7f 4f       	sbci	r23, 0xFF	; 255
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <generate_shape+0x230>
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	64 30       	cpi	r22, 0x04	; 4
     b6a:	71 05       	cpc	r23, r1
     b6c:	9c f3       	brlt	.-26     	; 0xb54 <generate_shape+0x21c>
     b6e:	08 95       	ret

00000b70 <start_again>:
	}
}


void start_again(){
	for(int i = 0; i < 16; i++){
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	15 c0       	rjmp	.+42     	; 0xba0 <start_again+0x30>
		for(int j = 0; j < 8; j++){
			current_display[i][j] = FALSE;
     b76:	f9 01       	movw	r30, r18
     b78:	ee 0f       	add	r30, r30
     b7a:	ff 1f       	adc	r31, r31
     b7c:	ee 0f       	add	r30, r30
     b7e:	ff 1f       	adc	r31, r31
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	e6 59       	subi	r30, 0x96	; 150
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	e8 0f       	add	r30, r24
     b8a:	f9 1f       	adc	r31, r25
     b8c:	10 82       	st	Z, r1
}


void start_again(){
	for(int i = 0; i < 16; i++){
		for(int j = 0; j < 8; j++){
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <start_again+0x26>
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	88 30       	cpi	r24, 0x08	; 8
     b98:	91 05       	cpc	r25, r1
     b9a:	6c f3       	brlt	.-38     	; 0xb76 <start_again+0x6>
	}
}


void start_again(){
	for(int i = 0; i < 16; i++){
     b9c:	2f 5f       	subi	r18, 0xFF	; 255
     b9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ba0:	20 31       	cpi	r18, 0x10	; 16
     ba2:	31 05       	cpc	r19, r1
     ba4:	b4 f3       	brlt	.-20     	; 0xb92 <start_again+0x22>
		for(int j = 0; j < 8; j++){
			current_display[i][j] = FALSE;
		}
	}
	count_speed = 175;
     ba6:	8f ea       	ldi	r24, 0xAF	; 175
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <count_speed+0x1>
     bae:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <count_speed>
	count_count = 0;
     bb2:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <count_count+0x1>
     bb6:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <count_count>
	
	PORTA |= 1 << PA2 ;
     bba:	8b b3       	in	r24, 0x1b	; 27
     bbc:	84 60       	ori	r24, 0x04	; 4
     bbe:	8b bb       	out	0x1b, r24	; 27
     bc0:	8f e4       	ldi	r24, 0x4F	; 79
     bc2:	93 ec       	ldi	r25, 0xC3	; 195
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	f1 f7       	brne	.-4      	; 0xbc4 <start_again+0x54>
     bc8:	00 c0       	rjmp	.+0      	; 0xbca <start_again+0x5a>
     bca:	00 00       	nop
	_delay_ms(200);
	PORTA &= ~(1 << PA2);
     bcc:	8b b3       	in	r24, 0x1b	; 27
     bce:	8b 7f       	andi	r24, 0xFB	; 251
     bd0:	8b bb       	out	0x1b, r24	; 27
     bd2:	8f e4       	ldi	r24, 0x4F	; 79
     bd4:	93 ec       	ldi	r25, 0xC3	; 195
     bd6:	01 97       	sbiw	r24, 0x01	; 1
     bd8:	f1 f7       	brne	.-4      	; 0xbd6 <start_again+0x66>
     bda:	00 c0       	rjmp	.+0      	; 0xbdc <start_again+0x6c>
     bdc:	00 00       	nop
     bde:	08 95       	ret

00000be0 <display>:
	_delay_ms(200);
}
void display(int i){
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	ec 01       	movw	r28, r24
	uint8_t led_col = 0x00;
	PORTC = 0x00; // common row connection
     be6:	15 ba       	out	0x15, r1	; 21
	PORTC |= row[i]; // common row connection
     be8:	fc 01       	movw	r30, r24
     bea:	e6 5a       	subi	r30, 0xA6	; 166
     bec:	fe 4f       	sbci	r31, 0xFE	; 254
     bee:	90 81       	ld	r25, Z
     bf0:	85 b3       	in	r24, 0x15	; 21
     bf2:	89 2b       	or	r24, r25
     bf4:	85 bb       	out	0x15, r24	; 21
	PORTB = ~get_col(i); // upper matrix column
     bf6:	ce 01       	movw	r24, r28
     bf8:	0e 94 21 03 	call	0x642	; 0x642 <get_col>
     bfc:	80 95       	com	r24
     bfe:	88 bb       	out	0x18, r24	; 24
	// lower matrix column
	led_col = ~get_col(i+8);
     c00:	ce 01       	movw	r24, r28
     c02:	08 96       	adiw	r24, 0x08	; 8
     c04:	0e 94 21 03 	call	0x642	; 0x642 <get_col>
     c08:	80 95       	com	r24
	PORTA |= 0xF0; // clear
     c0a:	9b b3       	in	r25, 0x1b	; 27
     c0c:	90 6f       	ori	r25, 0xF0	; 240
     c0e:	9b bb       	out	0x1b, r25	; 27
	PORTD |= 0xF0; //clear
     c10:	92 b3       	in	r25, 0x12	; 18
     c12:	90 6f       	ori	r25, 0xF0	; 240
     c14:	92 bb       	out	0x12, r25	; 18
	PORTA &= ((led_col & 0x0F) << 4) | 0x0F; // col0-col3 --> A4-A7
     c16:	2b b3       	in	r18, 0x1b	; 27
     c18:	90 e1       	ldi	r25, 0x10	; 16
     c1a:	89 9f       	mul	r24, r25
     c1c:	a0 01       	movw	r20, r0
     c1e:	11 24       	eor	r1, r1
     c20:	94 2f       	mov	r25, r20
     c22:	9f 60       	ori	r25, 0x0F	; 15
     c24:	92 23       	and	r25, r18
     c26:	9b bb       	out	0x1b, r25	; 27
	PORTD &= (led_col & 0xF0) | 0x0F; // col4- col7 --> D4-D7
     c28:	92 b3       	in	r25, 0x12	; 18
     c2a:	8f 60       	ori	r24, 0x0F	; 15
     c2c:	89 23       	and	r24, r25
     c2e:	82 bb       	out	0x12, r24	; 18
     c30:	83 ef       	ldi	r24, 0xF3	; 243
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	f1 f7       	brne	.-4      	; 0xc34 <display+0x54>
     c38:	00 c0       	rjmp	.+0      	; 0xc3a <display+0x5a>
     c3a:	00 00       	nop
	_delay_ms(2);
	PORTB = ~0x0; // upper matrix column
     c3c:	8f ef       	ldi	r24, 0xFF	; 255
     c3e:	88 bb       	out	0x18, r24	; 24
	//PORTA = ~0x0; // lower matrix column
	PORTA |= 0xF0;
     c40:	8b b3       	in	r24, 0x1b	; 27
     c42:	80 6f       	ori	r24, 0xF0	; 240
     c44:	8b bb       	out	0x1b, r24	; 27
	PORTD |= 0xF0;
     c46:	82 b3       	in	r24, 0x12	; 18
     c48:	80 6f       	ori	r24, 0xF0	; 240
     c4a:	82 bb       	out	0x12, r24	; 18
}
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	08 95       	ret

00000c52 <new_game>:
void new_game(){
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
	int ADC_Value_X = -1;
	for(int i = 0 ;i < 16 ; i++){
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	1d c0       	rjmp	.+58     	; 0xc96 <new_game+0x44>
		for(int j = 0; j < 8; j++){
			current_display[i][j] = play[i][j];
     c5c:	cb 01       	movw	r24, r22
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	fc 01       	movw	r30, r24
     c6c:	e6 59       	subi	r30, 0x96	; 150
     c6e:	ff 4f       	sbci	r31, 0xFF	; 255
     c70:	e2 0f       	add	r30, r18
     c72:	f3 1f       	adc	r31, r19
     c74:	40 81       	ld	r20, Z
     c76:	86 59       	subi	r24, 0x96	; 150
     c78:	9e 4f       	sbci	r25, 0xFE	; 254
     c7a:	fc 01       	movw	r30, r24
     c7c:	e2 0f       	add	r30, r18
     c7e:	f3 1f       	adc	r31, r19
     c80:	40 83       	st	Z, r20
	PORTD |= 0xF0;
}
void new_game(){
	int ADC_Value_X = -1;
	for(int i = 0 ;i < 16 ; i++){
		for(int j = 0; j < 8; j++){
     c82:	2f 5f       	subi	r18, 0xFF	; 255
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <new_game+0x3a>
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	28 30       	cpi	r18, 0x08	; 8
     c8e:	31 05       	cpc	r19, r1
     c90:	2c f3       	brlt	.-54     	; 0xc5c <new_game+0xa>
	PORTA |= 0xF0;
	PORTD |= 0xF0;
}
void new_game(){
	int ADC_Value_X = -1;
	for(int i = 0 ;i < 16 ; i++){
     c92:	6f 5f       	subi	r22, 0xFF	; 255
     c94:	7f 4f       	sbci	r23, 0xFF	; 255
     c96:	60 31       	cpi	r22, 0x10	; 16
     c98:	71 05       	cpc	r23, r1
     c9a:	b4 f3       	brlt	.-20     	; 0xc88 <new_game+0x36>
     c9c:	c7 e0       	ldi	r28, 0x07	; 7
     c9e:	d0 e0       	ldi	r29, 0x00	; 0
			current_display[i][j] = play[i][j];
		}
	}
	int i = 7;
	while(1){
		display(i);
     ca0:	ce 01       	movw	r24, r28
     ca2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <display>
		if(i == 7) i = 0;
     ca6:	c7 30       	cpi	r28, 0x07	; 7
     ca8:	d1 05       	cpc	r29, r1
     caa:	11 f0       	breq	.+4      	; 0xcb0 <new_game+0x5e>
		else i++;
     cac:	21 96       	adiw	r28, 0x01	; 1
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <new_game+0x62>
		}
	}
	int i = 7;
	while(1){
		display(i);
		if(i == 7) i = 0;
     cb0:	c0 e0       	ldi	r28, 0x00	; 0
     cb2:	d0 e0       	ldi	r29, 0x00	; 0
		else i++;
		ADC_Value_X = ADC_Read(0);
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_Read>
		if(ADC_Value_X < 100){
     cba:	84 36       	cpi	r24, 0x64	; 100
     cbc:	91 05       	cpc	r25, r1
     cbe:	84 f7       	brge	.-32     	; 0xca0 <new_game+0x4e>
			start_again();
     cc0:	0e 94 b8 05 	call	0xb70	; 0xb70 <start_again>
			UART_send(7);
     cc4:	87 e0       	ldi	r24, 0x07	; 7
     cc6:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_send>
			return;
		}
	}
}
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	08 95       	ret

00000cd0 <new_piece>:




void new_piece(){
	if(current_R == 0 && current_C == 2 && current_shape == -1){
     cd0:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <current_R>
     cd4:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <current_R+0x1>
     cd8:	89 2b       	or	r24, r25
     cda:	69 f5       	brne	.+90     	; 0xd36 <new_piece+0x66>
     cdc:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <current_C>
     ce0:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <current_C+0x1>
     ce4:	02 97       	sbiw	r24, 0x02	; 2
     ce6:	39 f5       	brne	.+78     	; 0xd36 <new_piece+0x66>
     ce8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <current_shape>
     cec:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <current_shape+0x1>
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	09 f5       	brne	.+66     	; 0xd36 <new_piece+0x66>
		generate_shape();
     cf4:	0e 94 9c 04 	call	0x938	; 0x938 <generate_shape>
		//generate_shape(rand_val[r]);
		//remove_shape(current_shape_array);
		if(check_valid(0 , 2 , current_shape_array) == TRUE){
     cf8:	4a ef       	ldi	r20, 0xFA	; 250
     cfa:	51 e0       	ldi	r21, 0x01	; 1
     cfc:	62 e0       	ldi	r22, 0x02	; 2
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 77 02 	call	0x4ee	; 0x4ee <check_valid>
     d08:	8f 3f       	cpi	r24, 0xFF	; 255
     d0a:	69 f0       	breq	.+26     	; 0xd26 <new_piece+0x56>
			//set_shape(current_shape_array);
			//_delay_ms(2);
		}
		else{
			UART_send(9);
     d0c:	89 e0       	ldi	r24, 0x09	; 9
     d0e:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_send>
			start_again();
     d12:	0e 94 b8 05 	call	0xb70	; 0xb70 <start_again>
			new_game();
     d16:	0e 94 29 06 	call	0xc52	; 0xc52 <new_game>
     d1a:	8f e4       	ldi	r24, 0x4F	; 79
     d1c:	93 ec       	ldi	r25, 0xC3	; 195
     d1e:	01 97       	sbiw	r24, 0x01	; 1
     d20:	f1 f7       	brne	.-4      	; 0xd1e <new_piece+0x4e>
     d22:	00 c0       	rjmp	.+0      	; 0xd24 <new_piece+0x54>
     d24:	00 00       	nop
			_delay_ms(200);
		}
		UART_send(next_shape);
     d26:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <next_shape>
     d2a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_send>
		set_shape(current_shape_array);
     d2e:	8a ef       	ldi	r24, 0xFA	; 250
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	0e 94 b8 02 	call	0x570	; 0x570 <set_shape>
     d36:	08 95       	ret

00000d38 <movement>:
	}
}

int pressed_confidence_level = 0;
void movement(){
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
	int ADC_Value_X = -1, ADC_Value_Y = -1;
	ADC_Value_X = ADC_Read(0);
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_Read>
     d42:	ec 01       	movw	r28, r24
	ADC_Value_Y = ADC_Read(1);
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_Read>
	if(ADC_Value_Y > 900){
     d4a:	85 38       	cpi	r24, 0x85	; 133
     d4c:	23 e0       	ldi	r18, 0x03	; 3
     d4e:	92 07       	cpc	r25, r18
     d50:	9c f0       	brlt	.+38     	; 0xd78 <movement+0x40>
		pressed_confidence_level++;
     d52:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
     d56:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
     d60:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
		if(pressed_confidence_level > PRESS_CONF){
     d64:	c3 97       	sbiw	r24, 0x33	; 51
     d66:	0c f4       	brge	.+2      	; 0xd6a <movement+0x32>
     d68:	85 c0       	rjmp	.+266    	; 0xe74 <movement+0x13c>
			go_left();
     d6a:	0e 94 05 04 	call	0x80a	; 0x80a <go_left>
			pressed_confidence_level = 0;
     d6e:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <__data_end+0x1>
     d72:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
     d76:	7e c0       	rjmp	.+252    	; 0xe74 <movement+0x13c>
		}
		// go_left();
		// _delay_ms(200);
	}
	else if(ADC_Value_Y < 100){
     d78:	84 36       	cpi	r24, 0x64	; 100
     d7a:	91 05       	cpc	r25, r1
     d7c:	9c f4       	brge	.+38     	; 0xda4 <movement+0x6c>
		pressed_confidence_level++;
     d7e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
     d82:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
     d86:	01 96       	adiw	r24, 0x01	; 1
     d88:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
     d8c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
		if(pressed_confidence_level > PRESS_CONF){
     d90:	c3 97       	sbiw	r24, 0x33	; 51
     d92:	0c f4       	brge	.+2      	; 0xd96 <movement+0x5e>
     d94:	6f c0       	rjmp	.+222    	; 0xe74 <movement+0x13c>
			go_right();
     d96:	0e 94 27 04 	call	0x84e	; 0x84e <go_right>
			pressed_confidence_level = 0;
     d9a:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <__data_end+0x1>
     d9e:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
     da2:	68 c0       	rjmp	.+208    	; 0xe74 <movement+0x13c>
		}
		// go_right();
		// _delay_ms(200);
	}
	else if(ADC_Value_X > 900){
     da4:	c5 38       	cpi	r28, 0x85	; 133
     da6:	83 e0       	ldi	r24, 0x03	; 3
     da8:	d8 07       	cpc	r29, r24
     daa:	9c f0       	brlt	.+38     	; 0xdd2 <movement+0x9a>
		pressed_confidence_level++;
     dac:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
     db0:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
     dba:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
		if(pressed_confidence_level > PRESS_CONF){
     dbe:	c3 97       	sbiw	r24, 0x33	; 51
     dc0:	0c f4       	brge	.+2      	; 0xdc4 <movement+0x8c>
     dc2:	58 c0       	rjmp	.+176    	; 0xe74 <movement+0x13c>
			go_down();
     dc4:	0e 94 49 04 	call	0x892	; 0x892 <go_down>
			pressed_confidence_level = 0;
     dc8:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <__data_end+0x1>
     dcc:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
     dd0:	51 c0       	rjmp	.+162    	; 0xe74 <movement+0x13c>
		}
		// go_down();
		// _delay_ms(100);
	}
	else if(ADC_Value_X < 100){
     dd2:	c4 36       	cpi	r28, 0x64	; 100
     dd4:	d1 05       	cpc	r29, r1
     dd6:	0c f0       	brlt	.+2      	; 0xdda <movement+0xa2>
     dd8:	4d c0       	rjmp	.+154    	; 0xe74 <movement+0x13c>
		pressed_confidence_level++;
     dda:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
     dde:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
     de2:	01 96       	adiw	r24, 0x01	; 1
     de4:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
     de8:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
		if(pressed_confidence_level > PRESS_CONF+20){
     dec:	87 34       	cpi	r24, 0x47	; 71
     dee:	91 05       	cpc	r25, r1
     df0:	0c f4       	brge	.+2      	; 0xdf4 <movement+0xbc>
     df2:	40 c0       	rjmp	.+128    	; 0xe74 <movement+0x13c>
			rotate_shape(current_shape_array);
     df4:	8a ef       	ldi	r24, 0xFA	; 250
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	0e 94 c6 01 	call	0x38c	; 0x38c <rotate_shape>
			remove_shape(current_shape_array);
     dfc:	8a ef       	ldi	r24, 0xFA	; 250
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	0e 94 ed 02 	call	0x5da	; 0x5da <remove_shape>
			if(check_valid(current_R, current_C, temp_shape_array) == TRUE){
     e04:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <current_C>
     e08:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <current_C+0x1>
     e0c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <current_R>
     e10:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <current_R+0x1>
     e14:	4a ee       	ldi	r20, 0xEA	; 234
     e16:	51 e0       	ldi	r21, 0x01	; 1
     e18:	0e 94 77 02 	call	0x4ee	; 0x4ee <check_valid>
     e1c:	8f 3f       	cpi	r24, 0xFF	; 255
     e1e:	11 f5       	brne	.+68     	; 0xe64 <movement+0x12c>
     e20:	1c c0       	rjmp	.+56     	; 0xe5a <movement+0x122>
				for(int i = 0 ; i < 4; i++){
					for(int j = 0; j < 4; j++){
						current_shape_array[i][j] = temp_shape_array[i][j];
     e22:	cb 01       	movw	r24, r22
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	fc 01       	movw	r30, r24
     e2e:	e6 51       	subi	r30, 0x16	; 22
     e30:	fe 4f       	sbci	r31, 0xFE	; 254
     e32:	e2 0f       	add	r30, r18
     e34:	f3 1f       	adc	r31, r19
     e36:	40 81       	ld	r20, Z
     e38:	86 50       	subi	r24, 0x06	; 6
     e3a:	9e 4f       	sbci	r25, 0xFE	; 254
     e3c:	fc 01       	movw	r30, r24
     e3e:	e2 0f       	add	r30, r18
     e40:	f3 1f       	adc	r31, r19
     e42:	40 83       	st	Z, r20
		if(pressed_confidence_level > PRESS_CONF+20){
			rotate_shape(current_shape_array);
			remove_shape(current_shape_array);
			if(check_valid(current_R, current_C, temp_shape_array) == TRUE){
				for(int i = 0 ; i < 4; i++){
					for(int j = 0; j < 4; j++){
     e44:	2f 5f       	subi	r18, 0xFF	; 255
     e46:	3f 4f       	sbci	r19, 0xFF	; 255
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <movement+0x116>
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	24 30       	cpi	r18, 0x04	; 4
     e50:	31 05       	cpc	r19, r1
     e52:	3c f3       	brlt	.-50     	; 0xe22 <movement+0xea>
		pressed_confidence_level++;
		if(pressed_confidence_level > PRESS_CONF+20){
			rotate_shape(current_shape_array);
			remove_shape(current_shape_array);
			if(check_valid(current_R, current_C, temp_shape_array) == TRUE){
				for(int i = 0 ; i < 4; i++){
     e54:	6f 5f       	subi	r22, 0xFF	; 255
     e56:	7f 4f       	sbci	r23, 0xFF	; 255
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <movement+0x126>
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	64 30       	cpi	r22, 0x04	; 4
     e60:	71 05       	cpc	r23, r1
     e62:	9c f3       	brlt	.-26     	; 0xe4a <movement+0x112>
					for(int j = 0; j < 4; j++){
						current_shape_array[i][j] = temp_shape_array[i][j];
					}
				}
			}
			set_shape(current_shape_array);
     e64:	8a ef       	ldi	r24, 0xFA	; 250
     e66:	91 e0       	ldi	r25, 0x01	; 1
     e68:	0e 94 b8 02 	call	0x570	; 0x570 <set_shape>
			
			pressed_confidence_level = 0;
     e6c:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <__data_end+0x1>
     e70:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
			// }
		// }
		// set_shape(current_shape_array);
		// _delay_ms(250);
	}
}
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	08 95       	ret

00000e7a <mcu_init>:

void mcu_init(){
	MCUCSR |= 1<<JTD;
     e7a:	84 b7       	in	r24, 0x34	; 52
     e7c:	80 68       	ori	r24, 0x80	; 128
     e7e:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= 1<<JTD;
     e80:	84 b7       	in	r24, 0x34	; 52
     e82:	80 68       	ori	r24, 0x80	; 128
     e84:	84 bf       	out	0x34, r24	; 52
	DDRA = 0b11111100;
     e86:	8c ef       	ldi	r24, 0xFC	; 252
     e88:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
     e8a:	8f ef       	ldi	r24, 0xFF	; 255
     e8c:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
     e8e:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
     e90:	81 bb       	out	0x11, r24	; 17
	PORTA &= 0b11111011; // for buzzer 
     e92:	8b b3       	in	r24, 0x1b	; 27
     e94:	8b 7f       	andi	r24, 0xFB	; 251
     e96:	8b bb       	out	0x1b, r24	; 27
     e98:	08 95       	ret

00000e9a <main>:
}
int main(void)
{
	srand(time(NULL));
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 49 00 	call	0x92	; 0x92 <time>
     ea2:	cb 01       	movw	r24, r22
     ea4:	0e 94 16 08 	call	0x102c	; 0x102c <srand>
	mcu_init();
     ea8:	0e 94 3d 07 	call	0xe7a	; 0xe7a <mcu_init>
	int i = 7, count = 0; //r = 0;
	ADC_Init();
     eac:	0e 94 5c 00 	call	0xb8	; 0xb8 <ADC_Init>
	UART_init();
     eb0:	0e 94 74 00 	call	0xe8	; 0xe8 <UART_init>
	new_game();
     eb4:	0e 94 29 06 	call	0xc52	; 0xc52 <new_game>
}
int main(void)
{
	srand(time(NULL));
	mcu_init();
	int i = 7, count = 0; //r = 0;
     eb8:	00 e0       	ldi	r16, 0x00	; 0
     eba:	10 e0       	ldi	r17, 0x00	; 0
     ebc:	c7 e0       	ldi	r28, 0x07	; 7
     ebe:	d0 e0       	ldi	r29, 0x00	; 0
	ADC_Init();
	UART_init();
	new_game();
	while (1)
	{
		display(i);
     ec0:	ce 01       	movw	r24, r28
     ec2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <display>
		if(i == 7) i = 0;
     ec6:	c7 30       	cpi	r28, 0x07	; 7
     ec8:	d1 05       	cpc	r29, r1
     eca:	11 f0       	breq	.+4      	; 0xed0 <main+0x36>
		else i++;
     ecc:	21 96       	adiw	r28, 0x01	; 1
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <main+0x3a>
	UART_init();
	new_game();
	while (1)
	{
		display(i);
		if(i == 7) i = 0;
     ed0:	c0 e0       	ldi	r28, 0x00	; 0
     ed2:	d0 e0       	ldi	r29, 0x00	; 0
		else i++;
		//_delay_us(1500);
		new_piece();
     ed4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <new_piece>
		//new_piece(r);
		//r++;
		//if(r == 100) r = 0;
		count++;
     ed8:	0f 5f       	subi	r16, 0xFF	; 255
     eda:	1f 4f       	sbci	r17, 0xFF	; 255
		if(count == count_speed){
     edc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count_speed>
     ee0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <count_speed+0x1>
     ee4:	08 17       	cp	r16, r24
     ee6:	19 07       	cpc	r17, r25
     ee8:	29 f5       	brne	.+74     	; 0xf34 <main+0x9a>
			go_down();
     eea:	0e 94 49 04 	call	0x892	; 0x892 <go_down>
			count_count++;
     eee:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <count_count>
     ef2:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <count_count+0x1>
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <count_count+0x1>
     efc:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <count_count>
			count = 0;
			if(count_count == 50){
     f00:	c2 97       	sbiw	r24, 0x32	; 50
     f02:	81 f4       	brne	.+32     	; 0xf24 <main+0x8a>
				count_count = 0;
     f04:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <count_count+0x1>
     f08:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <count_count>
				if(count_speed >=100)
     f0c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count_speed>
     f10:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <count_speed+0x1>
     f14:	84 36       	cpi	r24, 0x64	; 100
     f16:	91 05       	cpc	r25, r1
     f18:	2c f0       	brlt	.+10     	; 0xf24 <main+0x8a>
					count_speed -= 50;
     f1a:	c2 97       	sbiw	r24, 0x32	; 50
     f1c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <count_speed+0x1>
     f20:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <count_speed>
     f24:	81 ee       	ldi	r24, 0xE1	; 225
     f26:	94 e0       	ldi	r25, 0x04	; 4
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <main+0x8e>
     f2c:	00 c0       	rjmp	.+0      	; 0xf2e <main+0x94>
     f2e:	00 00       	nop
		//if(r == 100) r = 0;
		count++;
		if(count == count_speed){
			go_down();
			count_count++;
			count = 0;
     f30:	00 e0       	ldi	r16, 0x00	; 0
     f32:	10 e0       	ldi	r17, 0x00	; 0
				if(count_speed >=100)
					count_speed -= 50;
			}
			_delay_ms(5);
		}
		movement();
     f34:	0e 94 9c 06 	call	0xd38	; 0xd38 <movement>
	}
     f38:	c3 cf       	rjmp	.-122    	; 0xec0 <main+0x26>

00000f3a <__divmodhi4>:
     f3a:	97 fb       	bst	r25, 7
     f3c:	07 2e       	mov	r0, r23
     f3e:	16 f4       	brtc	.+4      	; 0xf44 <__divmodhi4+0xa>
     f40:	00 94       	com	r0
     f42:	07 d0       	rcall	.+14     	; 0xf52 <__divmodhi4_neg1>
     f44:	77 fd       	sbrc	r23, 7
     f46:	09 d0       	rcall	.+18     	; 0xf5a <__divmodhi4_neg2>
     f48:	0e 94 b1 07 	call	0xf62	; 0xf62 <__udivmodhi4>
     f4c:	07 fc       	sbrc	r0, 7
     f4e:	05 d0       	rcall	.+10     	; 0xf5a <__divmodhi4_neg2>
     f50:	3e f4       	brtc	.+14     	; 0xf60 <__divmodhi4_exit>

00000f52 <__divmodhi4_neg1>:
     f52:	90 95       	com	r25
     f54:	81 95       	neg	r24
     f56:	9f 4f       	sbci	r25, 0xFF	; 255
     f58:	08 95       	ret

00000f5a <__divmodhi4_neg2>:
     f5a:	70 95       	com	r23
     f5c:	61 95       	neg	r22
     f5e:	7f 4f       	sbci	r23, 0xFF	; 255

00000f60 <__divmodhi4_exit>:
     f60:	08 95       	ret

00000f62 <__udivmodhi4>:
     f62:	aa 1b       	sub	r26, r26
     f64:	bb 1b       	sub	r27, r27
     f66:	51 e1       	ldi	r21, 0x11	; 17
     f68:	07 c0       	rjmp	.+14     	; 0xf78 <__udivmodhi4_ep>

00000f6a <__udivmodhi4_loop>:
     f6a:	aa 1f       	adc	r26, r26
     f6c:	bb 1f       	adc	r27, r27
     f6e:	a6 17       	cp	r26, r22
     f70:	b7 07       	cpc	r27, r23
     f72:	10 f0       	brcs	.+4      	; 0xf78 <__udivmodhi4_ep>
     f74:	a6 1b       	sub	r26, r22
     f76:	b7 0b       	sbc	r27, r23

00000f78 <__udivmodhi4_ep>:
     f78:	88 1f       	adc	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	5a 95       	dec	r21
     f7e:	a9 f7       	brne	.-22     	; 0xf6a <__udivmodhi4_loop>
     f80:	80 95       	com	r24
     f82:	90 95       	com	r25
     f84:	bc 01       	movw	r22, r24
     f86:	cd 01       	movw	r24, r26
     f88:	08 95       	ret

00000f8a <do_rand>:
     f8a:	8f 92       	push	r8
     f8c:	9f 92       	push	r9
     f8e:	af 92       	push	r10
     f90:	bf 92       	push	r11
     f92:	cf 92       	push	r12
     f94:	df 92       	push	r13
     f96:	ef 92       	push	r14
     f98:	ff 92       	push	r15
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	ec 01       	movw	r28, r24
     fa0:	68 81       	ld	r22, Y
     fa2:	79 81       	ldd	r23, Y+1	; 0x01
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	9b 81       	ldd	r25, Y+3	; 0x03
     fa8:	61 15       	cp	r22, r1
     faa:	71 05       	cpc	r23, r1
     fac:	81 05       	cpc	r24, r1
     fae:	91 05       	cpc	r25, r1
     fb0:	21 f4       	brne	.+8      	; 0xfba <do_rand+0x30>
     fb2:	64 e2       	ldi	r22, 0x24	; 36
     fb4:	79 ed       	ldi	r23, 0xD9	; 217
     fb6:	8b e5       	ldi	r24, 0x5B	; 91
     fb8:	97 e0       	ldi	r25, 0x07	; 7
     fba:	2d e1       	ldi	r18, 0x1D	; 29
     fbc:	33 ef       	ldi	r19, 0xF3	; 243
     fbe:	41 e0       	ldi	r20, 0x01	; 1
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	0e 94 21 08 	call	0x1042	; 0x1042 <__divmodsi4>
     fc6:	49 01       	movw	r8, r18
     fc8:	5a 01       	movw	r10, r20
     fca:	9b 01       	movw	r18, r22
     fcc:	ac 01       	movw	r20, r24
     fce:	a7 ea       	ldi	r26, 0xA7	; 167
     fd0:	b1 e4       	ldi	r27, 0x41	; 65
     fd2:	0e 94 40 08 	call	0x1080	; 0x1080 <__muluhisi3>
     fd6:	6b 01       	movw	r12, r22
     fd8:	7c 01       	movw	r14, r24
     fda:	ac ee       	ldi	r26, 0xEC	; 236
     fdc:	b4 ef       	ldi	r27, 0xF4	; 244
     fde:	a5 01       	movw	r20, r10
     fe0:	94 01       	movw	r18, r8
     fe2:	0e 94 4e 08 	call	0x109c	; 0x109c <__mulohisi3>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	8c 0d       	add	r24, r12
     fec:	9d 1d       	adc	r25, r13
     fee:	ae 1d       	adc	r26, r14
     ff0:	bf 1d       	adc	r27, r15
     ff2:	b7 ff       	sbrs	r27, 7
     ff4:	03 c0       	rjmp	.+6      	; 0xffc <do_rand+0x72>
     ff6:	01 97       	sbiw	r24, 0x01	; 1
     ff8:	a1 09       	sbc	r26, r1
     ffa:	b0 48       	sbci	r27, 0x80	; 128
     ffc:	88 83       	st	Y, r24
     ffe:	99 83       	std	Y+1, r25	; 0x01
    1000:	aa 83       	std	Y+2, r26	; 0x02
    1002:	bb 83       	std	Y+3, r27	; 0x03
    1004:	9f 77       	andi	r25, 0x7F	; 127
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	ff 90       	pop	r15
    100c:	ef 90       	pop	r14
    100e:	df 90       	pop	r13
    1010:	cf 90       	pop	r12
    1012:	bf 90       	pop	r11
    1014:	af 90       	pop	r10
    1016:	9f 90       	pop	r9
    1018:	8f 90       	pop	r8
    101a:	08 95       	ret

0000101c <rand_r>:
    101c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <do_rand>
    1020:	08 95       	ret

00001022 <rand>:
    1022:	80 e6       	ldi	r24, 0x60	; 96
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	0e 94 c5 07 	call	0xf8a	; 0xf8a <do_rand>
    102a:	08 95       	ret

0000102c <srand>:
    102c:	a0 e0       	ldi	r26, 0x00	; 0
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    1034:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1038:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    103c:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    1040:	08 95       	ret

00001042 <__divmodsi4>:
    1042:	05 2e       	mov	r0, r21
    1044:	97 fb       	bst	r25, 7
    1046:	1e f4       	brtc	.+6      	; 0x104e <__divmodsi4+0xc>
    1048:	00 94       	com	r0
    104a:	0e 94 38 08 	call	0x1070	; 0x1070 <__negsi2>
    104e:	57 fd       	sbrc	r21, 7
    1050:	07 d0       	rcall	.+14     	; 0x1060 <__divmodsi4_neg2>
    1052:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__udivmodsi4>
    1056:	07 fc       	sbrc	r0, 7
    1058:	03 d0       	rcall	.+6      	; 0x1060 <__divmodsi4_neg2>
    105a:	4e f4       	brtc	.+18     	; 0x106e <__divmodsi4_exit>
    105c:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__negsi2>

00001060 <__divmodsi4_neg2>:
    1060:	50 95       	com	r21
    1062:	40 95       	com	r20
    1064:	30 95       	com	r19
    1066:	21 95       	neg	r18
    1068:	3f 4f       	sbci	r19, 0xFF	; 255
    106a:	4f 4f       	sbci	r20, 0xFF	; 255
    106c:	5f 4f       	sbci	r21, 0xFF	; 255

0000106e <__divmodsi4_exit>:
    106e:	08 95       	ret

00001070 <__negsi2>:
    1070:	90 95       	com	r25
    1072:	80 95       	com	r24
    1074:	70 95       	com	r23
    1076:	61 95       	neg	r22
    1078:	7f 4f       	sbci	r23, 0xFF	; 255
    107a:	8f 4f       	sbci	r24, 0xFF	; 255
    107c:	9f 4f       	sbci	r25, 0xFF	; 255
    107e:	08 95       	ret

00001080 <__muluhisi3>:
    1080:	0e 94 75 08 	call	0x10ea	; 0x10ea <__umulhisi3>
    1084:	a5 9f       	mul	r26, r21
    1086:	90 0d       	add	r25, r0
    1088:	b4 9f       	mul	r27, r20
    108a:	90 0d       	add	r25, r0
    108c:	a4 9f       	mul	r26, r20
    108e:	80 0d       	add	r24, r0
    1090:	91 1d       	adc	r25, r1
    1092:	11 24       	eor	r1, r1
    1094:	08 95       	ret

00001096 <__mulshisi3>:
    1096:	b7 ff       	sbrs	r27, 7
    1098:	0c 94 40 08 	jmp	0x1080	; 0x1080 <__muluhisi3>

0000109c <__mulohisi3>:
    109c:	0e 94 40 08 	call	0x1080	; 0x1080 <__muluhisi3>
    10a0:	82 1b       	sub	r24, r18
    10a2:	93 0b       	sbc	r25, r19
    10a4:	08 95       	ret

000010a6 <__udivmodsi4>:
    10a6:	a1 e2       	ldi	r26, 0x21	; 33
    10a8:	1a 2e       	mov	r1, r26
    10aa:	aa 1b       	sub	r26, r26
    10ac:	bb 1b       	sub	r27, r27
    10ae:	fd 01       	movw	r30, r26
    10b0:	0d c0       	rjmp	.+26     	; 0x10cc <__udivmodsi4_ep>

000010b2 <__udivmodsi4_loop>:
    10b2:	aa 1f       	adc	r26, r26
    10b4:	bb 1f       	adc	r27, r27
    10b6:	ee 1f       	adc	r30, r30
    10b8:	ff 1f       	adc	r31, r31
    10ba:	a2 17       	cp	r26, r18
    10bc:	b3 07       	cpc	r27, r19
    10be:	e4 07       	cpc	r30, r20
    10c0:	f5 07       	cpc	r31, r21
    10c2:	20 f0       	brcs	.+8      	; 0x10cc <__udivmodsi4_ep>
    10c4:	a2 1b       	sub	r26, r18
    10c6:	b3 0b       	sbc	r27, r19
    10c8:	e4 0b       	sbc	r30, r20
    10ca:	f5 0b       	sbc	r31, r21

000010cc <__udivmodsi4_ep>:
    10cc:	66 1f       	adc	r22, r22
    10ce:	77 1f       	adc	r23, r23
    10d0:	88 1f       	adc	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	1a 94       	dec	r1
    10d6:	69 f7       	brne	.-38     	; 0x10b2 <__udivmodsi4_loop>
    10d8:	60 95       	com	r22
    10da:	70 95       	com	r23
    10dc:	80 95       	com	r24
    10de:	90 95       	com	r25
    10e0:	9b 01       	movw	r18, r22
    10e2:	ac 01       	movw	r20, r24
    10e4:	bd 01       	movw	r22, r26
    10e6:	cf 01       	movw	r24, r30
    10e8:	08 95       	ret

000010ea <__umulhisi3>:
    10ea:	a2 9f       	mul	r26, r18
    10ec:	b0 01       	movw	r22, r0
    10ee:	b3 9f       	mul	r27, r19
    10f0:	c0 01       	movw	r24, r0
    10f2:	a3 9f       	mul	r26, r19
    10f4:	70 0d       	add	r23, r0
    10f6:	81 1d       	adc	r24, r1
    10f8:	11 24       	eor	r1, r1
    10fa:	91 1d       	adc	r25, r1
    10fc:	b2 9f       	mul	r27, r18
    10fe:	70 0d       	add	r23, r0
    1100:	81 1d       	adc	r24, r1
    1102:	11 24       	eor	r1, r1
    1104:	91 1d       	adc	r25, r1
    1106:	08 95       	ret

00001108 <_exit>:
    1108:	f8 94       	cli

0000110a <__stop_program>:
    110a:	ff cf       	rjmp	.-2      	; 0x110a <__stop_program>
