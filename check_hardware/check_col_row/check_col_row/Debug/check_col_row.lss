
check_col_row.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ef8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014a  00800060  00000ef8  00000f8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a8  008001aa  008001aa  000010d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001108  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001691  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d8  00000000  00000000  00002885  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d91  00000000  00000000  0000305d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00003df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057a  00000000  00000000  00003fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012ad  00000000  00000000  0000455a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  00005807  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3a       	cpi	r26, 0xAA	; 170
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	aa ea       	ldi	r26, 0xAA	; 170
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 35       	cpi	r26, 0x52	; 82
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 92 05 	call	0xb24	; 0xb24 <main>
  8a:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <time>:
  92:	fc 01       	movw	r30, r24
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	60 91 4e 02 	lds	r22, 0x024E	; 0x80024e <__system_time>
  9c:	70 91 4f 02 	lds	r23, 0x024F	; 0x80024f <__system_time+0x1>
  a0:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <__system_time+0x2>
  a4:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <__system_time+0x3>
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	30 97       	sbiw	r30, 0x00	; 0
  ac:	21 f0       	breq	.+8      	; 0xb6 <time+0x24>
  ae:	60 83       	st	Z, r22
  b0:	71 83       	std	Z+1, r23	; 0x01
  b2:	82 83       	std	Z+2, r24	; 0x02
  b4:	93 83       	std	Z+3, r25	; 0x03
  b6:	08 95       	ret

000000b8 <UART_init>:
	
	int UBBRValue = 25;//AS described before setting baud rate

	//Put the upper part of the baud number here (bits 8 to 11)

	UBRRH = (unsigned char) (UBBRValue >> 8);
  b8:	10 bc       	out	0x20, r1	; 32

	//Put the remaining part of the baud number here

	UBRRL = (unsigned char) UBBRValue;
  ba:	89 e1       	ldi	r24, 0x19	; 25
  bc:	89 b9       	out	0x09, r24	; 9

	//Enable the receiver and transmitter

	UCSRB = (1 << TXEN);
  be:	88 e0       	ldi	r24, 0x08	; 8
  c0:	8a b9       	out	0x0a, r24	; 10

	//Set 2 stop bits and data bit length is 8-bit

	//UCSRC = (1 << USBS) | (3 << UCSZ0);
	UCSRC = 0b10001110;
  c2:	8e e8       	ldi	r24, 0x8E	; 142
  c4:	80 bd       	out	0x20, r24	; 32
  c6:	08 95       	ret

000000c8 <UART_send>:
}

void UART_send(unsigned char data){
	// wait until UDRE flag is set to logic 1
	while ((UCSRA & (1<<UDRE)) == 0x00);
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <UART_send>
	UDR = data; // Write character to UDR for transmission
  cc:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	87 ee       	ldi	r24, 0xE7	; 231
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <UART_send+0xa>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <UART_send+0x10>
  d8:	00 00       	nop
  da:	08 95       	ret

000000dc <row_shift>:
	
}


void row_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
  dc:	cf 92       	push	r12
  de:	df 92       	push	r13
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
	for(int counter=0; counter<shift_count; counter++){
  ec:	c1 2c       	mov	r12, r1
  ee:	d1 2c       	mov	r13, r1
  f0:	47 c0       	rjmp	.+142    	; 0x180 <row_shift+0xa4>
		int index = 0;
		if (direction>0){
  f2:	14 16       	cp	r1, r20
  f4:	15 06       	cpc	r1, r21
  f6:	24 f4       	brge	.+8      	; 0x100 <row_shift+0x24>
			index = length-1;
  f8:	8c 01       	movw	r16, r24
  fa:	01 50       	subi	r16, 0x01	; 1
  fc:	11 09       	sbc	r17, r1
  fe:	02 c0       	rjmp	.+4      	; 0x104 <row_shift+0x28>


void row_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
	for(int counter=0; counter<shift_count; counter++){
		int index = 0;
 100:	00 e0       	ldi	r16, 0x00	; 0
 102:	10 e0       	ldi	r17, 0x00	; 0
 104:	e1 2c       	mov	r14, r1
 106:	f1 2c       	mov	r15, r1
 108:	22 c0       	rjmp	.+68     	; 0x14e <row_shift+0x72>
			index = length-1;
		}

		for (int i=0; i<length-1; i++){
			for (int j=0; j<length; j++){
				shape_array[index][j] = shape_array[index-direction][j];
 10a:	d8 01       	movw	r26, r16
 10c:	aa 0f       	add	r26, r26
 10e:	bb 1f       	adc	r27, r27
 110:	aa 0f       	add	r26, r26
 112:	bb 1f       	adc	r27, r27
 114:	a6 0f       	add	r26, r22
 116:	b7 1f       	adc	r27, r23
 118:	f8 01       	movw	r30, r16
 11a:	e4 1b       	sub	r30, r20
 11c:	f5 0b       	sbc	r31, r21
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	e6 0f       	add	r30, r22
 128:	f7 1f       	adc	r31, r23
 12a:	ec 0f       	add	r30, r28
 12c:	fd 1f       	adc	r31, r29
 12e:	e0 81       	ld	r30, Z
 130:	ac 0f       	add	r26, r28
 132:	bd 1f       	adc	r27, r29
 134:	ec 93       	st	X, r30
		if (direction>0){
			index = length-1;
		}

		for (int i=0; i<length-1; i++){
			for (int j=0; j<length; j++){
 136:	21 96       	adiw	r28, 0x01	; 1
 138:	02 c0       	rjmp	.+4      	; 0x13e <row_shift+0x62>
 13a:	c0 e0       	ldi	r28, 0x00	; 0
 13c:	d0 e0       	ldi	r29, 0x00	; 0
 13e:	c8 17       	cp	r28, r24
 140:	d9 07       	cpc	r29, r25
 142:	1c f3       	brlt	.-58     	; 0x10a <row_shift+0x2e>
				shape_array[index][j] = shape_array[index-direction][j];
			}
			index = index - direction;
 144:	04 1b       	sub	r16, r20
 146:	15 0b       	sbc	r17, r21
		int index = 0;
		if (direction>0){
			index = length-1;
		}

		for (int i=0; i<length-1; i++){
 148:	ef ef       	ldi	r30, 0xFF	; 255
 14a:	ee 1a       	sub	r14, r30
 14c:	fe 0a       	sbc	r15, r30
 14e:	fc 01       	movw	r30, r24
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	ee 16       	cp	r14, r30
 154:	ff 06       	cpc	r15, r31
 156:	8c f3       	brlt	.-30     	; 0x13a <row_shift+0x5e>
 158:	a0 e0       	ldi	r26, 0x00	; 0
 15a:	b0 e0       	ldi	r27, 0x00	; 0
 15c:	0b c0       	rjmp	.+22     	; 0x174 <row_shift+0x98>
				shape_array[index][j] = shape_array[index-direction][j];
			}
			index = index - direction;
		}
		for (int j=0; j<length; j++){
			shape_array[index][j] = FALSE;
 15e:	f8 01       	movw	r30, r16
 160:	ee 0f       	add	r30, r30
 162:	ff 1f       	adc	r31, r31
 164:	ee 0f       	add	r30, r30
 166:	ff 1f       	adc	r31, r31
 168:	e6 0f       	add	r30, r22
 16a:	f7 1f       	adc	r31, r23
 16c:	ea 0f       	add	r30, r26
 16e:	fb 1f       	adc	r31, r27
 170:	10 82       	st	Z, r1
			for (int j=0; j<length; j++){
				shape_array[index][j] = shape_array[index-direction][j];
			}
			index = index - direction;
		}
		for (int j=0; j<length; j++){
 172:	11 96       	adiw	r26, 0x01	; 1
 174:	a8 17       	cp	r26, r24
 176:	b9 07       	cpc	r27, r25
 178:	94 f3       	brlt	.-28     	; 0x15e <row_shift+0x82>
}


void row_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
	for(int counter=0; counter<shift_count; counter++){
 17a:	ef ef       	ldi	r30, 0xFF	; 255
 17c:	ce 1a       	sub	r12, r30
 17e:	de 0a       	sbc	r13, r30
 180:	c2 16       	cp	r12, r18
 182:	d3 06       	cpc	r13, r19
 184:	0c f4       	brge	.+2      	; 0x188 <row_shift+0xac>
 186:	b5 cf       	rjmp	.-150    	; 0xf2 <row_shift+0x16>
		}
		for (int j=0; j<length; j++){
			shape_array[index][j] = FALSE;
		}
	}
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	df 90       	pop	r13
 196:	cf 90       	pop	r12
 198:	08 95       	ret

0000019a <col_shift>:

void col_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
 19a:	af 92       	push	r10
 19c:	bf 92       	push	r11
 19e:	cf 92       	push	r12
 1a0:	df 92       	push	r13
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	5c 01       	movw	r10, r24
 1b0:	79 01       	movw	r14, r18
	for(int counter=0; counter<shift_count; counter++){
 1b2:	00 e0       	ldi	r16, 0x00	; 0
 1b4:	10 e0       	ldi	r17, 0x00	; 0
 1b6:	40 c0       	rjmp	.+128    	; 0x238 <col_shift+0x9e>
		int index = 0;
		if (direction>0){
 1b8:	14 16       	cp	r1, r20
 1ba:	15 06       	cpc	r1, r21
 1bc:	1c f4       	brge	.+6      	; 0x1c4 <col_shift+0x2a>
			index = length-1;
 1be:	c5 01       	movw	r24, r10
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <col_shift+0x2e>
}

void col_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
	for(int counter=0; counter<shift_count; counter++){
		int index = 0;
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	1c c0       	rjmp	.+56     	; 0x206 <col_shift+0x6c>
			index = length-1;
		}

		for (int j=0; j<length-1; j++){
			for (int i=0; i<length; i++){
				shape_array[i][index] = shape_array[i][index-direction];
 1ce:	fd 01       	movw	r30, r26
 1d0:	ee 0f       	add	r30, r30
 1d2:	ff 1f       	adc	r31, r31
 1d4:	ee 0f       	add	r30, r30
 1d6:	ff 1f       	adc	r31, r31
 1d8:	e6 0f       	add	r30, r22
 1da:	f7 1f       	adc	r31, r23
 1dc:	6c 01       	movw	r12, r24
 1de:	c4 1a       	sub	r12, r20
 1e0:	d5 0a       	sbc	r13, r21
 1e2:	ce 0e       	add	r12, r30
 1e4:	df 1e       	adc	r13, r31
 1e6:	e6 01       	movw	r28, r12
 1e8:	d8 80       	ld	r13, Y
 1ea:	e8 0f       	add	r30, r24
 1ec:	f9 1f       	adc	r31, r25
 1ee:	d0 82       	st	Z, r13
		if (direction>0){
			index = length-1;
		}

		for (int j=0; j<length-1; j++){
			for (int i=0; i<length; i++){
 1f0:	11 96       	adiw	r26, 0x01	; 1
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <col_shift+0x5e>
 1f4:	a0 e0       	ldi	r26, 0x00	; 0
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	aa 15       	cp	r26, r10
 1fa:	bb 05       	cpc	r27, r11
 1fc:	44 f3       	brlt	.-48     	; 0x1ce <col_shift+0x34>
				shape_array[i][index] = shape_array[i][index-direction];
			}
			index = index - direction;
 1fe:	84 1b       	sub	r24, r20
 200:	95 0b       	sbc	r25, r21
		int index = 0;
		if (direction>0){
			index = length-1;
		}

		for (int j=0; j<length-1; j++){
 202:	2f 5f       	subi	r18, 0xFF	; 255
 204:	3f 4f       	sbci	r19, 0xFF	; 255
 206:	f5 01       	movw	r30, r10
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	2e 17       	cp	r18, r30
 20c:	3f 07       	cpc	r19, r31
 20e:	94 f3       	brlt	.-28     	; 0x1f4 <col_shift+0x5a>
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	0c c0       	rjmp	.+24     	; 0x22e <col_shift+0x94>
				shape_array[i][index] = shape_array[i][index-direction];
			}
			index = index - direction;
		}
		for (int i=0; i<length; i++){
			shape_array[i][index] = FALSE;
 216:	f9 01       	movw	r30, r18
 218:	ee 0f       	add	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	ee 0f       	add	r30, r30
 21e:	ff 1f       	adc	r31, r31
 220:	e6 0f       	add	r30, r22
 222:	f7 1f       	adc	r31, r23
 224:	e8 0f       	add	r30, r24
 226:	f9 1f       	adc	r31, r25
 228:	10 82       	st	Z, r1
			for (int i=0; i<length; i++){
				shape_array[i][index] = shape_array[i][index-direction];
			}
			index = index - direction;
		}
		for (int i=0; i<length; i++){
 22a:	2f 5f       	subi	r18, 0xFF	; 255
 22c:	3f 4f       	sbci	r19, 0xFF	; 255
 22e:	2a 15       	cp	r18, r10
 230:	3b 05       	cpc	r19, r11
 232:	8c f3       	brlt	.-30     	; 0x216 <col_shift+0x7c>
	}
}

void col_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
	for(int counter=0; counter<shift_count; counter++){
 234:	0f 5f       	subi	r16, 0xFF	; 255
 236:	1f 4f       	sbci	r17, 0xFF	; 255
 238:	0e 15       	cp	r16, r14
 23a:	1f 05       	cpc	r17, r15
 23c:	0c f4       	brge	.+2      	; 0x240 <col_shift+0xa6>
 23e:	bc cf       	rjmp	.-136    	; 0x1b8 <col_shift+0x1e>
		}
		for (int i=0; i<length; i++){
			shape_array[i][index] = FALSE;
		}
	}
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	df 90       	pop	r13
 24e:	cf 90       	pop	r12
 250:	bf 90       	pop	r11
 252:	af 90       	pop	r10
 254:	08 95       	ret

00000256 <align_top_left_justify>:

void align_top_left_justify(bool shape_array[][4])
{
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	ec 01       	movw	r28, r24
	//top left justify shape after rotation
	//top
	int shift_count = -1;
	int shift_direction = UP;
	for (int i=0; i<4; i++){
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0

void align_top_left_justify(bool shape_array[][4])
{
	//top left justify shape after rotation
	//top
	int shift_count = -1;
 264:	0f ef       	ldi	r16, 0xFF	; 255
 266:	1f ef       	ldi	r17, 0xFF	; 255
	int shift_direction = UP;
	for (int i=0; i<4; i++){
 268:	1b c0       	rjmp	.+54     	; 0x2a0 <align_top_left_justify+0x4a>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
 26a:	f9 01       	movw	r30, r18
 26c:	ee 0f       	add	r30, r30
 26e:	ff 1f       	adc	r31, r31
 270:	ee 0f       	add	r30, r30
 272:	ff 1f       	adc	r31, r31
 274:	ec 0f       	add	r30, r28
 276:	fd 1f       	adc	r31, r29
 278:	e8 0f       	add	r30, r24
 27a:	f9 1f       	adc	r31, r25
 27c:	40 81       	ld	r20, Z
 27e:	4f 3f       	cpi	r20, 0xFF	; 255
 280:	41 f0       	breq	.+16     	; 0x292 <align_top_left_justify+0x3c>
	//top left justify shape after rotation
	//top
	int shift_count = -1;
	int shift_direction = UP;
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	02 c0       	rjmp	.+4      	; 0x28a <align_top_left_justify+0x34>
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	84 30       	cpi	r24, 0x04	; 4
 28c:	91 05       	cpc	r25, r1
 28e:	6c f3       	brlt	.-38     	; 0x26a <align_top_left_justify+0x14>
 290:	01 c0       	rjmp	.+2      	; 0x294 <align_top_left_justify+0x3e>
			if(shape_array[i][j] == TRUE){
				shift_count = i;
 292:	89 01       	movw	r16, r18
				break;
			}
		}
		if (shift_count != -1){
 294:	0f 3f       	cpi	r16, 0xFF	; 255
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	18 07       	cpc	r17, r24
 29a:	29 f4       	brne	.+10     	; 0x2a6 <align_top_left_justify+0x50>
{
	//top left justify shape after rotation
	//top
	int shift_count = -1;
	int shift_direction = UP;
	for (int i=0; i<4; i++){
 29c:	2f 5f       	subi	r18, 0xFF	; 255
 29e:	3f 4f       	sbci	r19, 0xFF	; 255
 2a0:	24 30       	cpi	r18, 0x04	; 4
 2a2:	31 05       	cpc	r19, r1
 2a4:	84 f3       	brlt	.-32     	; 0x286 <align_top_left_justify+0x30>
		}
		if (shift_count != -1){
			break;
		}
	}
	row_shift(4, shape_array,shift_direction,shift_count);
 2a6:	98 01       	movw	r18, r16
 2a8:	4f ef       	ldi	r20, 0xFF	; 255
 2aa:	5f ef       	ldi	r21, 0xFF	; 255
 2ac:	be 01       	movw	r22, r28
 2ae:	84 e0       	ldi	r24, 0x04	; 4
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 6e 00 	call	0xdc	; 0xdc <row_shift>
	
	//left justify
	int width = 0;
	int w1 = -1, w2 = -1;
	for (int j=0; j<4; j++){
 2b6:	20 e0       	ldi	r18, 0x00	; 0
 2b8:	30 e0       	ldi	r19, 0x00	; 0
	}
	row_shift(4, shape_array,shift_direction,shift_count);
	
	//left justify
	int width = 0;
	int w1 = -1, w2 = -1;
 2ba:	6f ef       	ldi	r22, 0xFF	; 255
 2bc:	7f ef       	ldi	r23, 0xFF	; 255
 2be:	af ef       	ldi	r26, 0xFF	; 255
 2c0:	bf ef       	ldi	r27, 0xFF	; 255
	for (int j=0; j<4; j++){
 2c2:	25 c0       	rjmp	.+74     	; 0x30e <align_top_left_justify+0xb8>
		for (int i=0; i<4; i++){
			if(shape_array[i][j] == TRUE){
 2c4:	fc 01       	movw	r30, r24
 2c6:	ee 0f       	add	r30, r30
 2c8:	ff 1f       	adc	r31, r31
 2ca:	ee 0f       	add	r30, r30
 2cc:	ff 1f       	adc	r31, r31
 2ce:	ec 0f       	add	r30, r28
 2d0:	fd 1f       	adc	r31, r29
 2d2:	e2 0f       	add	r30, r18
 2d4:	f3 1f       	adc	r31, r19
 2d6:	40 81       	ld	r20, Z
 2d8:	4f 3f       	cpi	r20, 0xFF	; 255
 2da:	31 f4       	brne	.+12     	; 0x2e8 <align_top_left_justify+0x92>
				if(w1 == -1){
 2dc:	af 3f       	cpi	r26, 0xFF	; 255
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	b8 07       	cpc	r27, r24
 2e2:	51 f0       	breq	.+20     	; 0x2f8 <align_top_left_justify+0xa2>
					w1 = j;
				}
				w2 = j;
 2e4:	b9 01       	movw	r22, r18
 2e6:	0a c0       	rjmp	.+20     	; 0x2fc <align_top_left_justify+0xa6>
	
	//left justify
	int width = 0;
	int w1 = -1, w2 = -1;
	for (int j=0; j<4; j++){
		for (int i=0; i<4; i++){
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <align_top_left_justify+0x9a>
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	84 30       	cpi	r24, 0x04	; 4
 2f2:	91 05       	cpc	r25, r1
 2f4:	3c f3       	brlt	.-50     	; 0x2c4 <align_top_left_justify+0x6e>
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <align_top_left_justify+0xa6>
			if(shape_array[i][j] == TRUE){
				if(w1 == -1){
					w1 = j;
				}
				w2 = j;
 2f8:	b9 01       	movw	r22, r18
	int w1 = -1, w2 = -1;
	for (int j=0; j<4; j++){
		for (int i=0; i<4; i++){
			if(shape_array[i][j] == TRUE){
				if(w1 == -1){
					w1 = j;
 2fa:	d9 01       	movw	r26, r18
				}
				w2 = j;
				break;
			}
		}
		if((w1 != -1) && (w2<j)){
 2fc:	af 3f       	cpi	r26, 0xFF	; 255
 2fe:	8f ef       	ldi	r24, 0xFF	; 255
 300:	b8 07       	cpc	r27, r24
 302:	19 f0       	breq	.+6      	; 0x30a <align_top_left_justify+0xb4>
 304:	62 17       	cp	r22, r18
 306:	73 07       	cpc	r23, r19
 308:	2c f0       	brlt	.+10     	; 0x314 <align_top_left_justify+0xbe>
	row_shift(4, shape_array,shift_direction,shift_count);
	
	//left justify
	int width = 0;
	int w1 = -1, w2 = -1;
	for (int j=0; j<4; j++){
 30a:	2f 5f       	subi	r18, 0xFF	; 255
 30c:	3f 4f       	sbci	r19, 0xFF	; 255
 30e:	24 30       	cpi	r18, 0x04	; 4
 310:	31 05       	cpc	r19, r1
 312:	64 f3       	brlt	.-40     	; 0x2ec <align_top_left_justify+0x96>
		}
		if((w1 != -1) && (w2<j)){
			break;
		}
	}
	width = w2 - w1 + 1;
 314:	6a 1b       	sub	r22, r26
 316:	7b 0b       	sbc	r23, r27
 318:	cb 01       	movw	r24, r22
 31a:	01 96       	adiw	r24, 0x01	; 1
	if(width == 1 || width == 2){
 31c:	62 30       	cpi	r22, 0x02	; 2
 31e:	71 05       	cpc	r23, r1
 320:	20 f4       	brcc	.+8      	; 0x32a <align_top_left_justify+0xd4>
		shift_count = w1 - 1;
 322:	8d 01       	movw	r16, r26
 324:	01 50       	subi	r16, 0x01	; 1
 326:	11 09       	sbc	r17, r1
 328:	04 c0       	rjmp	.+8      	; 0x332 <align_top_left_justify+0xdc>
	}
	else if(width == 3 || width == 4){
 32a:	03 97       	sbiw	r24, 0x03	; 3
 32c:	02 97       	sbiw	r24, 0x02	; 2
 32e:	08 f4       	brcc	.+2      	; 0x332 <align_top_left_justify+0xdc>
		shift_count = w1 - 0;
 330:	8d 01       	movw	r16, r26
	}
	if(shift_count<0){
 332:	11 23       	and	r17, r17
 334:	34 f4       	brge	.+12     	; 0x342 <align_top_left_justify+0xec>
		shift_count = -shift_count;
 336:	11 95       	neg	r17
 338:	01 95       	neg	r16
 33a:	11 09       	sbc	r17, r1
		shift_direction = RIGHT;
 33c:	41 e0       	ldi	r20, 0x01	; 1
 33e:	50 e0       	ldi	r21, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <align_top_left_justify+0xf0>
	}
	else{
		shift_direction = LEFT;
 342:	4f ef       	ldi	r20, 0xFF	; 255
 344:	5f ef       	ldi	r21, 0xFF	; 255
	}
	col_shift(4,shape_array,shift_direction,shift_count);
 346:	98 01       	movw	r18, r16
 348:	be 01       	movw	r22, r28
 34a:	84 e0       	ldi	r24, 0x04	; 4
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 cd 00 	call	0x19a	; 0x19a <col_shift>
}
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	08 95       	ret

0000035c <rotate_shape>:

void rotate_shape(bool shape_array[][4])
{
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
 364:	60 97       	sbiw	r28, 0x10	; 16
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	f8 94       	cli
 36a:	de bf       	out	0x3e, r29	; 62
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	cd bf       	out	0x3d, r28	; 61
 370:	dc 01       	movw	r26, r24
	//rotate clockwise.
	//transpose, mirror.
	bool temp[4][4];
	
	for (int i=0; i<4; i++){
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	1f c0       	rjmp	.+62     	; 0x3b6 <rotate_shape+0x5a>
		for (int j=0; j<4; j++){
			temp[i][j] = shape_array[i][j];	//copy
 378:	9b 01       	movw	r18, r22
 37a:	22 0f       	add	r18, r18
 37c:	33 1f       	adc	r19, r19
 37e:	22 0f       	add	r18, r18
 380:	33 1f       	adc	r19, r19
 382:	fd 01       	movw	r30, r26
 384:	e2 0f       	add	r30, r18
 386:	f3 1f       	adc	r31, r19
 388:	e4 0f       	add	r30, r20
 38a:	f5 1f       	adc	r31, r21
 38c:	90 81       	ld	r25, Z
 38e:	e1 e0       	ldi	r30, 0x01	; 1
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	ec 0f       	add	r30, r28
 394:	fd 1f       	adc	r31, r29
 396:	2e 0f       	add	r18, r30
 398:	3f 1f       	adc	r19, r31
 39a:	f9 01       	movw	r30, r18
 39c:	e4 0f       	add	r30, r20
 39e:	f5 1f       	adc	r31, r21
 3a0:	90 83       	st	Z, r25
	//rotate clockwise.
	//transpose, mirror.
	bool temp[4][4];
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 3a2:	4f 5f       	subi	r20, 0xFF	; 255
 3a4:	5f 4f       	sbci	r21, 0xFF	; 255
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <rotate_shape+0x50>
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	50 e0       	ldi	r21, 0x00	; 0
 3ac:	44 30       	cpi	r20, 0x04	; 4
 3ae:	51 05       	cpc	r21, r1
 3b0:	1c f3       	brlt	.-58     	; 0x378 <rotate_shape+0x1c>
{
	//rotate clockwise.
	//transpose, mirror.
	bool temp[4][4];
	
	for (int i=0; i<4; i++){
 3b2:	6f 5f       	subi	r22, 0xFF	; 255
 3b4:	7f 4f       	sbci	r23, 0xFF	; 255
 3b6:	64 30       	cpi	r22, 0x04	; 4
 3b8:	71 05       	cpc	r23, r1
 3ba:	b4 f3       	brlt	.-20     	; 0x3a8 <rotate_shape+0x4c>
 3bc:	20 e0       	ldi	r18, 0x00	; 0
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	21 c0       	rjmp	.+66     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		}
	}
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
			temp_shape_array[i][j] = temp[j][i];	//transpose
 3c2:	fc 01       	movw	r30, r24
 3c4:	ee 0f       	add	r30, r30
 3c6:	ff 1f       	adc	r31, r31
 3c8:	ee 0f       	add	r30, r30
 3ca:	ff 1f       	adc	r31, r31
 3cc:	41 e0       	ldi	r20, 0x01	; 1
 3ce:	50 e0       	ldi	r21, 0x00	; 0
 3d0:	4c 0f       	add	r20, r28
 3d2:	5d 1f       	adc	r21, r29
 3d4:	e4 0f       	add	r30, r20
 3d6:	f5 1f       	adc	r31, r21
 3d8:	e2 0f       	add	r30, r18
 3da:	f3 1f       	adc	r31, r19
 3dc:	40 81       	ld	r20, Z
 3de:	f9 01       	movw	r30, r18
 3e0:	ee 0f       	add	r30, r30
 3e2:	ff 1f       	adc	r31, r31
 3e4:	ee 0f       	add	r30, r30
 3e6:	ff 1f       	adc	r31, r31
 3e8:	e2 5d       	subi	r30, 0xD2	; 210
 3ea:	fd 4f       	sbci	r31, 0xFD	; 253
 3ec:	e8 0f       	add	r30, r24
 3ee:	f9 1f       	adc	r31, r25
 3f0:	40 83       	st	Z, r20
			temp[i][j] = shape_array[i][j];	//copy
		}
	}
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <rotate_shape+0x9e>
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	84 30       	cpi	r24, 0x04	; 4
 3fc:	91 05       	cpc	r25, r1
 3fe:	0c f3       	brlt	.-62     	; 0x3c2 <rotate_shape+0x66>
		for (int j=0; j<4; j++){
			temp[i][j] = shape_array[i][j];	//copy
		}
	}
	
	for (int i=0; i<4; i++){
 400:	2f 5f       	subi	r18, 0xFF	; 255
 402:	3f 4f       	sbci	r19, 0xFF	; 255
 404:	24 30       	cpi	r18, 0x04	; 4
 406:	31 05       	cpc	r19, r1
 408:	b4 f3       	brlt	.-20     	; 0x3f6 <rotate_shape+0x9a>
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	1f c0       	rjmp	.+62     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
		}
	}
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
			temp[i][j] = temp_shape_array[i][j];
 410:	cb 01       	movw	r24, r22
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	fc 01       	movw	r30, r24
 41c:	e2 5d       	subi	r30, 0xD2	; 210
 41e:	fd 4f       	sbci	r31, 0xFD	; 253
 420:	e2 0f       	add	r30, r18
 422:	f3 1f       	adc	r31, r19
 424:	40 81       	ld	r20, Z
 426:	e1 e0       	ldi	r30, 0x01	; 1
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	ec 0f       	add	r30, r28
 42c:	fd 1f       	adc	r31, r29
 42e:	8e 0f       	add	r24, r30
 430:	9f 1f       	adc	r25, r31
 432:	fc 01       	movw	r30, r24
 434:	e2 0f       	add	r30, r18
 436:	f3 1f       	adc	r31, r19
 438:	40 83       	st	Z, r20
			temp_shape_array[i][j] = temp[j][i];	//transpose
		}
	}
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 43a:	2f 5f       	subi	r18, 0xFF	; 255
 43c:	3f 4f       	sbci	r19, 0xFF	; 255
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 440:	20 e0       	ldi	r18, 0x00	; 0
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	24 30       	cpi	r18, 0x04	; 4
 446:	31 05       	cpc	r19, r1
 448:	1c f3       	brlt	.-58     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
		for (int j=0; j<4; j++){
			temp_shape_array[i][j] = temp[j][i];	//transpose
		}
	}
	
	for (int i=0; i<4; i++){
 44a:	6f 5f       	subi	r22, 0xFF	; 255
 44c:	7f 4f       	sbci	r23, 0xFF	; 255
 44e:	64 30       	cpi	r22, 0x04	; 4
 450:	71 05       	cpc	r23, r1
 452:	b4 f3       	brlt	.-20     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	22 c0       	rjmp	.+68     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
		}
	}

	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
			temp_shape_array[i][j] = temp[i][3-j];	//mirror
 45a:	e3 e0       	ldi	r30, 0x03	; 3
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	e2 1b       	sub	r30, r18
 460:	f3 0b       	sbc	r31, r19
 462:	cb 01       	movw	r24, r22
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	41 e0       	ldi	r20, 0x01	; 1
 46e:	50 e0       	ldi	r21, 0x00	; 0
 470:	4c 0f       	add	r20, r28
 472:	5d 1f       	adc	r21, r29
 474:	48 0f       	add	r20, r24
 476:	59 1f       	adc	r21, r25
 478:	e4 0f       	add	r30, r20
 47a:	f5 1f       	adc	r31, r21
 47c:	40 81       	ld	r20, Z
 47e:	82 5d       	subi	r24, 0xD2	; 210
 480:	9d 4f       	sbci	r25, 0xFD	; 253
 482:	fc 01       	movw	r30, r24
 484:	e2 0f       	add	r30, r18
 486:	f3 1f       	adc	r31, r19
 488:	40 83       	st	Z, r20
			temp[i][j] = temp_shape_array[i][j];
		}
	}

	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 48a:	2f 5f       	subi	r18, 0xFF	; 255
 48c:	3f 4f       	sbci	r19, 0xFF	; 255
 48e:	02 c0       	rjmp	.+4      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	24 30       	cpi	r18, 0x04	; 4
 496:	31 05       	cpc	r19, r1
 498:	04 f3       	brlt	.-64     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
		for (int j=0; j<4; j++){
			temp[i][j] = temp_shape_array[i][j];
		}
	}

	for (int i=0; i<4; i++){
 49a:	6f 5f       	subi	r22, 0xFF	; 255
 49c:	7f 4f       	sbci	r23, 0xFF	; 255
 49e:	64 30       	cpi	r22, 0x04	; 4
 4a0:	71 05       	cpc	r23, r1
 4a2:	b4 f3       	brlt	.-20     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
		for (int j=0; j<4; j++){
			temp_shape_array[i][j] = temp[i][3-j];	//mirror
		}
	}
	align_top_left_justify(temp_shape_array);
 4a4:	8e e2       	ldi	r24, 0x2E	; 46
 4a6:	92 e0       	ldi	r25, 0x02	; 2
 4a8:	0e 94 2b 01 	call	0x256	; 0x256 <align_top_left_justify>
}
 4ac:	60 96       	adiw	r28, 0x10	; 16
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	f8 94       	cli
 4b2:	de bf       	out	0x3e, r29	; 62
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	cd bf       	out	0x3d, r28	; 61
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	08 95       	ret

000004be <check_valid>:

bool check_valid(int row, int col, bool shape_array[][4])
{
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
 4c2:	ec 01       	movw	r28, r24
	for(int i=0; i<4; i++){
 4c4:	a0 e0       	ldi	r26, 0x00	; 0
 4c6:	b0 e0       	ldi	r27, 0x00	; 0
 4c8:	2e c0       	rjmp	.+92     	; 0x526 <check_valid+0x68>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
 4ca:	fd 01       	movw	r30, r26
 4cc:	ee 0f       	add	r30, r30
 4ce:	ff 1f       	adc	r31, r31
 4d0:	ee 0f       	add	r30, r30
 4d2:	ff 1f       	adc	r31, r31
 4d4:	e4 0f       	add	r30, r20
 4d6:	f5 1f       	adc	r31, r21
 4d8:	e2 0f       	add	r30, r18
 4da:	f3 1f       	adc	r31, r19
 4dc:	90 81       	ld	r25, Z
 4de:	9f 3f       	cpi	r25, 0xFF	; 255
 4e0:	c9 f4       	brne	.+50     	; 0x514 <check_valid+0x56>
				if((row+i) > 15){
 4e2:	fd 01       	movw	r30, r26
 4e4:	ec 0f       	add	r30, r28
 4e6:	fd 1f       	adc	r31, r29
 4e8:	e0 31       	cpi	r30, 0x10	; 16
 4ea:	f1 05       	cpc	r31, r1
 4ec:	0c f5       	brge	.+66     	; 0x530 <check_valid+0x72>
					//bottom row reached
					//invalid
					return FALSE;
				}
				if((col+j) < 0 || (col+j) > 7){
 4ee:	c9 01       	movw	r24, r18
 4f0:	86 0f       	add	r24, r22
 4f2:	97 1f       	adc	r25, r23
 4f4:	88 30       	cpi	r24, 0x08	; 8
 4f6:	91 05       	cpc	r25, r1
 4f8:	e8 f4       	brcc	.+58     	; 0x534 <check_valid+0x76>
					//left/right col reached
					//invalid
					return FALSE;
				}
				if(current_display[row+i][col+j] == TRUE){
 4fa:	ee 0f       	add	r30, r30
 4fc:	ff 1f       	adc	r31, r31
 4fe:	ee 0f       	add	r30, r30
 500:	ff 1f       	adc	r31, r31
 502:	ee 0f       	add	r30, r30
 504:	ff 1f       	adc	r31, r31
 506:	e2 55       	subi	r30, 0x52	; 82
 508:	fe 4f       	sbci	r31, 0xFE	; 254
 50a:	e8 0f       	add	r30, r24
 50c:	f9 1f       	adc	r31, r25
 50e:	80 81       	ld	r24, Z
 510:	8f 3f       	cpi	r24, 0xFF	; 255
 512:	91 f0       	breq	.+36     	; 0x538 <check_valid+0x7a>
}

bool check_valid(int row, int col, bool shape_array[][4])
{
	for(int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 514:	2f 5f       	subi	r18, 0xFF	; 255
 516:	3f 4f       	sbci	r19, 0xFF	; 255
 518:	02 c0       	rjmp	.+4      	; 0x51e <check_valid+0x60>
 51a:	20 e0       	ldi	r18, 0x00	; 0
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	24 30       	cpi	r18, 0x04	; 4
 520:	31 05       	cpc	r19, r1
 522:	9c f2       	brlt	.-90     	; 0x4ca <check_valid+0xc>
	align_top_left_justify(temp_shape_array);
}

bool check_valid(int row, int col, bool shape_array[][4])
{
	for(int i=0; i<4; i++){
 524:	11 96       	adiw	r26, 0x01	; 1
 526:	a4 30       	cpi	r26, 0x04	; 4
 528:	b1 05       	cpc	r27, r1
 52a:	bc f3       	brlt	.-18     	; 0x51a <check_valid+0x5c>
					return FALSE;
				}
			}
		}
	}
	return TRUE;
 52c:	8f ef       	ldi	r24, 0xFF	; 255
 52e:	05 c0       	rjmp	.+10     	; 0x53a <check_valid+0x7c>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
				if((row+i) > 15){
					//bottom row reached
					//invalid
					return FALSE;
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	03 c0       	rjmp	.+6      	; 0x53a <check_valid+0x7c>
				}
				if((col+j) < 0 || (col+j) > 7){
					//left/right col reached
					//invalid
					return FALSE;
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	01 c0       	rjmp	.+2      	; 0x53a <check_valid+0x7c>
				}
				if(current_display[row+i][col+j] == TRUE){
					//position filled
					//invalid
					return FALSE;
 538:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
	return TRUE;
}
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <set_shape>:

void set_shape(bool shape_array[][4])
{
 540:	dc 01       	movw	r26, r24
	for(int i=0; i<4; i++){
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	2d c0       	rjmp	.+90     	; 0x5a2 <set_shape+0x62>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
 548:	fb 01       	movw	r30, r22
 54a:	ee 0f       	add	r30, r30
 54c:	ff 1f       	adc	r31, r31
 54e:	ee 0f       	add	r30, r30
 550:	ff 1f       	adc	r31, r31
 552:	ea 0f       	add	r30, r26
 554:	fb 1f       	adc	r31, r27
 556:	e2 0f       	add	r30, r18
 558:	f3 1f       	adc	r31, r19
 55a:	90 81       	ld	r25, Z
 55c:	9f 3f       	cpi	r25, 0xFF	; 255
 55e:	b9 f4       	brne	.+46     	; 0x58e <set_shape+0x4e>
				current_display[current_R+i][current_C+j] = shape_array[i][j];
 560:	40 91 ac 01 	lds	r20, 0x01AC	; 0x8001ac <current_R>
 564:	50 91 ad 01 	lds	r21, 0x01AD	; 0x8001ad <current_R+0x1>
 568:	46 0f       	add	r20, r22
 56a:	57 1f       	adc	r21, r23
 56c:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <current_C>
 570:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <current_C+0x1>
 574:	e2 0f       	add	r30, r18
 576:	f3 1f       	adc	r31, r19
 578:	44 0f       	add	r20, r20
 57a:	55 1f       	adc	r21, r21
 57c:	44 0f       	add	r20, r20
 57e:	55 1f       	adc	r21, r21
 580:	44 0f       	add	r20, r20
 582:	55 1f       	adc	r21, r21
 584:	42 55       	subi	r20, 0x52	; 82
 586:	5e 4f       	sbci	r21, 0xFE	; 254
 588:	e4 0f       	add	r30, r20
 58a:	f5 1f       	adc	r31, r21
 58c:	90 83       	st	Z, r25
}

void set_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 58e:	2f 5f       	subi	r18, 0xFF	; 255
 590:	3f 4f       	sbci	r19, 0xFF	; 255
 592:	02 c0       	rjmp	.+4      	; 0x598 <set_shape+0x58>
 594:	20 e0       	ldi	r18, 0x00	; 0
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	24 30       	cpi	r18, 0x04	; 4
 59a:	31 05       	cpc	r19, r1
 59c:	ac f2       	brlt	.-86     	; 0x548 <set_shape+0x8>
	return TRUE;
}

void set_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
 59e:	6f 5f       	subi	r22, 0xFF	; 255
 5a0:	7f 4f       	sbci	r23, 0xFF	; 255
 5a2:	64 30       	cpi	r22, 0x04	; 4
 5a4:	71 05       	cpc	r23, r1
 5a6:	b4 f3       	brlt	.-20     	; 0x594 <set_shape+0x54>
				current_display[current_R+i][current_C+j] = shape_array[i][j];
			}
		}
	}
	//_delay_ms(50);
}
 5a8:	08 95       	ret

000005aa <remove_shape>:
void remove_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
 5aa:	60 e0       	ldi	r22, 0x00	; 0
 5ac:	70 e0       	ldi	r23, 0x00	; 0
 5ae:	2d c0       	rjmp	.+90     	; 0x60a <remove_shape+0x60>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
 5b0:	fb 01       	movw	r30, r22
 5b2:	ee 0f       	add	r30, r30
 5b4:	ff 1f       	adc	r31, r31
 5b6:	ee 0f       	add	r30, r30
 5b8:	ff 1f       	adc	r31, r31
 5ba:	e8 0f       	add	r30, r24
 5bc:	f9 1f       	adc	r31, r25
 5be:	e2 0f       	add	r30, r18
 5c0:	f3 1f       	adc	r31, r19
 5c2:	40 81       	ld	r20, Z
 5c4:	4f 3f       	cpi	r20, 0xFF	; 255
 5c6:	b9 f4       	brne	.+46     	; 0x5f6 <remove_shape+0x4c>
				current_display[current_R+i][current_C+j] = FALSE;
 5c8:	40 91 ac 01 	lds	r20, 0x01AC	; 0x8001ac <current_R>
 5cc:	50 91 ad 01 	lds	r21, 0x01AD	; 0x8001ad <current_R+0x1>
 5d0:	46 0f       	add	r20, r22
 5d2:	57 1f       	adc	r21, r23
 5d4:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <current_C>
 5d8:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <current_C+0x1>
 5dc:	e2 0f       	add	r30, r18
 5de:	f3 1f       	adc	r31, r19
 5e0:	44 0f       	add	r20, r20
 5e2:	55 1f       	adc	r21, r21
 5e4:	44 0f       	add	r20, r20
 5e6:	55 1f       	adc	r21, r21
 5e8:	44 0f       	add	r20, r20
 5ea:	55 1f       	adc	r21, r21
 5ec:	42 55       	subi	r20, 0x52	; 82
 5ee:	5e 4f       	sbci	r21, 0xFE	; 254
 5f0:	e4 0f       	add	r30, r20
 5f2:	f5 1f       	adc	r31, r21
 5f4:	10 82       	st	Z, r1
	//_delay_ms(50);
}
void remove_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 5f6:	2f 5f       	subi	r18, 0xFF	; 255
 5f8:	3f 4f       	sbci	r19, 0xFF	; 255
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <remove_shape+0x56>
 5fc:	20 e0       	ldi	r18, 0x00	; 0
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	24 30       	cpi	r18, 0x04	; 4
 602:	31 05       	cpc	r19, r1
 604:	ac f2       	brlt	.-86     	; 0x5b0 <remove_shape+0x6>
	}
	//_delay_ms(50);
}
void remove_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
 606:	6f 5f       	subi	r22, 0xFF	; 255
 608:	7f 4f       	sbci	r23, 0xFF	; 255
 60a:	64 30       	cpi	r22, 0x04	; 4
 60c:	71 05       	cpc	r23, r1
 60e:	b4 f3       	brlt	.-20     	; 0x5fc <remove_shape+0x52>
				current_display[current_R+i][current_C+j] = FALSE;
			}
		}
	}
	//_delay_ms(100);
}
 610:	08 95       	ret

00000612 <get_col>:

int get_col(int row)
{
 612:	ac 01       	movw	r20, r24
	int col_value = 0x00;
	for (int j=0; j<8; j++){
 614:	20 e0       	ldi	r18, 0x00	; 0
 616:	30 e0       	ldi	r19, 0x00	; 0
	//_delay_ms(100);
}

int get_col(int row)
{
	int col_value = 0x00;
 618:	a0 e0       	ldi	r26, 0x00	; 0
 61a:	b0 e0       	ldi	r27, 0x00	; 0
	for (int j=0; j<8; j++){
 61c:	1a c0       	rjmp	.+52     	; 0x652 <get_col+0x40>
		if(current_display[row][j] == TRUE){
 61e:	fa 01       	movw	r30, r20
 620:	ee 0f       	add	r30, r30
 622:	ff 1f       	adc	r31, r31
 624:	ee 0f       	add	r30, r30
 626:	ff 1f       	adc	r31, r31
 628:	ee 0f       	add	r30, r30
 62a:	ff 1f       	adc	r31, r31
 62c:	e2 55       	subi	r30, 0x52	; 82
 62e:	fe 4f       	sbci	r31, 0xFE	; 254
 630:	e2 0f       	add	r30, r18
 632:	f3 1f       	adc	r31, r19
 634:	90 81       	ld	r25, Z
 636:	9f 3f       	cpi	r25, 0xFF	; 255
 638:	51 f4       	brne	.+20     	; 0x64e <get_col+0x3c>
			col_value |= 1<<(j);
 63a:	61 e0       	ldi	r22, 0x01	; 1
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	02 2e       	mov	r0, r18
 640:	02 c0       	rjmp	.+4      	; 0x646 <get_col+0x34>
 642:	66 0f       	add	r22, r22
 644:	77 1f       	adc	r23, r23
 646:	0a 94       	dec	r0
 648:	e2 f7       	brpl	.-8      	; 0x642 <get_col+0x30>
 64a:	a6 2b       	or	r26, r22
 64c:	b7 2b       	or	r27, r23
}

int get_col(int row)
{
	int col_value = 0x00;
	for (int j=0; j<8; j++){
 64e:	2f 5f       	subi	r18, 0xFF	; 255
 650:	3f 4f       	sbci	r19, 0xFF	; 255
 652:	28 30       	cpi	r18, 0x08	; 8
 654:	31 05       	cpc	r19, r1
 656:	1c f3       	brlt	.-58     	; 0x61e <get_col+0xc>
		if(current_display[row][j] == TRUE){
			col_value |= 1<<(j);
		}
	}
	return col_value;
}
 658:	cd 01       	movw	r24, r26
 65a:	08 95       	ret

0000065c <remove_row>:

void remove_row(int row){
	//shift rows downwards from row to 1
	for(int i = row ; i > 0 ; i--){
 65c:	22 c0       	rjmp	.+68     	; 0x6a2 <remove_row+0x46>
		for(int j = 0 ; j< 8; j++){
			current_display[i][j] = current_display[i-1][j];
 65e:	fc 01       	movw	r30, r24
 660:	31 97       	sbiw	r30, 0x01	; 1
 662:	ee 0f       	add	r30, r30
 664:	ff 1f       	adc	r31, r31
 666:	ee 0f       	add	r30, r30
 668:	ff 1f       	adc	r31, r31
 66a:	ee 0f       	add	r30, r30
 66c:	ff 1f       	adc	r31, r31
 66e:	e2 55       	subi	r30, 0x52	; 82
 670:	fe 4f       	sbci	r31, 0xFE	; 254
 672:	e2 0f       	add	r30, r18
 674:	f3 1f       	adc	r31, r19
 676:	40 81       	ld	r20, Z
 678:	fc 01       	movw	r30, r24
 67a:	ee 0f       	add	r30, r30
 67c:	ff 1f       	adc	r31, r31
 67e:	ee 0f       	add	r30, r30
 680:	ff 1f       	adc	r31, r31
 682:	ee 0f       	add	r30, r30
 684:	ff 1f       	adc	r31, r31
 686:	e2 55       	subi	r30, 0x52	; 82
 688:	fe 4f       	sbci	r31, 0xFE	; 254
 68a:	e2 0f       	add	r30, r18
 68c:	f3 1f       	adc	r31, r19
 68e:	40 83       	st	Z, r20
}

void remove_row(int row){
	//shift rows downwards from row to 1
	for(int i = row ; i > 0 ; i--){
		for(int j = 0 ; j< 8; j++){
 690:	2f 5f       	subi	r18, 0xFF	; 255
 692:	3f 4f       	sbci	r19, 0xFF	; 255
 694:	02 c0       	rjmp	.+4      	; 0x69a <remove_row+0x3e>
 696:	20 e0       	ldi	r18, 0x00	; 0
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	28 30       	cpi	r18, 0x08	; 8
 69c:	31 05       	cpc	r19, r1
 69e:	fc f2       	brlt	.-66     	; 0x65e <remove_row+0x2>
	return col_value;
}

void remove_row(int row){
	//shift rows downwards from row to 1
	for(int i = row ; i > 0 ; i--){
 6a0:	01 97       	sbiw	r24, 0x01	; 1
 6a2:	18 16       	cp	r1, r24
 6a4:	19 06       	cpc	r1, r25
 6a6:	bc f3       	brlt	.-18     	; 0x696 <remove_row+0x3a>
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <remove_row+0x5c>
			current_display[i][j] = current_display[i-1][j];
		}
	}
	//put false in row 0
	for(int i = 0 ; i < 8; i++){
		current_display[0][i] = FALSE;
 6ae:	fc 01       	movw	r30, r24
 6b0:	e2 55       	subi	r30, 0x52	; 82
 6b2:	fe 4f       	sbci	r31, 0xFE	; 254
 6b4:	10 82       	st	Z, r1
		for(int j = 0 ; j< 8; j++){
			current_display[i][j] = current_display[i-1][j];
		}
	}
	//put false in row 0
	for(int i = 0 ; i < 8; i++){
 6b6:	01 96       	adiw	r24, 0x01	; 1
 6b8:	88 30       	cpi	r24, 0x08	; 8
 6ba:	91 05       	cpc	r25, r1
 6bc:	c4 f3       	brlt	.-16     	; 0x6ae <remove_row+0x52>
		current_display[0][i] = FALSE;
	}
}
 6be:	08 95       	ret

000006c0 <update_score1x>:
void update_score1x(){
 6c0:	cf 93       	push	r28
 6c2:	df 93       	push	r29
	uint8_t temp ;
	for(int i = 0 ; i < 16 ; i++){
 6c4:	c0 e0       	ldi	r28, 0x00	; 0
 6c6:	d0 e0       	ldi	r29, 0x00	; 0
 6c8:	1e c0       	rjmp	.+60     	; 0x706 <update_score1x+0x46>
		temp = TRUE;
		for(int j = 0 ; j < 8; j++){
			temp &= current_display[i][j];
 6ca:	fe 01       	movw	r30, r28
 6cc:	ee 0f       	add	r30, r30
 6ce:	ff 1f       	adc	r31, r31
 6d0:	ee 0f       	add	r30, r30
 6d2:	ff 1f       	adc	r31, r31
 6d4:	ee 0f       	add	r30, r30
 6d6:	ff 1f       	adc	r31, r31
 6d8:	e2 55       	subi	r30, 0x52	; 82
 6da:	fe 4f       	sbci	r31, 0xFE	; 254
 6dc:	e8 0f       	add	r30, r24
 6de:	f9 1f       	adc	r31, r25
 6e0:	30 81       	ld	r19, Z
 6e2:	23 23       	and	r18, r19
}
void update_score1x(){
	uint8_t temp ;
	for(int i = 0 ; i < 16 ; i++){
		temp = TRUE;
		for(int j = 0 ; j < 8; j++){
 6e4:	01 96       	adiw	r24, 0x01	; 1
 6e6:	03 c0       	rjmp	.+6      	; 0x6ee <update_score1x+0x2e>
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	2f ef       	ldi	r18, 0xFF	; 255
 6ee:	88 30       	cpi	r24, 0x08	; 8
 6f0:	91 05       	cpc	r25, r1
 6f2:	5c f3       	brlt	.-42     	; 0x6ca <update_score1x+0xa>
			temp &= current_display[i][j];
		}
		if(temp == TRUE){
 6f4:	2f 3f       	cpi	r18, 0xFF	; 255
 6f6:	31 f4       	brne	.+12     	; 0x704 <update_score1x+0x44>
			UART_send(10);
 6f8:	8a e0       	ldi	r24, 0x0A	; 10
 6fa:	0e 94 64 00 	call	0xc8	; 0xc8 <UART_send>
			PORTD |= 1 << PD7 ;
			_delay_ms(200);
			PORTD &= ~(1 << PD7);
			_delay_ms(200);
			*/
			remove_row(i);
 6fe:	ce 01       	movw	r24, r28
 700:	0e 94 2e 03 	call	0x65c	; 0x65c <remove_row>
		current_display[0][i] = FALSE;
	}
}
void update_score1x(){
	uint8_t temp ;
	for(int i = 0 ; i < 16 ; i++){
 704:	21 96       	adiw	r28, 0x01	; 1
 706:	c0 31       	cpi	r28, 0x10	; 16
 708:	d1 05       	cpc	r29, r1
 70a:	74 f3       	brlt	.-36     	; 0x6e8 <update_score1x+0x28>
			_delay_ms(200);
			*/
			remove_row(i);
		}
	}
}
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
 710:	08 95       	ret

00000712 <update_score2x>:
void update_score2x(){
 712:	0f 93       	push	r16
 714:	1f 93       	push	r17
 716:	cf 93       	push	r28
 718:	df 93       	push	r29
	uint8_t temp ;
	for(int i = 0 ; i < 12 ; i++){
 71a:	c0 e0       	ldi	r28, 0x00	; 0
 71c:	d0 e0       	ldi	r29, 0x00	; 0
 71e:	31 c0       	rjmp	.+98     	; 0x782 <update_score2x+0x70>
		temp = TRUE;
		int ii = i;
		for(int t = 0; t < 4; t++){
			for(int j = 0 ; j < 8; j++){
				temp &= current_display[ii][j];
 720:	fa 01       	movw	r30, r20
 722:	ee 0f       	add	r30, r30
 724:	ff 1f       	adc	r31, r31
 726:	ee 0f       	add	r30, r30
 728:	ff 1f       	adc	r31, r31
 72a:	ee 0f       	add	r30, r30
 72c:	ff 1f       	adc	r31, r31
 72e:	e2 55       	subi	r30, 0x52	; 82
 730:	fe 4f       	sbci	r31, 0xFE	; 254
 732:	e8 0f       	add	r30, r24
 734:	f9 1f       	adc	r31, r25
 736:	30 81       	ld	r19, Z
 738:	23 23       	and	r18, r19
	uint8_t temp ;
	for(int i = 0 ; i < 12 ; i++){
		temp = TRUE;
		int ii = i;
		for(int t = 0; t < 4; t++){
			for(int j = 0 ; j < 8; j++){
 73a:	01 96       	adiw	r24, 0x01	; 1
 73c:	02 c0       	rjmp	.+4      	; 0x742 <update_score2x+0x30>
 73e:	80 e0       	ldi	r24, 0x00	; 0
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	88 30       	cpi	r24, 0x08	; 8
 744:	91 05       	cpc	r25, r1
 746:	64 f3       	brlt	.-40     	; 0x720 <update_score2x+0xe>
				temp &= current_display[ii][j];
			}
			ii++;
 748:	4f 5f       	subi	r20, 0xFF	; 255
 74a:	5f 4f       	sbci	r21, 0xFF	; 255
void update_score2x(){
	uint8_t temp ;
	for(int i = 0 ; i < 12 ; i++){
		temp = TRUE;
		int ii = i;
		for(int t = 0; t < 4; t++){
 74c:	6f 5f       	subi	r22, 0xFF	; 255
 74e:	7f 4f       	sbci	r23, 0xFF	; 255
 750:	04 c0       	rjmp	.+8      	; 0x75a <update_score2x+0x48>
 752:	ae 01       	movw	r20, r28
 754:	60 e0       	ldi	r22, 0x00	; 0
 756:	70 e0       	ldi	r23, 0x00	; 0
 758:	2f ef       	ldi	r18, 0xFF	; 255
 75a:	64 30       	cpi	r22, 0x04	; 4
 75c:	71 05       	cpc	r23, r1
 75e:	7c f3       	brlt	.-34     	; 0x73e <update_score2x+0x2c>
			for(int j = 0 ; j < 8; j++){
				temp &= current_display[ii][j];
			}
			ii++;
		}
		if(temp == TRUE){
 760:	2f 3f       	cpi	r18, 0xFF	; 255
 762:	71 f4       	brne	.+28     	; 0x780 <update_score2x+0x6e>
			UART_send(11);
 764:	8b e0       	ldi	r24, 0x0B	; 11
 766:	0e 94 64 00 	call	0xc8	; 0xc8 <UART_send>
			PORTD |= 1 << PD7 ;
			_delay_ms(200);
			PORTD &= ~(1 << PD7);
			_delay_ms(200);
			*/
			for(int t = 0; t < 4; t++){
 76a:	00 e0       	ldi	r16, 0x00	; 0
 76c:	10 e0       	ldi	r17, 0x00	; 0
 76e:	05 c0       	rjmp	.+10     	; 0x77a <update_score2x+0x68>
				remove_row(i);
 770:	ce 01       	movw	r24, r28
 772:	0e 94 2e 03 	call	0x65c	; 0x65c <remove_row>
			PORTD |= 1 << PD7 ;
			_delay_ms(200);
			PORTD &= ~(1 << PD7);
			_delay_ms(200);
			*/
			for(int t = 0; t < 4; t++){
 776:	0f 5f       	subi	r16, 0xFF	; 255
 778:	1f 4f       	sbci	r17, 0xFF	; 255
 77a:	04 30       	cpi	r16, 0x04	; 4
 77c:	11 05       	cpc	r17, r1
 77e:	c4 f3       	brlt	.-16     	; 0x770 <update_score2x+0x5e>
		}
	}
}
void update_score2x(){
	uint8_t temp ;
	for(int i = 0 ; i < 12 ; i++){
 780:	21 96       	adiw	r28, 0x01	; 1
 782:	cc 30       	cpi	r28, 0x0C	; 12
 784:	d1 05       	cpc	r29, r1
 786:	2c f3       	brlt	.-54     	; 0x752 <update_score2x+0x40>
			for(int t = 0; t < 4; t++){
				remove_row(i);
			}
		}
	}
}
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	1f 91       	pop	r17
 78e:	0f 91       	pop	r16
 790:	08 95       	ret

00000792 <go_left>:
void go_left(){
	remove_shape(current_shape_array);
 792:	8e e3       	ldi	r24, 0x3E	; 62
 794:	92 e0       	ldi	r25, 0x02	; 2
 796:	0e 94 d5 02 	call	0x5aa	; 0x5aa <remove_shape>
	if(check_valid(current_R, current_C-1 , current_shape_array) == TRUE){
 79a:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <current_C>
 79e:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <current_C+0x1>
 7a2:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <current_R>
 7a6:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <current_R+0x1>
 7aa:	61 50       	subi	r22, 0x01	; 1
 7ac:	71 09       	sbc	r23, r1
 7ae:	4e e3       	ldi	r20, 0x3E	; 62
 7b0:	52 e0       	ldi	r21, 0x02	; 2
 7b2:	0e 94 5f 02 	call	0x4be	; 0x4be <check_valid>
 7b6:	8f 3f       	cpi	r24, 0xFF	; 255
 7b8:	49 f4       	brne	.+18     	; 0x7cc <go_left+0x3a>
		current_C--;
 7ba:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <current_C>
 7be:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <current_C+0x1>
 7c2:	01 97       	sbiw	r24, 0x01	; 1
 7c4:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <current_C+0x1>
 7c8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <current_C>
	}
	set_shape(current_shape_array);
 7cc:	8e e3       	ldi	r24, 0x3E	; 62
 7ce:	92 e0       	ldi	r25, 0x02	; 2
 7d0:	0e 94 a0 02 	call	0x540	; 0x540 <set_shape>
 7d4:	08 95       	ret

000007d6 <go_right>:
}
void go_right(){
	remove_shape(current_shape_array);
 7d6:	8e e3       	ldi	r24, 0x3E	; 62
 7d8:	92 e0       	ldi	r25, 0x02	; 2
 7da:	0e 94 d5 02 	call	0x5aa	; 0x5aa <remove_shape>
	if(check_valid(current_R, current_C+1 , current_shape_array) == TRUE){
 7de:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <current_C>
 7e2:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <current_C+0x1>
 7e6:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <current_R>
 7ea:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <current_R+0x1>
 7ee:	6f 5f       	subi	r22, 0xFF	; 255
 7f0:	7f 4f       	sbci	r23, 0xFF	; 255
 7f2:	4e e3       	ldi	r20, 0x3E	; 62
 7f4:	52 e0       	ldi	r21, 0x02	; 2
 7f6:	0e 94 5f 02 	call	0x4be	; 0x4be <check_valid>
 7fa:	8f 3f       	cpi	r24, 0xFF	; 255
 7fc:	49 f4       	brne	.+18     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
		current_C++;
 7fe:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <current_C>
 802:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <current_C+0x1>
 806:	01 96       	adiw	r24, 0x01	; 1
 808:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <current_C+0x1>
 80c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <current_C>
	}
	set_shape(current_shape_array);
 810:	8e e3       	ldi	r24, 0x3E	; 62
 812:	92 e0       	ldi	r25, 0x02	; 2
 814:	0e 94 a0 02 	call	0x540	; 0x540 <set_shape>
 818:	08 95       	ret

0000081a <go_down>:
}
void go_down(){
	remove_shape(current_shape_array);
 81a:	8e e3       	ldi	r24, 0x3E	; 62
 81c:	92 e0       	ldi	r25, 0x02	; 2
 81e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <remove_shape>
	if(check_valid(current_R+1, current_C , current_shape_array) == TRUE){
 822:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <current_C>
 826:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <current_C+0x1>
 82a:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <current_R>
 82e:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <current_R+0x1>
 832:	4e e3       	ldi	r20, 0x3E	; 62
 834:	52 e0       	ldi	r21, 0x02	; 2
 836:	01 96       	adiw	r24, 0x01	; 1
 838:	0e 94 5f 02 	call	0x4be	; 0x4be <check_valid>
 83c:	8f 3f       	cpi	r24, 0xFF	; 255
 83e:	71 f4       	brne	.+28     	; 0x85c <go_down+0x42>
		current_R++;
 840:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <current_R>
 844:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <current_R+0x1>
 848:	01 96       	adiw	r24, 0x01	; 1
 84a:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <current_R+0x1>
 84e:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <current_R>
		set_shape(current_shape_array);
 852:	8e e3       	ldi	r24, 0x3E	; 62
 854:	92 e0       	ldi	r25, 0x02	; 2
 856:	0e 94 a0 02 	call	0x540	; 0x540 <set_shape>
 85a:	08 95       	ret
	}
	else{
		set_shape(current_shape_array);
 85c:	8e e3       	ldi	r24, 0x3E	; 62
 85e:	92 e0       	ldi	r25, 0x02	; 2
 860:	0e 94 a0 02 	call	0x540	; 0x540 <set_shape>
		current_C = 2;
 864:	82 e0       	ldi	r24, 0x02	; 2
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <current_C+0x1>
 86c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <current_C>
		current_R = 0;
 870:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <current_R+0x1>
 874:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <current_R>
		for(int i = 0 ; i < 4; i++){
 878:	20 e0       	ldi	r18, 0x00	; 0
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	13 c0       	rjmp	.+38     	; 0x8a4 <__stack+0x45>
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = FALSE;
 87e:	f9 01       	movw	r30, r18
 880:	ee 0f       	add	r30, r30
 882:	ff 1f       	adc	r31, r31
 884:	ee 0f       	add	r30, r30
 886:	ff 1f       	adc	r31, r31
 888:	e2 5c       	subi	r30, 0xC2	; 194
 88a:	fd 4f       	sbci	r31, 0xFD	; 253
 88c:	e8 0f       	add	r30, r24
 88e:	f9 1f       	adc	r31, r25
 890:	10 82       	st	Z, r1
	else{
		set_shape(current_shape_array);
		current_C = 2;
		current_R = 0;
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
 892:	01 96       	adiw	r24, 0x01	; 1
 894:	02 c0       	rjmp	.+4      	; 0x89a <__stack+0x3b>
 896:	80 e0       	ldi	r24, 0x00	; 0
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	84 30       	cpi	r24, 0x04	; 4
 89c:	91 05       	cpc	r25, r1
 89e:	7c f3       	brlt	.-34     	; 0x87e <__stack+0x1f>
	}
	else{
		set_shape(current_shape_array);
		current_C = 2;
		current_R = 0;
		for(int i = 0 ; i < 4; i++){
 8a0:	2f 5f       	subi	r18, 0xFF	; 255
 8a2:	3f 4f       	sbci	r19, 0xFF	; 255
 8a4:	24 30       	cpi	r18, 0x04	; 4
 8a6:	31 05       	cpc	r19, r1
 8a8:	b4 f3       	brlt	.-20     	; 0x896 <__stack+0x37>
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = FALSE;
			}
		}
		current_shape = -1;
 8aa:	8f ef       	ldi	r24, 0xFF	; 255
 8ac:	9f ef       	ldi	r25, 0xFF	; 255
 8ae:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <current_shape+0x1>
 8b2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <current_shape>
		update_score2x();
 8b6:	0e 94 89 03 	call	0x712	; 0x712 <update_score2x>
		update_score1x();
 8ba:	0e 94 60 03 	call	0x6c0	; 0x6c0 <update_score1x>
 8be:	08 95       	ret

000008c0 <generate_shape>:
	}
}
void generate_shape(int shape){
	//int shape = 0;
	//int shape = rand()%7;
	current_shape = shape;
 8c0:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <current_shape+0x1>
 8c4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <current_shape>
	if( shape == 0){
 8c8:	00 97       	sbiw	r24, 0x00	; 0
 8ca:	e9 f0       	breq	.+58     	; 0x906 <generate_shape+0x46>
 8cc:	22 c0       	rjmp	.+68     	; 0x912 <generate_shape+0x52>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_O_array[i][j];
 8ce:	cb 01       	movw	r24, r22
 8d0:	88 0f       	add	r24, r24
 8d2:	99 1f       	adc	r25, r25
 8d4:	88 0f       	add	r24, r24
 8d6:	99 1f       	adc	r25, r25
 8d8:	fc 01       	movw	r30, r24
 8da:	e6 53       	subi	r30, 0x36	; 54
 8dc:	ff 4f       	sbci	r31, 0xFF	; 255
 8de:	e2 0f       	add	r30, r18
 8e0:	f3 1f       	adc	r31, r19
 8e2:	40 81       	ld	r20, Z
 8e4:	82 5c       	subi	r24, 0xC2	; 194
 8e6:	9d 4f       	sbci	r25, 0xFD	; 253
 8e8:	fc 01       	movw	r30, r24
 8ea:	e2 0f       	add	r30, r18
 8ec:	f3 1f       	adc	r31, r19
 8ee:	40 83       	st	Z, r20
	//int shape = 0;
	//int shape = rand()%7;
	current_shape = shape;
	if( shape == 0){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
 8f0:	2f 5f       	subi	r18, 0xFF	; 255
 8f2:	3f 4f       	sbci	r19, 0xFF	; 255
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <generate_shape+0x3a>
 8f6:	20 e0       	ldi	r18, 0x00	; 0
 8f8:	30 e0       	ldi	r19, 0x00	; 0
 8fa:	24 30       	cpi	r18, 0x04	; 4
 8fc:	31 05       	cpc	r19, r1
 8fe:	3c f3       	brlt	.-50     	; 0x8ce <generate_shape+0xe>
void generate_shape(int shape){
	//int shape = 0;
	//int shape = rand()%7;
	current_shape = shape;
	if( shape == 0){
		for(int i = 0 ; i < 4; i++){
 900:	6f 5f       	subi	r22, 0xFF	; 255
 902:	7f 4f       	sbci	r23, 0xFF	; 255
 904:	02 c0       	rjmp	.+4      	; 0x90a <generate_shape+0x4a>
 906:	60 e0       	ldi	r22, 0x00	; 0
 908:	70 e0       	ldi	r23, 0x00	; 0
 90a:	64 30       	cpi	r22, 0x04	; 4
 90c:	71 05       	cpc	r23, r1
 90e:	9c f3       	brlt	.-26     	; 0x8f6 <generate_shape+0x36>
 910:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_O_array[i][j];
			}
		}
	}
	else if(shape == 1){
 912:	81 30       	cpi	r24, 0x01	; 1
 914:	91 05       	cpc	r25, r1
 916:	19 f5       	brne	.+70     	; 0x95e <generate_shape+0x9e>
 918:	1c c0       	rjmp	.+56     	; 0x952 <generate_shape+0x92>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_I_array[i][j];
 91a:	cb 01       	movw	r24, r22
 91c:	88 0f       	add	r24, r24
 91e:	99 1f       	adc	r25, r25
 920:	88 0f       	add	r24, r24
 922:	99 1f       	adc	r25, r25
 924:	fc 01       	movw	r30, r24
 926:	e6 54       	subi	r30, 0x46	; 70
 928:	ff 4f       	sbci	r31, 0xFF	; 255
 92a:	e2 0f       	add	r30, r18
 92c:	f3 1f       	adc	r31, r19
 92e:	40 81       	ld	r20, Z
 930:	82 5c       	subi	r24, 0xC2	; 194
 932:	9d 4f       	sbci	r25, 0xFD	; 253
 934:	fc 01       	movw	r30, r24
 936:	e2 0f       	add	r30, r18
 938:	f3 1f       	adc	r31, r19
 93a:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 1){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
 93c:	2f 5f       	subi	r18, 0xFF	; 255
 93e:	3f 4f       	sbci	r19, 0xFF	; 255
 940:	02 c0       	rjmp	.+4      	; 0x946 <generate_shape+0x86>
 942:	20 e0       	ldi	r18, 0x00	; 0
 944:	30 e0       	ldi	r19, 0x00	; 0
 946:	24 30       	cpi	r18, 0x04	; 4
 948:	31 05       	cpc	r19, r1
 94a:	3c f3       	brlt	.-50     	; 0x91a <generate_shape+0x5a>
				current_shape_array[i][j] = shape_O_array[i][j];
			}
		}
	}
	else if(shape == 1){
		for(int i = 0 ; i < 4; i++){
 94c:	6f 5f       	subi	r22, 0xFF	; 255
 94e:	7f 4f       	sbci	r23, 0xFF	; 255
 950:	02 c0       	rjmp	.+4      	; 0x956 <generate_shape+0x96>
 952:	60 e0       	ldi	r22, 0x00	; 0
 954:	70 e0       	ldi	r23, 0x00	; 0
 956:	64 30       	cpi	r22, 0x04	; 4
 958:	71 05       	cpc	r23, r1
 95a:	9c f3       	brlt	.-26     	; 0x942 <generate_shape+0x82>
 95c:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_I_array[i][j];
			}
		}
	}
	else if(shape == 2){
 95e:	82 30       	cpi	r24, 0x02	; 2
 960:	91 05       	cpc	r25, r1
 962:	19 f5       	brne	.+70     	; 0x9aa <generate_shape+0xea>
 964:	1c c0       	rjmp	.+56     	; 0x99e <generate_shape+0xde>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_L_array[i][j];
 966:	cb 01       	movw	r24, r22
 968:	88 0f       	add	r24, r24
 96a:	99 1f       	adc	r25, r25
 96c:	88 0f       	add	r24, r24
 96e:	99 1f       	adc	r25, r25
 970:	fc 01       	movw	r30, r24
 972:	e6 55       	subi	r30, 0x56	; 86
 974:	ff 4f       	sbci	r31, 0xFF	; 255
 976:	e2 0f       	add	r30, r18
 978:	f3 1f       	adc	r31, r19
 97a:	40 81       	ld	r20, Z
 97c:	82 5c       	subi	r24, 0xC2	; 194
 97e:	9d 4f       	sbci	r25, 0xFD	; 253
 980:	fc 01       	movw	r30, r24
 982:	e2 0f       	add	r30, r18
 984:	f3 1f       	adc	r31, r19
 986:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 2){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
 988:	2f 5f       	subi	r18, 0xFF	; 255
 98a:	3f 4f       	sbci	r19, 0xFF	; 255
 98c:	02 c0       	rjmp	.+4      	; 0x992 <generate_shape+0xd2>
 98e:	20 e0       	ldi	r18, 0x00	; 0
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	24 30       	cpi	r18, 0x04	; 4
 994:	31 05       	cpc	r19, r1
 996:	3c f3       	brlt	.-50     	; 0x966 <generate_shape+0xa6>
				current_shape_array[i][j] = shape_I_array[i][j];
			}
		}
	}
	else if(shape == 2){
		for(int i = 0 ; i < 4; i++){
 998:	6f 5f       	subi	r22, 0xFF	; 255
 99a:	7f 4f       	sbci	r23, 0xFF	; 255
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <generate_shape+0xe2>
 99e:	60 e0       	ldi	r22, 0x00	; 0
 9a0:	70 e0       	ldi	r23, 0x00	; 0
 9a2:	64 30       	cpi	r22, 0x04	; 4
 9a4:	71 05       	cpc	r23, r1
 9a6:	9c f3       	brlt	.-26     	; 0x98e <generate_shape+0xce>
 9a8:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_L_array[i][j];
			}
		}
	}
	else if(shape == 3){
 9aa:	83 30       	cpi	r24, 0x03	; 3
 9ac:	91 05       	cpc	r25, r1
 9ae:	19 f5       	brne	.+70     	; 0x9f6 <generate_shape+0x136>
 9b0:	1c c0       	rjmp	.+56     	; 0x9ea <generate_shape+0x12a>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_J_array[i][j];
 9b2:	cb 01       	movw	r24, r22
 9b4:	88 0f       	add	r24, r24
 9b6:	99 1f       	adc	r25, r25
 9b8:	88 0f       	add	r24, r24
 9ba:	99 1f       	adc	r25, r25
 9bc:	fc 01       	movw	r30, r24
 9be:	e6 56       	subi	r30, 0x66	; 102
 9c0:	ff 4f       	sbci	r31, 0xFF	; 255
 9c2:	e2 0f       	add	r30, r18
 9c4:	f3 1f       	adc	r31, r19
 9c6:	40 81       	ld	r20, Z
 9c8:	82 5c       	subi	r24, 0xC2	; 194
 9ca:	9d 4f       	sbci	r25, 0xFD	; 253
 9cc:	fc 01       	movw	r30, r24
 9ce:	e2 0f       	add	r30, r18
 9d0:	f3 1f       	adc	r31, r19
 9d2:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 3){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
 9d4:	2f 5f       	subi	r18, 0xFF	; 255
 9d6:	3f 4f       	sbci	r19, 0xFF	; 255
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <generate_shape+0x11e>
 9da:	20 e0       	ldi	r18, 0x00	; 0
 9dc:	30 e0       	ldi	r19, 0x00	; 0
 9de:	24 30       	cpi	r18, 0x04	; 4
 9e0:	31 05       	cpc	r19, r1
 9e2:	3c f3       	brlt	.-50     	; 0x9b2 <generate_shape+0xf2>
				current_shape_array[i][j] = shape_L_array[i][j];
			}
		}
	}
	else if(shape == 3){
		for(int i = 0 ; i < 4; i++){
 9e4:	6f 5f       	subi	r22, 0xFF	; 255
 9e6:	7f 4f       	sbci	r23, 0xFF	; 255
 9e8:	02 c0       	rjmp	.+4      	; 0x9ee <generate_shape+0x12e>
 9ea:	60 e0       	ldi	r22, 0x00	; 0
 9ec:	70 e0       	ldi	r23, 0x00	; 0
 9ee:	64 30       	cpi	r22, 0x04	; 4
 9f0:	71 05       	cpc	r23, r1
 9f2:	9c f3       	brlt	.-26     	; 0x9da <generate_shape+0x11a>
 9f4:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_J_array[i][j];
			}
		}
	}
	else if(shape == 4){
 9f6:	84 30       	cpi	r24, 0x04	; 4
 9f8:	91 05       	cpc	r25, r1
 9fa:	19 f5       	brne	.+70     	; 0xa42 <generate_shape+0x182>
 9fc:	1c c0       	rjmp	.+56     	; 0xa36 <generate_shape+0x176>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_S_array[i][j];
 9fe:	cb 01       	movw	r24, r22
 a00:	88 0f       	add	r24, r24
 a02:	99 1f       	adc	r25, r25
 a04:	88 0f       	add	r24, r24
 a06:	99 1f       	adc	r25, r25
 a08:	fc 01       	movw	r30, r24
 a0a:	e6 57       	subi	r30, 0x76	; 118
 a0c:	ff 4f       	sbci	r31, 0xFF	; 255
 a0e:	e2 0f       	add	r30, r18
 a10:	f3 1f       	adc	r31, r19
 a12:	40 81       	ld	r20, Z
 a14:	82 5c       	subi	r24, 0xC2	; 194
 a16:	9d 4f       	sbci	r25, 0xFD	; 253
 a18:	fc 01       	movw	r30, r24
 a1a:	e2 0f       	add	r30, r18
 a1c:	f3 1f       	adc	r31, r19
 a1e:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 4){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
 a20:	2f 5f       	subi	r18, 0xFF	; 255
 a22:	3f 4f       	sbci	r19, 0xFF	; 255
 a24:	02 c0       	rjmp	.+4      	; 0xa2a <generate_shape+0x16a>
 a26:	20 e0       	ldi	r18, 0x00	; 0
 a28:	30 e0       	ldi	r19, 0x00	; 0
 a2a:	24 30       	cpi	r18, 0x04	; 4
 a2c:	31 05       	cpc	r19, r1
 a2e:	3c f3       	brlt	.-50     	; 0x9fe <generate_shape+0x13e>
				current_shape_array[i][j] = shape_J_array[i][j];
			}
		}
	}
	else if(shape == 4){
		for(int i = 0 ; i < 4; i++){
 a30:	6f 5f       	subi	r22, 0xFF	; 255
 a32:	7f 4f       	sbci	r23, 0xFF	; 255
 a34:	02 c0       	rjmp	.+4      	; 0xa3a <generate_shape+0x17a>
 a36:	60 e0       	ldi	r22, 0x00	; 0
 a38:	70 e0       	ldi	r23, 0x00	; 0
 a3a:	64 30       	cpi	r22, 0x04	; 4
 a3c:	71 05       	cpc	r23, r1
 a3e:	9c f3       	brlt	.-26     	; 0xa26 <generate_shape+0x166>
 a40:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_S_array[i][j];
			}
		}
	}
	else if(shape == 5){
 a42:	85 30       	cpi	r24, 0x05	; 5
 a44:	91 05       	cpc	r25, r1
 a46:	19 f5       	brne	.+70     	; 0xa8e <generate_shape+0x1ce>
 a48:	1c c0       	rjmp	.+56     	; 0xa82 <generate_shape+0x1c2>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_Z_array[i][j];
 a4a:	cb 01       	movw	r24, r22
 a4c:	88 0f       	add	r24, r24
 a4e:	99 1f       	adc	r25, r25
 a50:	88 0f       	add	r24, r24
 a52:	99 1f       	adc	r25, r25
 a54:	fc 01       	movw	r30, r24
 a56:	e6 58       	subi	r30, 0x86	; 134
 a58:	ff 4f       	sbci	r31, 0xFF	; 255
 a5a:	e2 0f       	add	r30, r18
 a5c:	f3 1f       	adc	r31, r19
 a5e:	40 81       	ld	r20, Z
 a60:	82 5c       	subi	r24, 0xC2	; 194
 a62:	9d 4f       	sbci	r25, 0xFD	; 253
 a64:	fc 01       	movw	r30, r24
 a66:	e2 0f       	add	r30, r18
 a68:	f3 1f       	adc	r31, r19
 a6a:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 5){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
 a6c:	2f 5f       	subi	r18, 0xFF	; 255
 a6e:	3f 4f       	sbci	r19, 0xFF	; 255
 a70:	02 c0       	rjmp	.+4      	; 0xa76 <generate_shape+0x1b6>
 a72:	20 e0       	ldi	r18, 0x00	; 0
 a74:	30 e0       	ldi	r19, 0x00	; 0
 a76:	24 30       	cpi	r18, 0x04	; 4
 a78:	31 05       	cpc	r19, r1
 a7a:	3c f3       	brlt	.-50     	; 0xa4a <generate_shape+0x18a>
				current_shape_array[i][j] = shape_S_array[i][j];
			}
		}
	}
	else if(shape == 5){
		for(int i = 0 ; i < 4; i++){
 a7c:	6f 5f       	subi	r22, 0xFF	; 255
 a7e:	7f 4f       	sbci	r23, 0xFF	; 255
 a80:	02 c0       	rjmp	.+4      	; 0xa86 <generate_shape+0x1c6>
 a82:	60 e0       	ldi	r22, 0x00	; 0
 a84:	70 e0       	ldi	r23, 0x00	; 0
 a86:	64 30       	cpi	r22, 0x04	; 4
 a88:	71 05       	cpc	r23, r1
 a8a:	9c f3       	brlt	.-26     	; 0xa72 <generate_shape+0x1b2>
 a8c:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_Z_array[i][j];
			}
		}
	}
	else if(shape == 6){
 a8e:	06 97       	sbiw	r24, 0x06	; 6
 a90:	11 f5       	brne	.+68     	; 0xad6 <generate_shape+0x216>
 a92:	1c c0       	rjmp	.+56     	; 0xacc <generate_shape+0x20c>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_T_array[i][j];
 a94:	cb 01       	movw	r24, r22
 a96:	88 0f       	add	r24, r24
 a98:	99 1f       	adc	r25, r25
 a9a:	88 0f       	add	r24, r24
 a9c:	99 1f       	adc	r25, r25
 a9e:	fc 01       	movw	r30, r24
 aa0:	e6 59       	subi	r30, 0x96	; 150
 aa2:	ff 4f       	sbci	r31, 0xFF	; 255
 aa4:	e2 0f       	add	r30, r18
 aa6:	f3 1f       	adc	r31, r19
 aa8:	40 81       	ld	r20, Z
 aaa:	82 5c       	subi	r24, 0xC2	; 194
 aac:	9d 4f       	sbci	r25, 0xFD	; 253
 aae:	fc 01       	movw	r30, r24
 ab0:	e2 0f       	add	r30, r18
 ab2:	f3 1f       	adc	r31, r19
 ab4:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 6){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
 ab6:	2f 5f       	subi	r18, 0xFF	; 255
 ab8:	3f 4f       	sbci	r19, 0xFF	; 255
 aba:	02 c0       	rjmp	.+4      	; 0xac0 <generate_shape+0x200>
 abc:	20 e0       	ldi	r18, 0x00	; 0
 abe:	30 e0       	ldi	r19, 0x00	; 0
 ac0:	24 30       	cpi	r18, 0x04	; 4
 ac2:	31 05       	cpc	r19, r1
 ac4:	3c f3       	brlt	.-50     	; 0xa94 <generate_shape+0x1d4>
				current_shape_array[i][j] = shape_Z_array[i][j];
			}
		}
	}
	else if(shape == 6){
		for(int i = 0 ; i < 4; i++){
 ac6:	6f 5f       	subi	r22, 0xFF	; 255
 ac8:	7f 4f       	sbci	r23, 0xFF	; 255
 aca:	02 c0       	rjmp	.+4      	; 0xad0 <generate_shape+0x210>
 acc:	60 e0       	ldi	r22, 0x00	; 0
 ace:	70 e0       	ldi	r23, 0x00	; 0
 ad0:	64 30       	cpi	r22, 0x04	; 4
 ad2:	71 05       	cpc	r23, r1
 ad4:	9c f3       	brlt	.-26     	; 0xabc <generate_shape+0x1fc>
 ad6:	08 95       	ret

00000ad8 <start_again>:

int count_speed = 175;
int count_count = 0;

void start_again(){
	for(int i = 0; i < 16; i++){
 ad8:	20 e0       	ldi	r18, 0x00	; 0
 ada:	30 e0       	ldi	r19, 0x00	; 0
 adc:	15 c0       	rjmp	.+42     	; 0xb08 <start_again+0x30>
		for(int j = 0; j < 8; j++){
			current_display[i][j] = FALSE;
 ade:	f9 01       	movw	r30, r18
 ae0:	ee 0f       	add	r30, r30
 ae2:	ff 1f       	adc	r31, r31
 ae4:	ee 0f       	add	r30, r30
 ae6:	ff 1f       	adc	r31, r31
 ae8:	ee 0f       	add	r30, r30
 aea:	ff 1f       	adc	r31, r31
 aec:	e2 55       	subi	r30, 0x52	; 82
 aee:	fe 4f       	sbci	r31, 0xFE	; 254
 af0:	e8 0f       	add	r30, r24
 af2:	f9 1f       	adc	r31, r25
 af4:	10 82       	st	Z, r1
int count_speed = 175;
int count_count = 0;

void start_again(){
	for(int i = 0; i < 16; i++){
		for(int j = 0; j < 8; j++){
 af6:	01 96       	adiw	r24, 0x01	; 1
 af8:	02 c0       	rjmp	.+4      	; 0xafe <start_again+0x26>
 afa:	80 e0       	ldi	r24, 0x00	; 0
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	88 30       	cpi	r24, 0x08	; 8
 b00:	91 05       	cpc	r25, r1
 b02:	6c f3       	brlt	.-38     	; 0xade <start_again+0x6>

int count_speed = 175;
int count_count = 0;

void start_again(){
	for(int i = 0; i < 16; i++){
 b04:	2f 5f       	subi	r18, 0xFF	; 255
 b06:	3f 4f       	sbci	r19, 0xFF	; 255
 b08:	20 31       	cpi	r18, 0x10	; 16
 b0a:	31 05       	cpc	r19, r1
 b0c:	b4 f3       	brlt	.-20     	; 0xafa <start_again+0x22>
		for(int j = 0; j < 8; j++){
			current_display[i][j] = FALSE;
		}
	}
	count_speed = 175;
 b0e:	8f ea       	ldi	r24, 0xAF	; 175
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <count_speed+0x1>
 b16:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <count_speed>
	count_count = 0;
 b1a:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <__data_end+0x1>
 b1e:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__data_end>
 b22:	08 95       	ret

00000b24 <main>:
}

int main(void)
{
	MCUCSR |= 1<<JTD;
 b24:	84 b7       	in	r24, 0x34	; 52
 b26:	80 68       	ori	r24, 0x80	; 128
 b28:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= 1<<JTD;
 b2a:	84 b7       	in	r24, 0x34	; 52
 b2c:	80 68       	ori	r24, 0x80	; 128
 b2e:	84 bf       	out	0x34, r24	; 52
	srand(time(NULL));
 b30:	80 e0       	ldi	r24, 0x00	; 0
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	0e 94 49 00 	call	0x92	; 0x92 <time>
 b38:	cb 01       	movw	r24, r22
 b3a:	0e 94 0c 07 	call	0xe18	; 0xe18 <srand>
	DDRA = 0xFF;
 b3e:	8f ef       	ldi	r24, 0xFF	; 255
 b40:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
 b42:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
 b44:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b10000100 ;
 b46:	84 e8       	ldi	r24, 0x84	; 132
 b48:	81 bb       	out	0x11, r24	; 17
	int i = 7, count = 0,r = 0;
	UART_init();
 b4a:	0e 94 5c 00 	call	0xb8	; 0xb8 <UART_init>
	srand(time(NULL));
	DDRA = 0xFF;
	DDRB = 0xFF;
	DDRC = 0xFF;
	DDRD = 0b10000100 ;
	int i = 7, count = 0,r = 0;
 b4e:	e1 2c       	mov	r14, r1
 b50:	f1 2c       	mov	r15, r1
 b52:	00 e0       	ldi	r16, 0x00	; 0
 b54:	10 e0       	ldi	r17, 0x00	; 0
 b56:	c7 e0       	ldi	r28, 0x07	; 7
 b58:	d0 e0       	ldi	r29, 0x00	; 0
	UART_init();
	while (1)
	{
		PORTC = 0x00; // common row connection
 b5a:	15 ba       	out	0x15, r1	; 21
		PORTC |= row[i]; // common row connection
 b5c:	fe 01       	movw	r30, r28
 b5e:	ee 55       	subi	r30, 0x5E	; 94
 b60:	fe 4f       	sbci	r31, 0xFE	; 254
 b62:	90 81       	ld	r25, Z
 b64:	85 b3       	in	r24, 0x15	; 21
 b66:	89 2b       	or	r24, r25
 b68:	85 bb       	out	0x15, r24	; 21
		PORTB = ~get_col(i); // upper matrix column
 b6a:	ce 01       	movw	r24, r28
 b6c:	0e 94 09 03 	call	0x612	; 0x612 <get_col>
 b70:	80 95       	com	r24
 b72:	88 bb       	out	0x18, r24	; 24
		PORTA = ~get_col(i+8); // lower matrix column
 b74:	ce 01       	movw	r24, r28
 b76:	08 96       	adiw	r24, 0x08	; 8
 b78:	0e 94 09 03 	call	0x612	; 0x612 <get_col>
 b7c:	80 95       	com	r24
 b7e:	8b bb       	out	0x1b, r24	; 27
 b80:	83 ef       	ldi	r24, 0xF3	; 243
 b82:	91 e0       	ldi	r25, 0x01	; 1
 b84:	01 97       	sbiw	r24, 0x01	; 1
 b86:	f1 f7       	brne	.-4      	; 0xb84 <main+0x60>
 b88:	00 c0       	rjmp	.+0      	; 0xb8a <main+0x66>
 b8a:	00 00       	nop
		_delay_ms(2);
		PORTB = ~0x0; // upper matrix column
 b8c:	8f ef       	ldi	r24, 0xFF	; 255
 b8e:	88 bb       	out	0x18, r24	; 24
		PORTA = ~0x0; // lower matrix column
 b90:	8b bb       	out	0x1b, r24	; 27
		if(i == 7) i = 0;
 b92:	c7 30       	cpi	r28, 0x07	; 7
 b94:	d1 05       	cpc	r29, r1
 b96:	11 f0       	breq	.+4      	; 0xb9c <main+0x78>
		else i++;
 b98:	21 96       	adiw	r28, 0x01	; 1
 b9a:	02 c0       	rjmp	.+4      	; 0xba0 <main+0x7c>
		PORTB = ~get_col(i); // upper matrix column
		PORTA = ~get_col(i+8); // lower matrix column
		_delay_ms(2);
		PORTB = ~0x0; // upper matrix column
		PORTA = ~0x0; // lower matrix column
		if(i == 7) i = 0;
 b9c:	c0 e0       	ldi	r28, 0x00	; 0
 b9e:	d0 e0       	ldi	r29, 0x00	; 0
		else i++;
		//_delay_us(1500);
		if(current_R == 0 && current_C == 2 && current_shape == -1){
 ba0:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <current_R>
 ba4:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <current_R+0x1>
 ba8:	89 2b       	or	r24, r25
 baa:	09 f0       	breq	.+2      	; 0xbae <main+0x8a>
 bac:	53 c0       	rjmp	.+166    	; 0xc54 <main+0x130>
 bae:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <current_C>
 bb2:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <current_C+0x1>
 bb6:	02 97       	sbiw	r24, 0x02	; 2
 bb8:	09 f0       	breq	.+2      	; 0xbbc <main+0x98>
 bba:	4c c0       	rjmp	.+152    	; 0xc54 <main+0x130>
 bbc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <current_shape>
 bc0:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <current_shape+0x1>
 bc4:	01 96       	adiw	r24, 0x01	; 1
 bc6:	09 f0       	breq	.+2      	; 0xbca <main+0xa6>
 bc8:	45 c0       	rjmp	.+138    	; 0xc54 <main+0x130>
			generate_shape(rand_val[r]);
 bca:	f7 01       	movw	r30, r14
 bcc:	ee 0f       	add	r30, r30
 bce:	ff 1f       	adc	r31, r31
 bd0:	e6 52       	subi	r30, 0x26	; 38
 bd2:	ff 4f       	sbci	r31, 0xFF	; 255
 bd4:	80 81       	ld	r24, Z
 bd6:	91 81       	ldd	r25, Z+1	; 0x01
 bd8:	0e 94 60 04 	call	0x8c0	; 0x8c0 <generate_shape>
			r++;
 bdc:	8f ef       	ldi	r24, 0xFF	; 255
 bde:	e8 1a       	sub	r14, r24
 be0:	f8 0a       	sbc	r15, r24
			if(r == 100) r = 0;
 be2:	94 e6       	ldi	r25, 0x64	; 100
 be4:	e9 16       	cp	r14, r25
 be6:	f1 04       	cpc	r15, r1
 be8:	11 f4       	brne	.+4      	; 0xbee <main+0xca>
 bea:	e1 2c       	mov	r14, r1
 bec:	f1 2c       	mov	r15, r1
			//remove_shape(current_shape_array);
			if(check_valid(0 , 2 , current_shape_array) == TRUE){
 bee:	4e e3       	ldi	r20, 0x3E	; 62
 bf0:	52 e0       	ldi	r21, 0x02	; 2
 bf2:	62 e0       	ldi	r22, 0x02	; 2
 bf4:	70 e0       	ldi	r23, 0x00	; 0
 bf6:	80 e0       	ldi	r24, 0x00	; 0
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	0e 94 5f 02 	call	0x4be	; 0x4be <check_valid>
 bfe:	8f 3f       	cpi	r24, 0xFF	; 255
 c00:	49 f4       	brne	.+18     	; 0xc14 <main+0xf0>
				UART_send(current_shape);
 c02:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <current_shape>
 c06:	0e 94 64 00 	call	0xc8	; 0xc8 <UART_send>
				set_shape(current_shape_array);
 c0a:	8e e3       	ldi	r24, 0x3E	; 62
 c0c:	92 e0       	ldi	r25, 0x02	; 2
 c0e:	0e 94 a0 02 	call	0x540	; 0x540 <set_shape>
 c12:	20 c0       	rjmp	.+64     	; 0xc54 <main+0x130>
				//_delay_ms(2);
			}
			else{
				UART_send(9);
 c14:	89 e0       	ldi	r24, 0x09	; 9
 c16:	0e 94 64 00 	call	0xc8	; 0xc8 <UART_send>
				
				PORTD |= (1<< PD7);
 c1a:	82 b3       	in	r24, 0x12	; 18
 c1c:	80 68       	ori	r24, 0x80	; 128
 c1e:	82 bb       	out	0x12, r24	; 18
 c20:	8f e4       	ldi	r24, 0x4F	; 79
 c22:	93 ec       	ldi	r25, 0xC3	; 195
 c24:	01 97       	sbiw	r24, 0x01	; 1
 c26:	f1 f7       	brne	.-4      	; 0xc24 <main+0x100>
 c28:	00 c0       	rjmp	.+0      	; 0xc2a <main+0x106>
 c2a:	00 00       	nop
				_delay_ms(200);
				PORTD &= ~(1<< PD7);
 c2c:	82 b3       	in	r24, 0x12	; 18
 c2e:	8f 77       	andi	r24, 0x7F	; 127
 c30:	82 bb       	out	0x12, r24	; 18
 c32:	8f e4       	ldi	r24, 0x4F	; 79
 c34:	93 ec       	ldi	r25, 0xC3	; 195
 c36:	01 97       	sbiw	r24, 0x01	; 1
 c38:	f1 f7       	brne	.-4      	; 0xc36 <main+0x112>
 c3a:	00 c0       	rjmp	.+0      	; 0xc3c <main+0x118>
 c3c:	00 00       	nop
				_delay_ms(200);
				
				start_again();
 c3e:	0e 94 6c 05 	call	0xad8	; 0xad8 <start_again>
 c42:	9f e3       	ldi	r25, 0x3F	; 63
 c44:	2d e0       	ldi	r18, 0x0D	; 13
 c46:	83 e0       	ldi	r24, 0x03	; 3
 c48:	91 50       	subi	r25, 0x01	; 1
 c4a:	20 40       	sbci	r18, 0x00	; 0
 c4c:	80 40       	sbci	r24, 0x00	; 0
 c4e:	e1 f7       	brne	.-8      	; 0xc48 <main+0x124>
 c50:	00 c0       	rjmp	.+0      	; 0xc52 <main+0x12e>
 c52:	00 00       	nop
				_delay_ms(1000);
			}
		}
		count++;
 c54:	0f 5f       	subi	r16, 0xFF	; 255
 c56:	1f 4f       	sbci	r17, 0xFF	; 255
		if(count == count_speed){
 c58:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count_speed>
 c5c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <count_speed+0x1>
 c60:	08 17       	cp	r16, r24
 c62:	19 07       	cpc	r17, r25
 c64:	29 f5       	brne	.+74     	; 0xcb0 <main+0x18c>
			go_down();
 c66:	0e 94 0d 04 	call	0x81a	; 0x81a <go_down>
			count_count++;
 c6a:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
 c6e:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
 c72:	01 96       	adiw	r24, 0x01	; 1
 c74:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <__data_end+0x1>
 c78:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <__data_end>
			count = 0;
			if(count_count == 50){
 c7c:	c2 97       	sbiw	r24, 0x32	; 50
 c7e:	81 f4       	brne	.+32     	; 0xca0 <main+0x17c>
				count_count = 0;
 c80:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <__data_end+0x1>
 c84:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__data_end>
				if(count_speed >=100)
 c88:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count_speed>
 c8c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <count_speed+0x1>
 c90:	84 36       	cpi	r24, 0x64	; 100
 c92:	91 05       	cpc	r25, r1
 c94:	2c f0       	brlt	.+10     	; 0xca0 <main+0x17c>
					count_speed -= 50;
 c96:	c2 97       	sbiw	r24, 0x32	; 50
 c98:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <count_speed+0x1>
 c9c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <count_speed>
 ca0:	81 ee       	ldi	r24, 0xE1	; 225
 ca2:	94 e0       	ldi	r25, 0x04	; 4
 ca4:	01 97       	sbiw	r24, 0x01	; 1
 ca6:	f1 f7       	brne	.-4      	; 0xca4 <main+0x180>
 ca8:	00 c0       	rjmp	.+0      	; 0xcaa <main+0x186>
 caa:	00 00       	nop
		}
		count++;
		if(count == count_speed){
			go_down();
			count_count++;
			count = 0;
 cac:	00 e0       	ldi	r16, 0x00	; 0
 cae:	10 e0       	ldi	r17, 0x00	; 0
					count_speed -= 50;
			}
			_delay_ms(5);
		}
		
		if(!(PIND & (1<<PD3))){
 cb0:	83 99       	sbic	0x10, 3	; 16
 cb2:	08 c0       	rjmp	.+16     	; 0xcc4 <main+0x1a0>
			go_left();
 cb4:	0e 94 c9 03 	call	0x792	; 0x792 <go_left>
 cb8:	8f e4       	ldi	r24, 0x4F	; 79
 cba:	93 ec       	ldi	r25, 0xC3	; 195
 cbc:	01 97       	sbiw	r24, 0x01	; 1
 cbe:	f1 f7       	brne	.-4      	; 0xcbc <main+0x198>
 cc0:	00 c0       	rjmp	.+0      	; 0xcc2 <main+0x19e>
 cc2:	00 00       	nop
			_delay_ms(200);
		}
		
		if(!(PIND & (1<<PD4))){
 cc4:	84 99       	sbic	0x10, 4	; 16
 cc6:	08 c0       	rjmp	.+16     	; 0xcd8 <main+0x1b4>
			go_right();
 cc8:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <go_right>
 ccc:	8f e4       	ldi	r24, 0x4F	; 79
 cce:	93 ec       	ldi	r25, 0xC3	; 195
 cd0:	01 97       	sbiw	r24, 0x01	; 1
 cd2:	f1 f7       	brne	.-4      	; 0xcd0 <main+0x1ac>
 cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <main+0x1b2>
 cd6:	00 00       	nop
			_delay_ms(200);
		}
		if(!(PIND & (1<<PD5))){
 cd8:	85 99       	sbic	0x10, 5	; 16
 cda:	08 c0       	rjmp	.+16     	; 0xcec <main+0x1c8>
			go_down();
 cdc:	0e 94 0d 04 	call	0x81a	; 0x81a <go_down>
 ce0:	87 ea       	ldi	r24, 0xA7	; 167
 ce2:	91 e6       	ldi	r25, 0x61	; 97
 ce4:	01 97       	sbiw	r24, 0x01	; 1
 ce6:	f1 f7       	brne	.-4      	; 0xce4 <main+0x1c0>
 ce8:	00 c0       	rjmp	.+0      	; 0xcea <main+0x1c6>
 cea:	00 00       	nop
			//go_down();
			_delay_ms(100);
		}
		if(!(PIND & (1<<PD6))){
 cec:	86 99       	sbic	0x10, 6	; 16
 cee:	35 cf       	rjmp	.-406    	; 0xb5a <main+0x36>
			rotate_shape(current_shape_array);
 cf0:	8e e3       	ldi	r24, 0x3E	; 62
 cf2:	92 e0       	ldi	r25, 0x02	; 2
 cf4:	0e 94 ae 01 	call	0x35c	; 0x35c <rotate_shape>
			remove_shape(current_shape_array);
 cf8:	8e e3       	ldi	r24, 0x3E	; 62
 cfa:	92 e0       	ldi	r25, 0x02	; 2
 cfc:	0e 94 d5 02 	call	0x5aa	; 0x5aa <remove_shape>
			if(check_valid(current_R, current_C, temp_shape_array) == TRUE){
 d00:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <current_C>
 d04:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <current_C+0x1>
 d08:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <current_R>
 d0c:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <current_R+0x1>
 d10:	4e e2       	ldi	r20, 0x2E	; 46
 d12:	52 e0       	ldi	r21, 0x02	; 2
 d14:	0e 94 5f 02 	call	0x4be	; 0x4be <check_valid>
 d18:	8f 3f       	cpi	r24, 0xFF	; 255
 d1a:	11 f5       	brne	.+68     	; 0xd60 <main+0x23c>
 d1c:	1c c0       	rjmp	.+56     	; 0xd56 <main+0x232>
				for(int i = 0 ; i < 4; i++){
					for(int j = 0; j < 4; j++){
						current_shape_array[i][j] = temp_shape_array[i][j];
 d1e:	ca 01       	movw	r24, r20
 d20:	88 0f       	add	r24, r24
 d22:	99 1f       	adc	r25, r25
 d24:	88 0f       	add	r24, r24
 d26:	99 1f       	adc	r25, r25
 d28:	fc 01       	movw	r30, r24
 d2a:	e2 5d       	subi	r30, 0xD2	; 210
 d2c:	fd 4f       	sbci	r31, 0xFD	; 253
 d2e:	e2 0f       	add	r30, r18
 d30:	f3 1f       	adc	r31, r19
 d32:	60 81       	ld	r22, Z
 d34:	82 5c       	subi	r24, 0xC2	; 194
 d36:	9d 4f       	sbci	r25, 0xFD	; 253
 d38:	fc 01       	movw	r30, r24
 d3a:	e2 0f       	add	r30, r18
 d3c:	f3 1f       	adc	r31, r19
 d3e:	60 83       	st	Z, r22
		if(!(PIND & (1<<PD6))){
			rotate_shape(current_shape_array);
			remove_shape(current_shape_array);
			if(check_valid(current_R, current_C, temp_shape_array) == TRUE){
				for(int i = 0 ; i < 4; i++){
					for(int j = 0; j < 4; j++){
 d40:	2f 5f       	subi	r18, 0xFF	; 255
 d42:	3f 4f       	sbci	r19, 0xFF	; 255
 d44:	02 c0       	rjmp	.+4      	; 0xd4a <main+0x226>
 d46:	20 e0       	ldi	r18, 0x00	; 0
 d48:	30 e0       	ldi	r19, 0x00	; 0
 d4a:	24 30       	cpi	r18, 0x04	; 4
 d4c:	31 05       	cpc	r19, r1
 d4e:	3c f3       	brlt	.-50     	; 0xd1e <main+0x1fa>
		}
		if(!(PIND & (1<<PD6))){
			rotate_shape(current_shape_array);
			remove_shape(current_shape_array);
			if(check_valid(current_R, current_C, temp_shape_array) == TRUE){
				for(int i = 0 ; i < 4; i++){
 d50:	4f 5f       	subi	r20, 0xFF	; 255
 d52:	5f 4f       	sbci	r21, 0xFF	; 255
 d54:	02 c0       	rjmp	.+4      	; 0xd5a <main+0x236>
 d56:	40 e0       	ldi	r20, 0x00	; 0
 d58:	50 e0       	ldi	r21, 0x00	; 0
 d5a:	44 30       	cpi	r20, 0x04	; 4
 d5c:	51 05       	cpc	r21, r1
 d5e:	9c f3       	brlt	.-26     	; 0xd46 <main+0x222>
					for(int j = 0; j < 4; j++){
						current_shape_array[i][j] = temp_shape_array[i][j];
					}
				}
			}
			set_shape(current_shape_array);
 d60:	8e e3       	ldi	r24, 0x3E	; 62
 d62:	92 e0       	ldi	r25, 0x02	; 2
 d64:	0e 94 a0 02 	call	0x540	; 0x540 <set_shape>
 d68:	83 e2       	ldi	r24, 0x23	; 35
 d6a:	94 ef       	ldi	r25, 0xF4	; 244
 d6c:	01 97       	sbiw	r24, 0x01	; 1
 d6e:	f1 f7       	brne	.-4      	; 0xd6c <main+0x248>
 d70:	00 c0       	rjmp	.+0      	; 0xd72 <main+0x24e>
 d72:	00 00       	nop
 d74:	f2 ce       	rjmp	.-540    	; 0xb5a <main+0x36>

00000d76 <do_rand>:
 d76:	8f 92       	push	r8
 d78:	9f 92       	push	r9
 d7a:	af 92       	push	r10
 d7c:	bf 92       	push	r11
 d7e:	cf 92       	push	r12
 d80:	df 92       	push	r13
 d82:	ef 92       	push	r14
 d84:	ff 92       	push	r15
 d86:	cf 93       	push	r28
 d88:	df 93       	push	r29
 d8a:	ec 01       	movw	r28, r24
 d8c:	68 81       	ld	r22, Y
 d8e:	79 81       	ldd	r23, Y+1	; 0x01
 d90:	8a 81       	ldd	r24, Y+2	; 0x02
 d92:	9b 81       	ldd	r25, Y+3	; 0x03
 d94:	61 15       	cp	r22, r1
 d96:	71 05       	cpc	r23, r1
 d98:	81 05       	cpc	r24, r1
 d9a:	91 05       	cpc	r25, r1
 d9c:	21 f4       	brne	.+8      	; 0xda6 <do_rand+0x30>
 d9e:	64 e2       	ldi	r22, 0x24	; 36
 da0:	79 ed       	ldi	r23, 0xD9	; 217
 da2:	8b e5       	ldi	r24, 0x5B	; 91
 da4:	97 e0       	ldi	r25, 0x07	; 7
 da6:	2d e1       	ldi	r18, 0x1D	; 29
 da8:	33 ef       	ldi	r19, 0xF3	; 243
 daa:	41 e0       	ldi	r20, 0x01	; 1
 dac:	50 e0       	ldi	r21, 0x00	; 0
 dae:	0e 94 17 07 	call	0xe2e	; 0xe2e <__divmodsi4>
 db2:	49 01       	movw	r8, r18
 db4:	5a 01       	movw	r10, r20
 db6:	9b 01       	movw	r18, r22
 db8:	ac 01       	movw	r20, r24
 dba:	a7 ea       	ldi	r26, 0xA7	; 167
 dbc:	b1 e4       	ldi	r27, 0x41	; 65
 dbe:	0e 94 36 07 	call	0xe6c	; 0xe6c <__muluhisi3>
 dc2:	6b 01       	movw	r12, r22
 dc4:	7c 01       	movw	r14, r24
 dc6:	ac ee       	ldi	r26, 0xEC	; 236
 dc8:	b4 ef       	ldi	r27, 0xF4	; 244
 dca:	a5 01       	movw	r20, r10
 dcc:	94 01       	movw	r18, r8
 dce:	0e 94 44 07 	call	0xe88	; 0xe88 <__mulohisi3>
 dd2:	dc 01       	movw	r26, r24
 dd4:	cb 01       	movw	r24, r22
 dd6:	8c 0d       	add	r24, r12
 dd8:	9d 1d       	adc	r25, r13
 dda:	ae 1d       	adc	r26, r14
 ddc:	bf 1d       	adc	r27, r15
 dde:	b7 ff       	sbrs	r27, 7
 de0:	03 c0       	rjmp	.+6      	; 0xde8 <do_rand+0x72>
 de2:	01 97       	sbiw	r24, 0x01	; 1
 de4:	a1 09       	sbc	r26, r1
 de6:	b0 48       	sbci	r27, 0x80	; 128
 de8:	88 83       	st	Y, r24
 dea:	99 83       	std	Y+1, r25	; 0x01
 dec:	aa 83       	std	Y+2, r26	; 0x02
 dee:	bb 83       	std	Y+3, r27	; 0x03
 df0:	9f 77       	andi	r25, 0x7F	; 127
 df2:	df 91       	pop	r29
 df4:	cf 91       	pop	r28
 df6:	ff 90       	pop	r15
 df8:	ef 90       	pop	r14
 dfa:	df 90       	pop	r13
 dfc:	cf 90       	pop	r12
 dfe:	bf 90       	pop	r11
 e00:	af 90       	pop	r10
 e02:	9f 90       	pop	r9
 e04:	8f 90       	pop	r8
 e06:	08 95       	ret

00000e08 <rand_r>:
 e08:	0e 94 bb 06 	call	0xd76	; 0xd76 <do_rand>
 e0c:	08 95       	ret

00000e0e <rand>:
 e0e:	80 e6       	ldi	r24, 0x60	; 96
 e10:	90 e0       	ldi	r25, 0x00	; 0
 e12:	0e 94 bb 06 	call	0xd76	; 0xd76 <do_rand>
 e16:	08 95       	ret

00000e18 <srand>:
 e18:	a0 e0       	ldi	r26, 0x00	; 0
 e1a:	b0 e0       	ldi	r27, 0x00	; 0
 e1c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 e20:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 e24:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 e28:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 e2c:	08 95       	ret

00000e2e <__divmodsi4>:
 e2e:	05 2e       	mov	r0, r21
 e30:	97 fb       	bst	r25, 7
 e32:	1e f4       	brtc	.+6      	; 0xe3a <__divmodsi4+0xc>
 e34:	00 94       	com	r0
 e36:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__negsi2>
 e3a:	57 fd       	sbrc	r21, 7
 e3c:	07 d0       	rcall	.+14     	; 0xe4c <__divmodsi4_neg2>
 e3e:	0e 94 49 07 	call	0xe92	; 0xe92 <__udivmodsi4>
 e42:	07 fc       	sbrc	r0, 7
 e44:	03 d0       	rcall	.+6      	; 0xe4c <__divmodsi4_neg2>
 e46:	4e f4       	brtc	.+18     	; 0xe5a <__divmodsi4_exit>
 e48:	0c 94 2e 07 	jmp	0xe5c	; 0xe5c <__negsi2>

00000e4c <__divmodsi4_neg2>:
 e4c:	50 95       	com	r21
 e4e:	40 95       	com	r20
 e50:	30 95       	com	r19
 e52:	21 95       	neg	r18
 e54:	3f 4f       	sbci	r19, 0xFF	; 255
 e56:	4f 4f       	sbci	r20, 0xFF	; 255
 e58:	5f 4f       	sbci	r21, 0xFF	; 255

00000e5a <__divmodsi4_exit>:
 e5a:	08 95       	ret

00000e5c <__negsi2>:
 e5c:	90 95       	com	r25
 e5e:	80 95       	com	r24
 e60:	70 95       	com	r23
 e62:	61 95       	neg	r22
 e64:	7f 4f       	sbci	r23, 0xFF	; 255
 e66:	8f 4f       	sbci	r24, 0xFF	; 255
 e68:	9f 4f       	sbci	r25, 0xFF	; 255
 e6a:	08 95       	ret

00000e6c <__muluhisi3>:
 e6c:	0e 94 6b 07 	call	0xed6	; 0xed6 <__umulhisi3>
 e70:	a5 9f       	mul	r26, r21
 e72:	90 0d       	add	r25, r0
 e74:	b4 9f       	mul	r27, r20
 e76:	90 0d       	add	r25, r0
 e78:	a4 9f       	mul	r26, r20
 e7a:	80 0d       	add	r24, r0
 e7c:	91 1d       	adc	r25, r1
 e7e:	11 24       	eor	r1, r1
 e80:	08 95       	ret

00000e82 <__mulshisi3>:
 e82:	b7 ff       	sbrs	r27, 7
 e84:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__muluhisi3>

00000e88 <__mulohisi3>:
 e88:	0e 94 36 07 	call	0xe6c	; 0xe6c <__muluhisi3>
 e8c:	82 1b       	sub	r24, r18
 e8e:	93 0b       	sbc	r25, r19
 e90:	08 95       	ret

00000e92 <__udivmodsi4>:
 e92:	a1 e2       	ldi	r26, 0x21	; 33
 e94:	1a 2e       	mov	r1, r26
 e96:	aa 1b       	sub	r26, r26
 e98:	bb 1b       	sub	r27, r27
 e9a:	fd 01       	movw	r30, r26
 e9c:	0d c0       	rjmp	.+26     	; 0xeb8 <__udivmodsi4_ep>

00000e9e <__udivmodsi4_loop>:
 e9e:	aa 1f       	adc	r26, r26
 ea0:	bb 1f       	adc	r27, r27
 ea2:	ee 1f       	adc	r30, r30
 ea4:	ff 1f       	adc	r31, r31
 ea6:	a2 17       	cp	r26, r18
 ea8:	b3 07       	cpc	r27, r19
 eaa:	e4 07       	cpc	r30, r20
 eac:	f5 07       	cpc	r31, r21
 eae:	20 f0       	brcs	.+8      	; 0xeb8 <__udivmodsi4_ep>
 eb0:	a2 1b       	sub	r26, r18
 eb2:	b3 0b       	sbc	r27, r19
 eb4:	e4 0b       	sbc	r30, r20
 eb6:	f5 0b       	sbc	r31, r21

00000eb8 <__udivmodsi4_ep>:
 eb8:	66 1f       	adc	r22, r22
 eba:	77 1f       	adc	r23, r23
 ebc:	88 1f       	adc	r24, r24
 ebe:	99 1f       	adc	r25, r25
 ec0:	1a 94       	dec	r1
 ec2:	69 f7       	brne	.-38     	; 0xe9e <__udivmodsi4_loop>
 ec4:	60 95       	com	r22
 ec6:	70 95       	com	r23
 ec8:	80 95       	com	r24
 eca:	90 95       	com	r25
 ecc:	9b 01       	movw	r18, r22
 ece:	ac 01       	movw	r20, r24
 ed0:	bd 01       	movw	r22, r26
 ed2:	cf 01       	movw	r24, r30
 ed4:	08 95       	ret

00000ed6 <__umulhisi3>:
 ed6:	a2 9f       	mul	r26, r18
 ed8:	b0 01       	movw	r22, r0
 eda:	b3 9f       	mul	r27, r19
 edc:	c0 01       	movw	r24, r0
 ede:	a3 9f       	mul	r26, r19
 ee0:	70 0d       	add	r23, r0
 ee2:	81 1d       	adc	r24, r1
 ee4:	11 24       	eor	r1, r1
 ee6:	91 1d       	adc	r25, r1
 ee8:	b2 9f       	mul	r27, r18
 eea:	70 0d       	add	r23, r0
 eec:	81 1d       	adc	r24, r1
 eee:	11 24       	eor	r1, r1
 ef0:	91 1d       	adc	r25, r1
 ef2:	08 95       	ret

00000ef4 <_exit>:
 ef4:	f8 94       	cli

00000ef6 <__stop_program>:
 ef6:	ff cf       	rjmp	.-2      	; 0xef6 <__stop_program>
