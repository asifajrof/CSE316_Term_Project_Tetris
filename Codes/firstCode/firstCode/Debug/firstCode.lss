
firstCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f2  00800060  00000cae  00000d42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a6  00800152  00800152  00000e34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000155a  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ac  00000000  00000000  000024a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ba3  00000000  00000000  00002c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  000037f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051b  00000000  00000000  000039e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f6b  00000000  00000000  00003eff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  00004e6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 35       	cpi	r26, 0x52	; 82
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 e5       	ldi	r26, 0x52	; 82
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3f       	cpi	r26, 0xF8	; 248
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 98 04 	call	0x930	; 0x930 <main>
  8a:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <time>:
  92:	fc 01       	movw	r30, r24
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	60 91 f4 01 	lds	r22, 0x01F4	; 0x8001f4 <__system_time>
  9c:	70 91 f5 01 	lds	r23, 0x01F5	; 0x8001f5 <__system_time+0x1>
  a0:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <__system_time+0x2>
  a4:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <__system_time+0x3>
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	30 97       	sbiw	r30, 0x00	; 0
  ac:	21 f0       	breq	.+8      	; 0xb6 <time+0x24>
  ae:	60 83       	st	Z, r22
  b0:	71 83       	std	Z+1, r23	; 0x01
  b2:	82 83       	std	Z+2, r24	; 0x02
  b4:	93 83       	std	Z+3, r25	; 0x03
  b6:	08 95       	ret

000000b8 <UART_init>:
	
	int UBBRValue = 25;//AS described before setting baud rate

	//Put the upper part of the baud number here (bits 8 to 11)

	UBRRH = (unsigned char) (UBBRValue >> 8);
  b8:	10 bc       	out	0x20, r1	; 32

	//Put the remaining part of the baud number here

	UBRRL = (unsigned char) UBBRValue;
  ba:	89 e1       	ldi	r24, 0x19	; 25
  bc:	89 b9       	out	0x09, r24	; 9

	//Enable the receiver and transmitter

	UCSRB = (1 << TXEN);
  be:	88 e0       	ldi	r24, 0x08	; 8
  c0:	8a b9       	out	0x0a, r24	; 10

	//Set 2 stop bits and data bit length is 8-bit

	//UCSRC = (1 << USBS) | (3 << UCSZ0);
	UCSRC = 0b10001110;
  c2:	8e e8       	ldi	r24, 0x8E	; 142
  c4:	80 bd       	out	0x20, r24	; 32
  c6:	08 95       	ret

000000c8 <UART_send>:
}

void UART_send(unsigned char data){
	// wait until UDRE flag is set to logic 1
	while ((UCSRA & (1<<UDRE)) == 0x00);
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <UART_send>
	UDR = data; // Write character to UDR for transmission
  cc:	8c b9       	out	0x0c, r24	; 12
  ce:	08 95       	ret

000000d0 <row_shift>:
	
}


void row_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
  d0:	cf 92       	push	r12
  d2:	df 92       	push	r13
  d4:	ef 92       	push	r14
  d6:	ff 92       	push	r15
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
	for(int counter=0; counter<shift_count; counter++){
  e0:	c1 2c       	mov	r12, r1
  e2:	d1 2c       	mov	r13, r1
  e4:	47 c0       	rjmp	.+142    	; 0x174 <row_shift+0xa4>
		int index = 0;
		if (direction>0){
  e6:	14 16       	cp	r1, r20
  e8:	15 06       	cpc	r1, r21
  ea:	24 f4       	brge	.+8      	; 0xf4 <row_shift+0x24>
			index = length-1;
  ec:	8c 01       	movw	r16, r24
  ee:	01 50       	subi	r16, 0x01	; 1
  f0:	11 09       	sbc	r17, r1
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <row_shift+0x28>


void row_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
	for(int counter=0; counter<shift_count; counter++){
		int index = 0;
  f4:	00 e0       	ldi	r16, 0x00	; 0
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	e1 2c       	mov	r14, r1
  fa:	f1 2c       	mov	r15, r1
  fc:	22 c0       	rjmp	.+68     	; 0x142 <row_shift+0x72>
			index = length-1;
		}

		for (int i=0; i<length-1; i++){
			for (int j=0; j<length; j++){
				shape_array[index][j] = shape_array[index-direction][j];
  fe:	d8 01       	movw	r26, r16
 100:	aa 0f       	add	r26, r26
 102:	bb 1f       	adc	r27, r27
 104:	aa 0f       	add	r26, r26
 106:	bb 1f       	adc	r27, r27
 108:	a6 0f       	add	r26, r22
 10a:	b7 1f       	adc	r27, r23
 10c:	f8 01       	movw	r30, r16
 10e:	e4 1b       	sub	r30, r20
 110:	f5 0b       	sbc	r31, r21
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	ee 0f       	add	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	e6 0f       	add	r30, r22
 11c:	f7 1f       	adc	r31, r23
 11e:	ec 0f       	add	r30, r28
 120:	fd 1f       	adc	r31, r29
 122:	e0 81       	ld	r30, Z
 124:	ac 0f       	add	r26, r28
 126:	bd 1f       	adc	r27, r29
 128:	ec 93       	st	X, r30
		if (direction>0){
			index = length-1;
		}

		for (int i=0; i<length-1; i++){
			for (int j=0; j<length; j++){
 12a:	21 96       	adiw	r28, 0x01	; 1
 12c:	02 c0       	rjmp	.+4      	; 0x132 <row_shift+0x62>
 12e:	c0 e0       	ldi	r28, 0x00	; 0
 130:	d0 e0       	ldi	r29, 0x00	; 0
 132:	c8 17       	cp	r28, r24
 134:	d9 07       	cpc	r29, r25
 136:	1c f3       	brlt	.-58     	; 0xfe <row_shift+0x2e>
				shape_array[index][j] = shape_array[index-direction][j];
			}
			index = index - direction;
 138:	04 1b       	sub	r16, r20
 13a:	15 0b       	sbc	r17, r21
		int index = 0;
		if (direction>0){
			index = length-1;
		}

		for (int i=0; i<length-1; i++){
 13c:	ef ef       	ldi	r30, 0xFF	; 255
 13e:	ee 1a       	sub	r14, r30
 140:	fe 0a       	sbc	r15, r30
 142:	fc 01       	movw	r30, r24
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	ee 16       	cp	r14, r30
 148:	ff 06       	cpc	r15, r31
 14a:	8c f3       	brlt	.-30     	; 0x12e <row_shift+0x5e>
 14c:	a0 e0       	ldi	r26, 0x00	; 0
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	0b c0       	rjmp	.+22     	; 0x168 <row_shift+0x98>
				shape_array[index][j] = shape_array[index-direction][j];
			}
			index = index - direction;
		}
		for (int j=0; j<length; j++){
			shape_array[index][j] = FALSE;
 152:	f8 01       	movw	r30, r16
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	e6 0f       	add	r30, r22
 15e:	f7 1f       	adc	r31, r23
 160:	ea 0f       	add	r30, r26
 162:	fb 1f       	adc	r31, r27
 164:	10 82       	st	Z, r1
			for (int j=0; j<length; j++){
				shape_array[index][j] = shape_array[index-direction][j];
			}
			index = index - direction;
		}
		for (int j=0; j<length; j++){
 166:	11 96       	adiw	r26, 0x01	; 1
 168:	a8 17       	cp	r26, r24
 16a:	b9 07       	cpc	r27, r25
 16c:	94 f3       	brlt	.-28     	; 0x152 <row_shift+0x82>
}


void row_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
	for(int counter=0; counter<shift_count; counter++){
 16e:	ef ef       	ldi	r30, 0xFF	; 255
 170:	ce 1a       	sub	r12, r30
 172:	de 0a       	sbc	r13, r30
 174:	c2 16       	cp	r12, r18
 176:	d3 06       	cpc	r13, r19
 178:	0c f4       	brge	.+2      	; 0x17c <row_shift+0xac>
 17a:	b5 cf       	rjmp	.-150    	; 0xe6 <row_shift+0x16>
		}
		for (int j=0; j<length; j++){
			shape_array[index][j] = FALSE;
		}
	}
}
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	0f 91       	pop	r16
 184:	ff 90       	pop	r15
 186:	ef 90       	pop	r14
 188:	df 90       	pop	r13
 18a:	cf 90       	pop	r12
 18c:	08 95       	ret

0000018e <col_shift>:

void col_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
 18e:	af 92       	push	r10
 190:	bf 92       	push	r11
 192:	cf 92       	push	r12
 194:	df 92       	push	r13
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	5c 01       	movw	r10, r24
 1a4:	79 01       	movw	r14, r18
	for(int counter=0; counter<shift_count; counter++){
 1a6:	00 e0       	ldi	r16, 0x00	; 0
 1a8:	10 e0       	ldi	r17, 0x00	; 0
 1aa:	40 c0       	rjmp	.+128    	; 0x22c <col_shift+0x9e>
		int index = 0;
		if (direction>0){
 1ac:	14 16       	cp	r1, r20
 1ae:	15 06       	cpc	r1, r21
 1b0:	1c f4       	brge	.+6      	; 0x1b8 <col_shift+0x2a>
			index = length-1;
 1b2:	c5 01       	movw	r24, r10
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <col_shift+0x2e>
}

void col_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
	for(int counter=0; counter<shift_count; counter++){
		int index = 0;
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	1c c0       	rjmp	.+56     	; 0x1fa <col_shift+0x6c>
			index = length-1;
		}

		for (int j=0; j<length-1; j++){
			for (int i=0; i<length; i++){
				shape_array[i][index] = shape_array[i][index-direction];
 1c2:	fd 01       	movw	r30, r26
 1c4:	ee 0f       	add	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	ee 0f       	add	r30, r30
 1ca:	ff 1f       	adc	r31, r31
 1cc:	e6 0f       	add	r30, r22
 1ce:	f7 1f       	adc	r31, r23
 1d0:	6c 01       	movw	r12, r24
 1d2:	c4 1a       	sub	r12, r20
 1d4:	d5 0a       	sbc	r13, r21
 1d6:	ce 0e       	add	r12, r30
 1d8:	df 1e       	adc	r13, r31
 1da:	e6 01       	movw	r28, r12
 1dc:	d8 80       	ld	r13, Y
 1de:	e8 0f       	add	r30, r24
 1e0:	f9 1f       	adc	r31, r25
 1e2:	d0 82       	st	Z, r13
		if (direction>0){
			index = length-1;
		}

		for (int j=0; j<length-1; j++){
			for (int i=0; i<length; i++){
 1e4:	11 96       	adiw	r26, 0x01	; 1
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <col_shift+0x5e>
 1e8:	a0 e0       	ldi	r26, 0x00	; 0
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	aa 15       	cp	r26, r10
 1ee:	bb 05       	cpc	r27, r11
 1f0:	44 f3       	brlt	.-48     	; 0x1c2 <col_shift+0x34>
				shape_array[i][index] = shape_array[i][index-direction];
			}
			index = index - direction;
 1f2:	84 1b       	sub	r24, r20
 1f4:	95 0b       	sbc	r25, r21
		int index = 0;
		if (direction>0){
			index = length-1;
		}

		for (int j=0; j<length-1; j++){
 1f6:	2f 5f       	subi	r18, 0xFF	; 255
 1f8:	3f 4f       	sbci	r19, 0xFF	; 255
 1fa:	f5 01       	movw	r30, r10
 1fc:	31 97       	sbiw	r30, 0x01	; 1
 1fe:	2e 17       	cp	r18, r30
 200:	3f 07       	cpc	r19, r31
 202:	94 f3       	brlt	.-28     	; 0x1e8 <col_shift+0x5a>
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	0c c0       	rjmp	.+24     	; 0x222 <col_shift+0x94>
				shape_array[i][index] = shape_array[i][index-direction];
			}
			index = index - direction;
		}
		for (int i=0; i<length; i++){
			shape_array[i][index] = FALSE;
 20a:	f9 01       	movw	r30, r18
 20c:	ee 0f       	add	r30, r30
 20e:	ff 1f       	adc	r31, r31
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	e6 0f       	add	r30, r22
 216:	f7 1f       	adc	r31, r23
 218:	e8 0f       	add	r30, r24
 21a:	f9 1f       	adc	r31, r25
 21c:	10 82       	st	Z, r1
			for (int i=0; i<length; i++){
				shape_array[i][index] = shape_array[i][index-direction];
			}
			index = index - direction;
		}
		for (int i=0; i<length; i++){
 21e:	2f 5f       	subi	r18, 0xFF	; 255
 220:	3f 4f       	sbci	r19, 0xFF	; 255
 222:	2a 15       	cp	r18, r10
 224:	3b 05       	cpc	r19, r11
 226:	8c f3       	brlt	.-30     	; 0x20a <col_shift+0x7c>
	}
}

void col_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
	for(int counter=0; counter<shift_count; counter++){
 228:	0f 5f       	subi	r16, 0xFF	; 255
 22a:	1f 4f       	sbci	r17, 0xFF	; 255
 22c:	0e 15       	cp	r16, r14
 22e:	1f 05       	cpc	r17, r15
 230:	0c f4       	brge	.+2      	; 0x234 <col_shift+0xa6>
 232:	bc cf       	rjmp	.-136    	; 0x1ac <col_shift+0x1e>
		}
		for (int i=0; i<length; i++){
			shape_array[i][index] = FALSE;
		}
	}
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	df 90       	pop	r13
 242:	cf 90       	pop	r12
 244:	bf 90       	pop	r11
 246:	af 90       	pop	r10
 248:	08 95       	ret

0000024a <align_top_left_justify>:

void align_top_left_justify(bool shape_array[][4])
{
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ec 01       	movw	r28, r24
	//top left justify shape after rotation
	//top
	int shift_count = -1;
	int shift_direction = UP;
	for (int i=0; i<4; i++){
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0

void align_top_left_justify(bool shape_array[][4])
{
	//top left justify shape after rotation
	//top
	int shift_count = -1;
 258:	0f ef       	ldi	r16, 0xFF	; 255
 25a:	1f ef       	ldi	r17, 0xFF	; 255
	int shift_direction = UP;
	for (int i=0; i<4; i++){
 25c:	1b c0       	rjmp	.+54     	; 0x294 <align_top_left_justify+0x4a>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
 25e:	f9 01       	movw	r30, r18
 260:	ee 0f       	add	r30, r30
 262:	ff 1f       	adc	r31, r31
 264:	ee 0f       	add	r30, r30
 266:	ff 1f       	adc	r31, r31
 268:	ec 0f       	add	r30, r28
 26a:	fd 1f       	adc	r31, r29
 26c:	e8 0f       	add	r30, r24
 26e:	f9 1f       	adc	r31, r25
 270:	40 81       	ld	r20, Z
 272:	4f 3f       	cpi	r20, 0xFF	; 255
 274:	41 f0       	breq	.+16     	; 0x286 <align_top_left_justify+0x3c>
	//top left justify shape after rotation
	//top
	int shift_count = -1;
	int shift_direction = UP;
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 276:	01 96       	adiw	r24, 0x01	; 1
 278:	02 c0       	rjmp	.+4      	; 0x27e <align_top_left_justify+0x34>
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	84 30       	cpi	r24, 0x04	; 4
 280:	91 05       	cpc	r25, r1
 282:	6c f3       	brlt	.-38     	; 0x25e <align_top_left_justify+0x14>
 284:	01 c0       	rjmp	.+2      	; 0x288 <align_top_left_justify+0x3e>
			if(shape_array[i][j] == TRUE){
				shift_count = i;
 286:	89 01       	movw	r16, r18
				break;
			}
		}
		if (shift_count != -1){
 288:	0f 3f       	cpi	r16, 0xFF	; 255
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	18 07       	cpc	r17, r24
 28e:	29 f4       	brne	.+10     	; 0x29a <align_top_left_justify+0x50>
{
	//top left justify shape after rotation
	//top
	int shift_count = -1;
	int shift_direction = UP;
	for (int i=0; i<4; i++){
 290:	2f 5f       	subi	r18, 0xFF	; 255
 292:	3f 4f       	sbci	r19, 0xFF	; 255
 294:	24 30       	cpi	r18, 0x04	; 4
 296:	31 05       	cpc	r19, r1
 298:	84 f3       	brlt	.-32     	; 0x27a <align_top_left_justify+0x30>
		}
		if (shift_count != -1){
			break;
		}
	}
	row_shift(4, shape_array,shift_direction,shift_count);
 29a:	98 01       	movw	r18, r16
 29c:	4f ef       	ldi	r20, 0xFF	; 255
 29e:	5f ef       	ldi	r21, 0xFF	; 255
 2a0:	be 01       	movw	r22, r28
 2a2:	84 e0       	ldi	r24, 0x04	; 4
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 68 00 	call	0xd0	; 0xd0 <row_shift>
	
	//left justify
	int width = 0;
	int w1 = -1, w2 = -1;
	for (int j=0; j<4; j++){
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
	}
	row_shift(4, shape_array,shift_direction,shift_count);
	
	//left justify
	int width = 0;
	int w1 = -1, w2 = -1;
 2ae:	6f ef       	ldi	r22, 0xFF	; 255
 2b0:	7f ef       	ldi	r23, 0xFF	; 255
 2b2:	af ef       	ldi	r26, 0xFF	; 255
 2b4:	bf ef       	ldi	r27, 0xFF	; 255
	for (int j=0; j<4; j++){
 2b6:	25 c0       	rjmp	.+74     	; 0x302 <align_top_left_justify+0xb8>
		for (int i=0; i<4; i++){
			if(shape_array[i][j] == TRUE){
 2b8:	fc 01       	movw	r30, r24
 2ba:	ee 0f       	add	r30, r30
 2bc:	ff 1f       	adc	r31, r31
 2be:	ee 0f       	add	r30, r30
 2c0:	ff 1f       	adc	r31, r31
 2c2:	ec 0f       	add	r30, r28
 2c4:	fd 1f       	adc	r31, r29
 2c6:	e2 0f       	add	r30, r18
 2c8:	f3 1f       	adc	r31, r19
 2ca:	40 81       	ld	r20, Z
 2cc:	4f 3f       	cpi	r20, 0xFF	; 255
 2ce:	31 f4       	brne	.+12     	; 0x2dc <align_top_left_justify+0x92>
				if(w1 == -1){
 2d0:	af 3f       	cpi	r26, 0xFF	; 255
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	b8 07       	cpc	r27, r24
 2d6:	51 f0       	breq	.+20     	; 0x2ec <align_top_left_justify+0xa2>
					w1 = j;
				}
				w2 = j;
 2d8:	b9 01       	movw	r22, r18
 2da:	0a c0       	rjmp	.+20     	; 0x2f0 <align_top_left_justify+0xa6>
	
	//left justify
	int width = 0;
	int w1 = -1, w2 = -1;
	for (int j=0; j<4; j++){
		for (int i=0; i<4; i++){
 2dc:	01 96       	adiw	r24, 0x01	; 1
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <align_top_left_justify+0x9a>
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	84 30       	cpi	r24, 0x04	; 4
 2e6:	91 05       	cpc	r25, r1
 2e8:	3c f3       	brlt	.-50     	; 0x2b8 <align_top_left_justify+0x6e>
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <align_top_left_justify+0xa6>
			if(shape_array[i][j] == TRUE){
				if(w1 == -1){
					w1 = j;
				}
				w2 = j;
 2ec:	b9 01       	movw	r22, r18
	int w1 = -1, w2 = -1;
	for (int j=0; j<4; j++){
		for (int i=0; i<4; i++){
			if(shape_array[i][j] == TRUE){
				if(w1 == -1){
					w1 = j;
 2ee:	d9 01       	movw	r26, r18
				}
				w2 = j;
				break;
			}
		}
		if((w1 != -1) && (w2<j)){
 2f0:	af 3f       	cpi	r26, 0xFF	; 255
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	b8 07       	cpc	r27, r24
 2f6:	19 f0       	breq	.+6      	; 0x2fe <align_top_left_justify+0xb4>
 2f8:	62 17       	cp	r22, r18
 2fa:	73 07       	cpc	r23, r19
 2fc:	2c f0       	brlt	.+10     	; 0x308 <align_top_left_justify+0xbe>
	row_shift(4, shape_array,shift_direction,shift_count);
	
	//left justify
	int width = 0;
	int w1 = -1, w2 = -1;
	for (int j=0; j<4; j++){
 2fe:	2f 5f       	subi	r18, 0xFF	; 255
 300:	3f 4f       	sbci	r19, 0xFF	; 255
 302:	24 30       	cpi	r18, 0x04	; 4
 304:	31 05       	cpc	r19, r1
 306:	64 f3       	brlt	.-40     	; 0x2e0 <align_top_left_justify+0x96>
		}
		if((w1 != -1) && (w2<j)){
			break;
		}
	}
	width = w2 - w1 + 1;
 308:	6a 1b       	sub	r22, r26
 30a:	7b 0b       	sbc	r23, r27
 30c:	cb 01       	movw	r24, r22
 30e:	01 96       	adiw	r24, 0x01	; 1
	if(width == 1 || width == 2){
 310:	62 30       	cpi	r22, 0x02	; 2
 312:	71 05       	cpc	r23, r1
 314:	20 f4       	brcc	.+8      	; 0x31e <align_top_left_justify+0xd4>
		shift_count = w1 - 1;
 316:	8d 01       	movw	r16, r26
 318:	01 50       	subi	r16, 0x01	; 1
 31a:	11 09       	sbc	r17, r1
 31c:	04 c0       	rjmp	.+8      	; 0x326 <align_top_left_justify+0xdc>
	}
	else if(width == 3 || width == 4){
 31e:	03 97       	sbiw	r24, 0x03	; 3
 320:	02 97       	sbiw	r24, 0x02	; 2
 322:	08 f4       	brcc	.+2      	; 0x326 <align_top_left_justify+0xdc>
		shift_count = w1 - 0;
 324:	8d 01       	movw	r16, r26
	}
	if(shift_count<0){
 326:	11 23       	and	r17, r17
 328:	34 f4       	brge	.+12     	; 0x336 <align_top_left_justify+0xec>
		shift_count = -shift_count;
 32a:	11 95       	neg	r17
 32c:	01 95       	neg	r16
 32e:	11 09       	sbc	r17, r1
		shift_direction = RIGHT;
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	50 e0       	ldi	r21, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <align_top_left_justify+0xf0>
	}
	else{
		shift_direction = LEFT;
 336:	4f ef       	ldi	r20, 0xFF	; 255
 338:	5f ef       	ldi	r21, 0xFF	; 255
	}
	col_shift(4,shape_array,shift_direction,shift_count);
 33a:	98 01       	movw	r18, r16
 33c:	be 01       	movw	r22, r28
 33e:	84 e0       	ldi	r24, 0x04	; 4
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 c7 00 	call	0x18e	; 0x18e <col_shift>
}
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	1f 91       	pop	r17
 34c:	0f 91       	pop	r16
 34e:	08 95       	ret

00000350 <rotate_shape>:

void rotate_shape(bool shape_array[][4])
{
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
 358:	60 97       	sbiw	r28, 0x10	; 16
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	f8 94       	cli
 35e:	de bf       	out	0x3e, r29	; 62
 360:	0f be       	out	0x3f, r0	; 63
 362:	cd bf       	out	0x3d, r28	; 61
 364:	dc 01       	movw	r26, r24
	//rotate clockwise.
	//transpose, mirror.
	bool temp[4][4];
	
	for (int i=0; i<4; i++){
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	1f c0       	rjmp	.+62     	; 0x3aa <rotate_shape+0x5a>
		for (int j=0; j<4; j++){
			temp[i][j] = shape_array[i][j];	//copy
 36c:	9b 01       	movw	r18, r22
 36e:	22 0f       	add	r18, r18
 370:	33 1f       	adc	r19, r19
 372:	22 0f       	add	r18, r18
 374:	33 1f       	adc	r19, r19
 376:	fd 01       	movw	r30, r26
 378:	e2 0f       	add	r30, r18
 37a:	f3 1f       	adc	r31, r19
 37c:	e4 0f       	add	r30, r20
 37e:	f5 1f       	adc	r31, r21
 380:	90 81       	ld	r25, Z
 382:	e1 e0       	ldi	r30, 0x01	; 1
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	ec 0f       	add	r30, r28
 388:	fd 1f       	adc	r31, r29
 38a:	2e 0f       	add	r18, r30
 38c:	3f 1f       	adc	r19, r31
 38e:	f9 01       	movw	r30, r18
 390:	e4 0f       	add	r30, r20
 392:	f5 1f       	adc	r31, r21
 394:	90 83       	st	Z, r25
	//rotate clockwise.
	//transpose, mirror.
	bool temp[4][4];
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 396:	4f 5f       	subi	r20, 0xFF	; 255
 398:	5f 4f       	sbci	r21, 0xFF	; 255
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <rotate_shape+0x50>
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	44 30       	cpi	r20, 0x04	; 4
 3a2:	51 05       	cpc	r21, r1
 3a4:	1c f3       	brlt	.-58     	; 0x36c <rotate_shape+0x1c>
{
	//rotate clockwise.
	//transpose, mirror.
	bool temp[4][4];
	
	for (int i=0; i<4; i++){
 3a6:	6f 5f       	subi	r22, 0xFF	; 255
 3a8:	7f 4f       	sbci	r23, 0xFF	; 255
 3aa:	64 30       	cpi	r22, 0x04	; 4
 3ac:	71 05       	cpc	r23, r1
 3ae:	b4 f3       	brlt	.-20     	; 0x39c <rotate_shape+0x4c>
 3b0:	20 e0       	ldi	r18, 0x00	; 0
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	21 c0       	rjmp	.+66     	; 0x3f8 <rotate_shape+0xa8>
		}
	}
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
			temp_shape_array[i][j] = temp[j][i];	//transpose
 3b6:	fc 01       	movw	r30, r24
 3b8:	ee 0f       	add	r30, r30
 3ba:	ff 1f       	adc	r31, r31
 3bc:	ee 0f       	add	r30, r30
 3be:	ff 1f       	adc	r31, r31
 3c0:	41 e0       	ldi	r20, 0x01	; 1
 3c2:	50 e0       	ldi	r21, 0x00	; 0
 3c4:	4c 0f       	add	r20, r28
 3c6:	5d 1f       	adc	r21, r29
 3c8:	e4 0f       	add	r30, r20
 3ca:	f5 1f       	adc	r31, r21
 3cc:	e2 0f       	add	r30, r18
 3ce:	f3 1f       	adc	r31, r19
 3d0:	40 81       	ld	r20, Z
 3d2:	f9 01       	movw	r30, r18
 3d4:	ee 0f       	add	r30, r30
 3d6:	ff 1f       	adc	r31, r31
 3d8:	ee 0f       	add	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	ec 52       	subi	r30, 0x2C	; 44
 3de:	fe 4f       	sbci	r31, 0xFE	; 254
 3e0:	e8 0f       	add	r30, r24
 3e2:	f9 1f       	adc	r31, r25
 3e4:	40 83       	st	Z, r20
			temp[i][j] = shape_array[i][j];	//copy
		}
	}
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <rotate_shape+0x9e>
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	84 30       	cpi	r24, 0x04	; 4
 3f0:	91 05       	cpc	r25, r1
 3f2:	0c f3       	brlt	.-62     	; 0x3b6 <rotate_shape+0x66>
		for (int j=0; j<4; j++){
			temp[i][j] = shape_array[i][j];	//copy
		}
	}
	
	for (int i=0; i<4; i++){
 3f4:	2f 5f       	subi	r18, 0xFF	; 255
 3f6:	3f 4f       	sbci	r19, 0xFF	; 255
 3f8:	24 30       	cpi	r18, 0x04	; 4
 3fa:	31 05       	cpc	r19, r1
 3fc:	b4 f3       	brlt	.-20     	; 0x3ea <rotate_shape+0x9a>
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	1f c0       	rjmp	.+62     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
		}
	}
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
			temp[i][j] = temp_shape_array[i][j];
 404:	cb 01       	movw	r24, r22
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	fc 01       	movw	r30, r24
 410:	ec 52       	subi	r30, 0x2C	; 44
 412:	fe 4f       	sbci	r31, 0xFE	; 254
 414:	e2 0f       	add	r30, r18
 416:	f3 1f       	adc	r31, r19
 418:	40 81       	ld	r20, Z
 41a:	e1 e0       	ldi	r30, 0x01	; 1
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	ec 0f       	add	r30, r28
 420:	fd 1f       	adc	r31, r29
 422:	8e 0f       	add	r24, r30
 424:	9f 1f       	adc	r25, r31
 426:	fc 01       	movw	r30, r24
 428:	e2 0f       	add	r30, r18
 42a:	f3 1f       	adc	r31, r19
 42c:	40 83       	st	Z, r20
			temp_shape_array[i][j] = temp[j][i];	//transpose
		}
	}
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 42e:	2f 5f       	subi	r18, 0xFF	; 255
 430:	3f 4f       	sbci	r19, 0xFF	; 255
 432:	02 c0       	rjmp	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 434:	20 e0       	ldi	r18, 0x00	; 0
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	24 30       	cpi	r18, 0x04	; 4
 43a:	31 05       	cpc	r19, r1
 43c:	1c f3       	brlt	.-58     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		for (int j=0; j<4; j++){
			temp_shape_array[i][j] = temp[j][i];	//transpose
		}
	}
	
	for (int i=0; i<4; i++){
 43e:	6f 5f       	subi	r22, 0xFF	; 255
 440:	7f 4f       	sbci	r23, 0xFF	; 255
 442:	64 30       	cpi	r22, 0x04	; 4
 444:	71 05       	cpc	r23, r1
 446:	b4 f3       	brlt	.-20     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	22 c0       	rjmp	.+68     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
		}
	}

	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
			temp_shape_array[i][j] = temp[i][3-j];	//mirror
 44e:	e3 e0       	ldi	r30, 0x03	; 3
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	e2 1b       	sub	r30, r18
 454:	f3 0b       	sbc	r31, r19
 456:	cb 01       	movw	r24, r22
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	41 e0       	ldi	r20, 0x01	; 1
 462:	50 e0       	ldi	r21, 0x00	; 0
 464:	4c 0f       	add	r20, r28
 466:	5d 1f       	adc	r21, r29
 468:	48 0f       	add	r20, r24
 46a:	59 1f       	adc	r21, r25
 46c:	e4 0f       	add	r30, r20
 46e:	f5 1f       	adc	r31, r21
 470:	40 81       	ld	r20, Z
 472:	8c 52       	subi	r24, 0x2C	; 44
 474:	9e 4f       	sbci	r25, 0xFE	; 254
 476:	fc 01       	movw	r30, r24
 478:	e2 0f       	add	r30, r18
 47a:	f3 1f       	adc	r31, r19
 47c:	40 83       	st	Z, r20
			temp[i][j] = temp_shape_array[i][j];
		}
	}

	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 47e:	2f 5f       	subi	r18, 0xFF	; 255
 480:	3f 4f       	sbci	r19, 0xFF	; 255
 482:	02 c0       	rjmp	.+4      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 484:	20 e0       	ldi	r18, 0x00	; 0
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	24 30       	cpi	r18, 0x04	; 4
 48a:	31 05       	cpc	r19, r1
 48c:	04 f3       	brlt	.-64     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
		for (int j=0; j<4; j++){
			temp[i][j] = temp_shape_array[i][j];
		}
	}

	for (int i=0; i<4; i++){
 48e:	6f 5f       	subi	r22, 0xFF	; 255
 490:	7f 4f       	sbci	r23, 0xFF	; 255
 492:	64 30       	cpi	r22, 0x04	; 4
 494:	71 05       	cpc	r23, r1
 496:	b4 f3       	brlt	.-20     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
		for (int j=0; j<4; j++){
			temp_shape_array[i][j] = temp[i][3-j];	//mirror
		}
	}
	align_top_left_justify(temp_shape_array);
 498:	84 ed       	ldi	r24, 0xD4	; 212
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	0e 94 25 01 	call	0x24a	; 0x24a <align_top_left_justify>
}
 4a0:	60 96       	adiw	r28, 0x10	; 16
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	f8 94       	cli
 4a6:	de bf       	out	0x3e, r29	; 62
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	cd bf       	out	0x3d, r28	; 61
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	08 95       	ret

000004b2 <check_valid>:

bool check_valid(int row, int col, bool shape_array[][4])
{
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	ec 01       	movw	r28, r24
	for(int i=0; i<4; i++){
 4b8:	a0 e0       	ldi	r26, 0x00	; 0
 4ba:	b0 e0       	ldi	r27, 0x00	; 0
 4bc:	2e c0       	rjmp	.+92     	; 0x51a <check_valid+0x68>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
 4be:	fd 01       	movw	r30, r26
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	ee 0f       	add	r30, r30
 4c6:	ff 1f       	adc	r31, r31
 4c8:	e4 0f       	add	r30, r20
 4ca:	f5 1f       	adc	r31, r21
 4cc:	e2 0f       	add	r30, r18
 4ce:	f3 1f       	adc	r31, r19
 4d0:	90 81       	ld	r25, Z
 4d2:	9f 3f       	cpi	r25, 0xFF	; 255
 4d4:	c9 f4       	brne	.+50     	; 0x508 <check_valid+0x56>
				if((row+i) > 15){
 4d6:	fd 01       	movw	r30, r26
 4d8:	ec 0f       	add	r30, r28
 4da:	fd 1f       	adc	r31, r29
 4dc:	e0 31       	cpi	r30, 0x10	; 16
 4de:	f1 05       	cpc	r31, r1
 4e0:	0c f5       	brge	.+66     	; 0x524 <check_valid+0x72>
					//bottom row reached
					//invalid
					return FALSE;
				}
				if((col+j) < 0 || (col+j) > 7){
 4e2:	c9 01       	movw	r24, r18
 4e4:	86 0f       	add	r24, r22
 4e6:	97 1f       	adc	r25, r23
 4e8:	88 30       	cpi	r24, 0x08	; 8
 4ea:	91 05       	cpc	r25, r1
 4ec:	e8 f4       	brcc	.+58     	; 0x528 <check_valid+0x76>
					//left/right col reached
					//invalid
					return FALSE;
				}
				if(current_display[row+i][col+j] == TRUE){
 4ee:	ee 0f       	add	r30, r30
 4f0:	ff 1f       	adc	r31, r31
 4f2:	ee 0f       	add	r30, r30
 4f4:	ff 1f       	adc	r31, r31
 4f6:	ee 0f       	add	r30, r30
 4f8:	ff 1f       	adc	r31, r31
 4fa:	ec 5a       	subi	r30, 0xAC	; 172
 4fc:	fe 4f       	sbci	r31, 0xFE	; 254
 4fe:	e8 0f       	add	r30, r24
 500:	f9 1f       	adc	r31, r25
 502:	80 81       	ld	r24, Z
 504:	8f 3f       	cpi	r24, 0xFF	; 255
 506:	91 f0       	breq	.+36     	; 0x52c <check_valid+0x7a>
}

bool check_valid(int row, int col, bool shape_array[][4])
{
	for(int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 508:	2f 5f       	subi	r18, 0xFF	; 255
 50a:	3f 4f       	sbci	r19, 0xFF	; 255
 50c:	02 c0       	rjmp	.+4      	; 0x512 <check_valid+0x60>
 50e:	20 e0       	ldi	r18, 0x00	; 0
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	24 30       	cpi	r18, 0x04	; 4
 514:	31 05       	cpc	r19, r1
 516:	9c f2       	brlt	.-90     	; 0x4be <check_valid+0xc>
	align_top_left_justify(temp_shape_array);
}

bool check_valid(int row, int col, bool shape_array[][4])
{
	for(int i=0; i<4; i++){
 518:	11 96       	adiw	r26, 0x01	; 1
 51a:	a4 30       	cpi	r26, 0x04	; 4
 51c:	b1 05       	cpc	r27, r1
 51e:	bc f3       	brlt	.-18     	; 0x50e <check_valid+0x5c>
					return FALSE;
				}
			}
		}
	}
	return TRUE;
 520:	8f ef       	ldi	r24, 0xFF	; 255
 522:	05 c0       	rjmp	.+10     	; 0x52e <check_valid+0x7c>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
				if((row+i) > 15){
					//bottom row reached
					//invalid
					return FALSE;
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	03 c0       	rjmp	.+6      	; 0x52e <check_valid+0x7c>
				}
				if((col+j) < 0 || (col+j) > 7){
					//left/right col reached
					//invalid
					return FALSE;
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	01 c0       	rjmp	.+2      	; 0x52e <check_valid+0x7c>
				}
				if(current_display[row+i][col+j] == TRUE){
					//position filled
					//invalid
					return FALSE;
 52c:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
	return TRUE;
}
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <set_shape>:

void set_shape(bool shape_array[][4])
{
 534:	dc 01       	movw	r26, r24
	for(int i=0; i<4; i++){
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	2d c0       	rjmp	.+90     	; 0x596 <set_shape+0x62>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
 53c:	fb 01       	movw	r30, r22
 53e:	ee 0f       	add	r30, r30
 540:	ff 1f       	adc	r31, r31
 542:	ee 0f       	add	r30, r30
 544:	ff 1f       	adc	r31, r31
 546:	ea 0f       	add	r30, r26
 548:	fb 1f       	adc	r31, r27
 54a:	e2 0f       	add	r30, r18
 54c:	f3 1f       	adc	r31, r19
 54e:	90 81       	ld	r25, Z
 550:	9f 3f       	cpi	r25, 0xFF	; 255
 552:	b9 f4       	brne	.+46     	; 0x582 <set_shape+0x4e>
				current_display[current_R+i][current_C+j] = shape_array[i][j];
 554:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <__data_end>
 558:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <__data_end+0x1>
 55c:	46 0f       	add	r20, r22
 55e:	57 1f       	adc	r21, r23
 560:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <current_C>
 564:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <current_C+0x1>
 568:	e2 0f       	add	r30, r18
 56a:	f3 1f       	adc	r31, r19
 56c:	44 0f       	add	r20, r20
 56e:	55 1f       	adc	r21, r21
 570:	44 0f       	add	r20, r20
 572:	55 1f       	adc	r21, r21
 574:	44 0f       	add	r20, r20
 576:	55 1f       	adc	r21, r21
 578:	4c 5a       	subi	r20, 0xAC	; 172
 57a:	5e 4f       	sbci	r21, 0xFE	; 254
 57c:	e4 0f       	add	r30, r20
 57e:	f5 1f       	adc	r31, r21
 580:	90 83       	st	Z, r25
}

void set_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 582:	2f 5f       	subi	r18, 0xFF	; 255
 584:	3f 4f       	sbci	r19, 0xFF	; 255
 586:	02 c0       	rjmp	.+4      	; 0x58c <set_shape+0x58>
 588:	20 e0       	ldi	r18, 0x00	; 0
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	24 30       	cpi	r18, 0x04	; 4
 58e:	31 05       	cpc	r19, r1
 590:	ac f2       	brlt	.-86     	; 0x53c <set_shape+0x8>
	return TRUE;
}

void set_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
 592:	6f 5f       	subi	r22, 0xFF	; 255
 594:	7f 4f       	sbci	r23, 0xFF	; 255
 596:	64 30       	cpi	r22, 0x04	; 4
 598:	71 05       	cpc	r23, r1
 59a:	b4 f3       	brlt	.-20     	; 0x588 <set_shape+0x54>
				current_display[current_R+i][current_C+j] = shape_array[i][j];
			}
		}
	}
	//_delay_ms(50);
}
 59c:	08 95       	ret

0000059e <remove_shape>:
void remove_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
 59e:	60 e0       	ldi	r22, 0x00	; 0
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	2d c0       	rjmp	.+90     	; 0x5fe <remove_shape+0x60>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
 5a4:	fb 01       	movw	r30, r22
 5a6:	ee 0f       	add	r30, r30
 5a8:	ff 1f       	adc	r31, r31
 5aa:	ee 0f       	add	r30, r30
 5ac:	ff 1f       	adc	r31, r31
 5ae:	e8 0f       	add	r30, r24
 5b0:	f9 1f       	adc	r31, r25
 5b2:	e2 0f       	add	r30, r18
 5b4:	f3 1f       	adc	r31, r19
 5b6:	40 81       	ld	r20, Z
 5b8:	4f 3f       	cpi	r20, 0xFF	; 255
 5ba:	b9 f4       	brne	.+46     	; 0x5ea <remove_shape+0x4c>
				current_display[current_R+i][current_C+j] = FALSE;
 5bc:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <__data_end>
 5c0:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <__data_end+0x1>
 5c4:	46 0f       	add	r20, r22
 5c6:	57 1f       	adc	r21, r23
 5c8:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <current_C>
 5cc:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <current_C+0x1>
 5d0:	e2 0f       	add	r30, r18
 5d2:	f3 1f       	adc	r31, r19
 5d4:	44 0f       	add	r20, r20
 5d6:	55 1f       	adc	r21, r21
 5d8:	44 0f       	add	r20, r20
 5da:	55 1f       	adc	r21, r21
 5dc:	44 0f       	add	r20, r20
 5de:	55 1f       	adc	r21, r21
 5e0:	4c 5a       	subi	r20, 0xAC	; 172
 5e2:	5e 4f       	sbci	r21, 0xFE	; 254
 5e4:	e4 0f       	add	r30, r20
 5e6:	f5 1f       	adc	r31, r21
 5e8:	10 82       	st	Z, r1
	//_delay_ms(50);
}
void remove_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
		for (int j=0; j<4; j++){
 5ea:	2f 5f       	subi	r18, 0xFF	; 255
 5ec:	3f 4f       	sbci	r19, 0xFF	; 255
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <remove_shape+0x56>
 5f0:	20 e0       	ldi	r18, 0x00	; 0
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	24 30       	cpi	r18, 0x04	; 4
 5f6:	31 05       	cpc	r19, r1
 5f8:	ac f2       	brlt	.-86     	; 0x5a4 <remove_shape+0x6>
	}
	//_delay_ms(50);
}
void remove_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
 5fa:	6f 5f       	subi	r22, 0xFF	; 255
 5fc:	7f 4f       	sbci	r23, 0xFF	; 255
 5fe:	64 30       	cpi	r22, 0x04	; 4
 600:	71 05       	cpc	r23, r1
 602:	b4 f3       	brlt	.-20     	; 0x5f0 <remove_shape+0x52>
				current_display[current_R+i][current_C+j] = FALSE;
			}
		}
	}
	//_delay_ms(100);
}
 604:	08 95       	ret

00000606 <get_col>:

int get_col(int row)
{
 606:	ac 01       	movw	r20, r24
	int col_value = 0x00;
	for (int j=0; j<8; j++){
 608:	20 e0       	ldi	r18, 0x00	; 0
 60a:	30 e0       	ldi	r19, 0x00	; 0
	//_delay_ms(100);
}

int get_col(int row)
{
	int col_value = 0x00;
 60c:	a0 e0       	ldi	r26, 0x00	; 0
 60e:	b0 e0       	ldi	r27, 0x00	; 0
	for (int j=0; j<8; j++){
 610:	1a c0       	rjmp	.+52     	; 0x646 <get_col+0x40>
		if(current_display[row][j] == TRUE){
 612:	fa 01       	movw	r30, r20
 614:	ee 0f       	add	r30, r30
 616:	ff 1f       	adc	r31, r31
 618:	ee 0f       	add	r30, r30
 61a:	ff 1f       	adc	r31, r31
 61c:	ee 0f       	add	r30, r30
 61e:	ff 1f       	adc	r31, r31
 620:	ec 5a       	subi	r30, 0xAC	; 172
 622:	fe 4f       	sbci	r31, 0xFE	; 254
 624:	e2 0f       	add	r30, r18
 626:	f3 1f       	adc	r31, r19
 628:	90 81       	ld	r25, Z
 62a:	9f 3f       	cpi	r25, 0xFF	; 255
 62c:	51 f4       	brne	.+20     	; 0x642 <get_col+0x3c>
			col_value |= 1<<(j);
 62e:	61 e0       	ldi	r22, 0x01	; 1
 630:	70 e0       	ldi	r23, 0x00	; 0
 632:	02 2e       	mov	r0, r18
 634:	02 c0       	rjmp	.+4      	; 0x63a <get_col+0x34>
 636:	66 0f       	add	r22, r22
 638:	77 1f       	adc	r23, r23
 63a:	0a 94       	dec	r0
 63c:	e2 f7       	brpl	.-8      	; 0x636 <get_col+0x30>
 63e:	a6 2b       	or	r26, r22
 640:	b7 2b       	or	r27, r23
}

int get_col(int row)
{
	int col_value = 0x00;
	for (int j=0; j<8; j++){
 642:	2f 5f       	subi	r18, 0xFF	; 255
 644:	3f 4f       	sbci	r19, 0xFF	; 255
 646:	28 30       	cpi	r18, 0x08	; 8
 648:	31 05       	cpc	r19, r1
 64a:	1c f3       	brlt	.-58     	; 0x612 <get_col+0xc>
		if(current_display[row][j] == TRUE){
			col_value |= 1<<(j);
		}
	}
	return col_value;
}
 64c:	cd 01       	movw	r24, r26
 64e:	08 95       	ret

00000650 <remove_row>:

void remove_row(int row){
	//shift rows downwards from row to 1
	for(int i = row ; i > 0 ; i--){
 650:	ac 01       	movw	r20, r24
 652:	23 c0       	rjmp	.+70     	; 0x69a <remove_row+0x4a>
		for(int j = 0 ; j< 8; j++){
			current_display[row][j] = current_display[row-1][j];
 654:	fc 01       	movw	r30, r24
 656:	31 97       	sbiw	r30, 0x01	; 1
 658:	ee 0f       	add	r30, r30
 65a:	ff 1f       	adc	r31, r31
 65c:	ee 0f       	add	r30, r30
 65e:	ff 1f       	adc	r31, r31
 660:	ee 0f       	add	r30, r30
 662:	ff 1f       	adc	r31, r31
 664:	ec 5a       	subi	r30, 0xAC	; 172
 666:	fe 4f       	sbci	r31, 0xFE	; 254
 668:	e2 0f       	add	r30, r18
 66a:	f3 1f       	adc	r31, r19
 66c:	60 81       	ld	r22, Z
 66e:	fc 01       	movw	r30, r24
 670:	ee 0f       	add	r30, r30
 672:	ff 1f       	adc	r31, r31
 674:	ee 0f       	add	r30, r30
 676:	ff 1f       	adc	r31, r31
 678:	ee 0f       	add	r30, r30
 67a:	ff 1f       	adc	r31, r31
 67c:	ec 5a       	subi	r30, 0xAC	; 172
 67e:	fe 4f       	sbci	r31, 0xFE	; 254
 680:	e2 0f       	add	r30, r18
 682:	f3 1f       	adc	r31, r19
 684:	60 83       	st	Z, r22
}

void remove_row(int row){
	//shift rows downwards from row to 1
	for(int i = row ; i > 0 ; i--){
		for(int j = 0 ; j< 8; j++){
 686:	2f 5f       	subi	r18, 0xFF	; 255
 688:	3f 4f       	sbci	r19, 0xFF	; 255
 68a:	02 c0       	rjmp	.+4      	; 0x690 <remove_row+0x40>
 68c:	20 e0       	ldi	r18, 0x00	; 0
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	28 30       	cpi	r18, 0x08	; 8
 692:	31 05       	cpc	r19, r1
 694:	fc f2       	brlt	.-66     	; 0x654 <remove_row+0x4>
	return col_value;
}

void remove_row(int row){
	//shift rows downwards from row to 1
	for(int i = row ; i > 0 ; i--){
 696:	41 50       	subi	r20, 0x01	; 1
 698:	51 09       	sbc	r21, r1
 69a:	14 16       	cp	r1, r20
 69c:	15 06       	cpc	r1, r21
 69e:	b4 f3       	brlt	.-20     	; 0x68c <remove_row+0x3c>
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	05 c0       	rjmp	.+10     	; 0x6b0 <remove_row+0x60>
			current_display[row][j] = current_display[row-1][j];
		}
	}
	//put false in row 0
	for(int i = 0 ; i < 8; i++){
		current_display[0][i] = FALSE;
 6a6:	fc 01       	movw	r30, r24
 6a8:	ec 5a       	subi	r30, 0xAC	; 172
 6aa:	fe 4f       	sbci	r31, 0xFE	; 254
 6ac:	10 82       	st	Z, r1
		for(int j = 0 ; j< 8; j++){
			current_display[row][j] = current_display[row-1][j];
		}
	}
	//put false in row 0
	for(int i = 0 ; i < 8; i++){
 6ae:	01 96       	adiw	r24, 0x01	; 1
 6b0:	88 30       	cpi	r24, 0x08	; 8
 6b2:	91 05       	cpc	r25, r1
 6b4:	c4 f3       	brlt	.-16     	; 0x6a6 <remove_row+0x56>
		current_display[0][i] = FALSE;
	}
}
 6b6:	08 95       	ret

000006b8 <update_score1x>:
void update_score1x(){
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29
	uint8_t temp ;
	for(int i = 0 ; i < 16 ; i++){
 6bc:	c0 e0       	ldi	r28, 0x00	; 0
 6be:	d0 e0       	ldi	r29, 0x00	; 0
 6c0:	30 c0       	rjmp	.+96     	; 0x722 <update_score1x+0x6a>
		temp = TRUE;
		for(int j = 0 ; j < 8; j++){
			temp &= current_display[i][j];
 6c2:	fe 01       	movw	r30, r28
 6c4:	ee 0f       	add	r30, r30
 6c6:	ff 1f       	adc	r31, r31
 6c8:	ee 0f       	add	r30, r30
 6ca:	ff 1f       	adc	r31, r31
 6cc:	ee 0f       	add	r30, r30
 6ce:	ff 1f       	adc	r31, r31
 6d0:	ec 5a       	subi	r30, 0xAC	; 172
 6d2:	fe 4f       	sbci	r31, 0xFE	; 254
 6d4:	e8 0f       	add	r30, r24
 6d6:	f9 1f       	adc	r31, r25
 6d8:	30 81       	ld	r19, Z
 6da:	23 23       	and	r18, r19
}
void update_score1x(){
	uint8_t temp ;
	for(int i = 0 ; i < 16 ; i++){
		temp = TRUE;
		for(int j = 0 ; j < 8; j++){
 6dc:	01 96       	adiw	r24, 0x01	; 1
 6de:	03 c0       	rjmp	.+6      	; 0x6e6 <update_score1x+0x2e>
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	2f ef       	ldi	r18, 0xFF	; 255
 6e6:	88 30       	cpi	r24, 0x08	; 8
 6e8:	91 05       	cpc	r25, r1
 6ea:	5c f3       	brlt	.-42     	; 0x6c2 <update_score1x+0xa>
			temp &= current_display[i][j];
		}
		if(temp == TRUE){
 6ec:	2f 3f       	cpi	r18, 0xFF	; 255
 6ee:	c1 f4       	brne	.+48     	; 0x720 <update_score1x+0x68>
			UART_send(10);
 6f0:	8a e0       	ldi	r24, 0x0A	; 10
 6f2:	0e 94 64 00 	call	0xc8	; 0xc8 <UART_send>
			PORTD |= 1 << PD7 ;
 6f6:	82 b3       	in	r24, 0x12	; 18
 6f8:	80 68       	ori	r24, 0x80	; 128
 6fa:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6fc:	8f e4       	ldi	r24, 0x4F	; 79
 6fe:	93 ec       	ldi	r25, 0xC3	; 195
 700:	01 97       	sbiw	r24, 0x01	; 1
 702:	f1 f7       	brne	.-4      	; 0x700 <update_score1x+0x48>
 704:	00 c0       	rjmp	.+0      	; 0x706 <update_score1x+0x4e>
 706:	00 00       	nop
			_delay_ms(200);
			PORTD &= ~(1 << PD7);
 708:	82 b3       	in	r24, 0x12	; 18
 70a:	8f 77       	andi	r24, 0x7F	; 127
 70c:	82 bb       	out	0x12, r24	; 18
 70e:	8f e4       	ldi	r24, 0x4F	; 79
 710:	93 ec       	ldi	r25, 0xC3	; 195
 712:	01 97       	sbiw	r24, 0x01	; 1
 714:	f1 f7       	brne	.-4      	; 0x712 <update_score1x+0x5a>
 716:	00 c0       	rjmp	.+0      	; 0x718 <update_score1x+0x60>
 718:	00 00       	nop
			_delay_ms(200);
			remove_row(i);
 71a:	ce 01       	movw	r24, r28
 71c:	0e 94 28 03 	call	0x650	; 0x650 <remove_row>
		current_display[0][i] = FALSE;
	}
}
void update_score1x(){
	uint8_t temp ;
	for(int i = 0 ; i < 16 ; i++){
 720:	21 96       	adiw	r28, 0x01	; 1
 722:	c0 31       	cpi	r28, 0x10	; 16
 724:	d1 05       	cpc	r29, r1
 726:	e4 f2       	brlt	.-72     	; 0x6e0 <update_score1x+0x28>
			PORTD &= ~(1 << PD7);
			_delay_ms(200);
			remove_row(i);
		}
	}
}
 728:	df 91       	pop	r29
 72a:	cf 91       	pop	r28
 72c:	08 95       	ret

0000072e <update_score2x>:
void update_score2x(){
 72e:	0f 93       	push	r16
 730:	1f 93       	push	r17
 732:	cf 93       	push	r28
 734:	df 93       	push	r29
	uint8_t temp ;
	for(int i = 0 ; i < 12 ; i++){
 736:	c0 e0       	ldi	r28, 0x00	; 0
 738:	d0 e0       	ldi	r29, 0x00	; 0
 73a:	43 c0       	rjmp	.+134    	; 0x7c2 <update_score2x+0x94>
		temp = TRUE;
		int ii = i;
		for(int t = 0; t < 4; t++){
			for(int j = 0 ; j < 8; j++){
				temp &= current_display[ii][j];
 73c:	fa 01       	movw	r30, r20
 73e:	ee 0f       	add	r30, r30
 740:	ff 1f       	adc	r31, r31
 742:	ee 0f       	add	r30, r30
 744:	ff 1f       	adc	r31, r31
 746:	ee 0f       	add	r30, r30
 748:	ff 1f       	adc	r31, r31
 74a:	ec 5a       	subi	r30, 0xAC	; 172
 74c:	fe 4f       	sbci	r31, 0xFE	; 254
 74e:	e8 0f       	add	r30, r24
 750:	f9 1f       	adc	r31, r25
 752:	30 81       	ld	r19, Z
 754:	23 23       	and	r18, r19
	uint8_t temp ;
	for(int i = 0 ; i < 12 ; i++){
		temp = TRUE;
		int ii = i;
		for(int t = 0; t < 4; t++){
			for(int j = 0 ; j < 8; j++){
 756:	01 96       	adiw	r24, 0x01	; 1
 758:	02 c0       	rjmp	.+4      	; 0x75e <update_score2x+0x30>
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	88 30       	cpi	r24, 0x08	; 8
 760:	91 05       	cpc	r25, r1
 762:	64 f3       	brlt	.-40     	; 0x73c <update_score2x+0xe>
				temp &= current_display[ii][j];
			}
			ii++;
 764:	4f 5f       	subi	r20, 0xFF	; 255
 766:	5f 4f       	sbci	r21, 0xFF	; 255
void update_score2x(){
	uint8_t temp ;
	for(int i = 0 ; i < 12 ; i++){
		temp = TRUE;
		int ii = i;
		for(int t = 0; t < 4; t++){
 768:	6f 5f       	subi	r22, 0xFF	; 255
 76a:	7f 4f       	sbci	r23, 0xFF	; 255
 76c:	04 c0       	rjmp	.+8      	; 0x776 <update_score2x+0x48>
 76e:	ae 01       	movw	r20, r28
 770:	60 e0       	ldi	r22, 0x00	; 0
 772:	70 e0       	ldi	r23, 0x00	; 0
 774:	2f ef       	ldi	r18, 0xFF	; 255
 776:	64 30       	cpi	r22, 0x04	; 4
 778:	71 05       	cpc	r23, r1
 77a:	7c f3       	brlt	.-34     	; 0x75a <update_score2x+0x2c>
			for(int j = 0 ; j < 8; j++){
				temp &= current_display[ii][j];
			}
			ii++;
		}
		if(temp == TRUE){
 77c:	2f 3f       	cpi	r18, 0xFF	; 255
 77e:	01 f5       	brne	.+64     	; 0x7c0 <update_score2x+0x92>
			UART_send(11);
 780:	8b e0       	ldi	r24, 0x0B	; 11
 782:	0e 94 64 00 	call	0xc8	; 0xc8 <UART_send>
			PORTD |= 1 << PD7 ;
 786:	82 b3       	in	r24, 0x12	; 18
 788:	80 68       	ori	r24, 0x80	; 128
 78a:	82 bb       	out	0x12, r24	; 18
 78c:	8f e4       	ldi	r24, 0x4F	; 79
 78e:	93 ec       	ldi	r25, 0xC3	; 195
 790:	01 97       	sbiw	r24, 0x01	; 1
 792:	f1 f7       	brne	.-4      	; 0x790 <update_score2x+0x62>
 794:	00 c0       	rjmp	.+0      	; 0x796 <update_score2x+0x68>
 796:	00 00       	nop
			_delay_ms(200);
			PORTD &= ~(1 << PD7);
 798:	82 b3       	in	r24, 0x12	; 18
 79a:	8f 77       	andi	r24, 0x7F	; 127
 79c:	82 bb       	out	0x12, r24	; 18
 79e:	8f e4       	ldi	r24, 0x4F	; 79
 7a0:	93 ec       	ldi	r25, 0xC3	; 195
 7a2:	01 97       	sbiw	r24, 0x01	; 1
 7a4:	f1 f7       	brne	.-4      	; 0x7a2 <update_score2x+0x74>
 7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <update_score2x+0x7a>
 7a8:	00 00       	nop
			_delay_ms(200);
			for(int t = 0; t < 4; t++){
 7aa:	00 e0       	ldi	r16, 0x00	; 0
 7ac:	10 e0       	ldi	r17, 0x00	; 0
 7ae:	05 c0       	rjmp	.+10     	; 0x7ba <update_score2x+0x8c>
				remove_row(i);
 7b0:	ce 01       	movw	r24, r28
 7b2:	0e 94 28 03 	call	0x650	; 0x650 <remove_row>
			UART_send(11);
			PORTD |= 1 << PD7 ;
			_delay_ms(200);
			PORTD &= ~(1 << PD7);
			_delay_ms(200);
			for(int t = 0; t < 4; t++){
 7b6:	0f 5f       	subi	r16, 0xFF	; 255
 7b8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ba:	04 30       	cpi	r16, 0x04	; 4
 7bc:	11 05       	cpc	r17, r1
 7be:	c4 f3       	brlt	.-16     	; 0x7b0 <update_score2x+0x82>
		}
	}
}
void update_score2x(){
	uint8_t temp ;
	for(int i = 0 ; i < 12 ; i++){
 7c0:	21 96       	adiw	r28, 0x01	; 1
 7c2:	cc 30       	cpi	r28, 0x0C	; 12
 7c4:	d1 05       	cpc	r29, r1
 7c6:	9c f2       	brlt	.-90     	; 0x76e <update_score2x+0x40>
			for(int t = 0; t < 4; t++){
				remove_row(i);
			}
		}
	}
}
 7c8:	df 91       	pop	r29
 7ca:	cf 91       	pop	r28
 7cc:	1f 91       	pop	r17
 7ce:	0f 91       	pop	r16
 7d0:	08 95       	ret

000007d2 <go_left>:
void go_left(){
	remove_shape(current_shape_array);
 7d2:	84 ee       	ldi	r24, 0xE4	; 228
 7d4:	91 e0       	ldi	r25, 0x01	; 1
 7d6:	0e 94 cf 02 	call	0x59e	; 0x59e <remove_shape>
	if(check_valid(current_R, current_C-1 , current_shape_array) == TRUE){
 7da:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <current_C>
 7de:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <current_C+0x1>
 7e2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
 7e6:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x1>
 7ea:	61 50       	subi	r22, 0x01	; 1
 7ec:	71 09       	sbc	r23, r1
 7ee:	44 ee       	ldi	r20, 0xE4	; 228
 7f0:	51 e0       	ldi	r21, 0x01	; 1
 7f2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <check_valid>
 7f6:	8f 3f       	cpi	r24, 0xFF	; 255
 7f8:	49 f4       	brne	.+18     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
		current_C--;
 7fa:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <current_C>
 7fe:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <current_C+0x1>
 802:	01 97       	sbiw	r24, 0x01	; 1
 804:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <current_C+0x1>
 808:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <current_C>
	}
	set_shape(current_shape_array);
 80c:	84 ee       	ldi	r24, 0xE4	; 228
 80e:	91 e0       	ldi	r25, 0x01	; 1
 810:	0e 94 9a 02 	call	0x534	; 0x534 <set_shape>
 814:	08 95       	ret

00000816 <go_right>:
}
void go_right(){
	remove_shape(current_shape_array);
 816:	84 ee       	ldi	r24, 0xE4	; 228
 818:	91 e0       	ldi	r25, 0x01	; 1
 81a:	0e 94 cf 02 	call	0x59e	; 0x59e <remove_shape>
	if(check_valid(current_R, current_C+1 , current_shape_array) == TRUE){
 81e:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <current_C>
 822:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <current_C+0x1>
 826:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
 82a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x1>
 82e:	6f 5f       	subi	r22, 0xFF	; 255
 830:	7f 4f       	sbci	r23, 0xFF	; 255
 832:	44 ee       	ldi	r20, 0xE4	; 228
 834:	51 e0       	ldi	r21, 0x01	; 1
 836:	0e 94 59 02 	call	0x4b2	; 0x4b2 <check_valid>
 83a:	8f 3f       	cpi	r24, 0xFF	; 255
 83c:	49 f4       	brne	.+18     	; 0x850 <go_right+0x3a>
		current_C++;
 83e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <current_C>
 842:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <current_C+0x1>
 846:	01 96       	adiw	r24, 0x01	; 1
 848:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <current_C+0x1>
 84c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <current_C>
	}
	set_shape(current_shape_array);
 850:	84 ee       	ldi	r24, 0xE4	; 228
 852:	91 e0       	ldi	r25, 0x01	; 1
 854:	0e 94 9a 02 	call	0x534	; 0x534 <set_shape>
 858:	08 95       	ret

0000085a <go_down>:
}
void go_down(){
	remove_shape(current_shape_array);
 85a:	84 ee       	ldi	r24, 0xE4	; 228
 85c:	91 e0       	ldi	r25, 0x01	; 1
 85e:	0e 94 cf 02 	call	0x59e	; 0x59e <remove_shape>
	if(check_valid(current_R+1, current_C , current_shape_array) == TRUE){
 862:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <current_C>
 866:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <current_C+0x1>
 86a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
 86e:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x1>
 872:	44 ee       	ldi	r20, 0xE4	; 228
 874:	51 e0       	ldi	r21, 0x01	; 1
 876:	01 96       	adiw	r24, 0x01	; 1
 878:	0e 94 59 02 	call	0x4b2	; 0x4b2 <check_valid>
 87c:	8f 3f       	cpi	r24, 0xFF	; 255
 87e:	51 f4       	brne	.+20     	; 0x894 <__stack+0x35>
		current_R++;
 880:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
 884:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x1>
 888:	01 96       	adiw	r24, 0x01	; 1
 88a:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__data_end+0x1>
 88e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
 892:	27 c0       	rjmp	.+78     	; 0x8e2 <__stack+0x83>
	}
	else{
		set_shape(current_shape_array);
 894:	84 ee       	ldi	r24, 0xE4	; 228
 896:	91 e0       	ldi	r25, 0x01	; 1
 898:	0e 94 9a 02 	call	0x534	; 0x534 <set_shape>
		current_C = 2;
 89c:	82 e0       	ldi	r24, 0x02	; 2
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <current_C+0x1>
 8a4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <current_C>
		current_R = 0;
 8a8:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <__data_end+0x1>
 8ac:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__data_end>
		for(int i = 0 ; i < 4; i++){
 8b0:	20 e0       	ldi	r18, 0x00	; 0
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	13 c0       	rjmp	.+38     	; 0x8dc <__stack+0x7d>
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = FALSE;
 8b6:	f9 01       	movw	r30, r18
 8b8:	ee 0f       	add	r30, r30
 8ba:	ff 1f       	adc	r31, r31
 8bc:	ee 0f       	add	r30, r30
 8be:	ff 1f       	adc	r31, r31
 8c0:	ec 51       	subi	r30, 0x1C	; 28
 8c2:	fe 4f       	sbci	r31, 0xFE	; 254
 8c4:	e8 0f       	add	r30, r24
 8c6:	f9 1f       	adc	r31, r25
 8c8:	10 82       	st	Z, r1
	else{
		set_shape(current_shape_array);
		current_C = 2;
		current_R = 0;
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
 8ca:	01 96       	adiw	r24, 0x01	; 1
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <__stack+0x73>
 8ce:	80 e0       	ldi	r24, 0x00	; 0
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	84 30       	cpi	r24, 0x04	; 4
 8d4:	91 05       	cpc	r25, r1
 8d6:	7c f3       	brlt	.-34     	; 0x8b6 <__stack+0x57>
	}
	else{
		set_shape(current_shape_array);
		current_C = 2;
		current_R = 0;
		for(int i = 0 ; i < 4; i++){
 8d8:	2f 5f       	subi	r18, 0xFF	; 255
 8da:	3f 4f       	sbci	r19, 0xFF	; 255
 8dc:	24 30       	cpi	r18, 0x04	; 4
 8de:	31 05       	cpc	r19, r1
 8e0:	b4 f3       	brlt	.-20     	; 0x8ce <__stack+0x6f>
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = FALSE;
			}
		}
	}
	set_shape(current_shape_array);
 8e2:	84 ee       	ldi	r24, 0xE4	; 228
 8e4:	91 e0       	ldi	r25, 0x01	; 1
 8e6:	0e 94 9a 02 	call	0x534	; 0x534 <set_shape>
 8ea:	08 95       	ret

000008ec <generate_shape>:
}
void generate_shape(int shape){
	shape = 0;
	//	shape = rand()%7;
	if( shape == 0){
		for(int i = 0 ; i < 4; i++){
 8ec:	60 e0       	ldi	r22, 0x00	; 0
 8ee:	70 e0       	ldi	r23, 0x00	; 0
 8f0:	1b c0       	rjmp	.+54     	; 0x928 <generate_shape+0x3c>
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_O_array[i][j];
 8f2:	cb 01       	movw	r24, r22
 8f4:	88 0f       	add	r24, r24
 8f6:	99 1f       	adc	r25, r25
 8f8:	88 0f       	add	r24, r24
 8fa:	99 1f       	adc	r25, r25
 8fc:	fc 01       	movw	r30, r24
 8fe:	ea 59       	subi	r30, 0x9A	; 154
 900:	ff 4f       	sbci	r31, 0xFF	; 255
 902:	e2 0f       	add	r30, r18
 904:	f3 1f       	adc	r31, r19
 906:	40 81       	ld	r20, Z
 908:	8c 51       	subi	r24, 0x1C	; 28
 90a:	9e 4f       	sbci	r25, 0xFE	; 254
 90c:	fc 01       	movw	r30, r24
 90e:	e2 0f       	add	r30, r18
 910:	f3 1f       	adc	r31, r19
 912:	40 83       	st	Z, r20
void generate_shape(int shape){
	shape = 0;
	//	shape = rand()%7;
	if( shape == 0){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
 914:	2f 5f       	subi	r18, 0xFF	; 255
 916:	3f 4f       	sbci	r19, 0xFF	; 255
 918:	02 c0       	rjmp	.+4      	; 0x91e <generate_shape+0x32>
 91a:	20 e0       	ldi	r18, 0x00	; 0
 91c:	30 e0       	ldi	r19, 0x00	; 0
 91e:	24 30       	cpi	r18, 0x04	; 4
 920:	31 05       	cpc	r19, r1
 922:	3c f3       	brlt	.-50     	; 0x8f2 <generate_shape+0x6>
}
void generate_shape(int shape){
	shape = 0;
	//	shape = rand()%7;
	if( shape == 0){
		for(int i = 0 ; i < 4; i++){
 924:	6f 5f       	subi	r22, 0xFF	; 255
 926:	7f 4f       	sbci	r23, 0xFF	; 255
 928:	64 30       	cpi	r22, 0x04	; 4
 92a:	71 05       	cpc	r23, r1
 92c:	b4 f3       	brlt	.-20     	; 0x91a <generate_shape+0x2e>
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_T_array[i][j];
			}
		}
	}
}
 92e:	08 95       	ret

00000930 <main>:


int main(void)
{
 930:	cf 93       	push	r28
 932:	df 93       	push	r29
 934:	cd b7       	in	r28, 0x3d	; 61
 936:	de b7       	in	r29, 0x3e	; 62
 938:	2c 97       	sbiw	r28, 0x0c	; 12
 93a:	0f b6       	in	r0, 0x3f	; 63
 93c:	f8 94       	cli
 93e:	de bf       	out	0x3e, r29	; 62
 940:	0f be       	out	0x3f, r0	; 63
 942:	cd bf       	out	0x3d, r28	; 61
	srand(time(0));
 944:	80 e0       	ldi	r24, 0x00	; 0
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	0e 94 49 00 	call	0x92	; 0x92 <time>
 94c:	cb 01       	movw	r24, r22
 94e:	0e 94 e7 05 	call	0xbce	; 0xbce <srand>
	DDRA = 0xFF;
 952:	8f ef       	ldi	r24, 0xFF	; 255
 954:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
 956:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
 958:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b10000100 ;
 95a:	84 e8       	ldi	r24, 0x84	; 132
 95c:	81 bb       	out	0x11, r24	; 17
	int i = 0, count = 0, r = 0;
	int temp[] = {0, 2, 3, 4, 5, 6};
 95e:	8c e0       	ldi	r24, 0x0C	; 12
 960:	e6 e4       	ldi	r30, 0x46	; 70
 962:	f1 e0       	ldi	r31, 0x01	; 1
 964:	de 01       	movw	r26, r28
 966:	11 96       	adiw	r26, 0x01	; 1
 968:	01 90       	ld	r0, Z+
 96a:	0d 92       	st	X+, r0
 96c:	8a 95       	dec	r24
 96e:	e1 f7       	brne	.-8      	; 0x968 <main+0x38>
	UART_init();
 970:	0e 94 5c 00 	call	0xb8	; 0xb8 <UART_init>
	srand(time(0));
	DDRA = 0xFF;
	DDRB = 0xFF;
	DDRC = 0xFF;
	DDRD = 0b10000100 ;
	int i = 0, count = 0, r = 0;
 974:	c1 2c       	mov	r12, r1
 976:	d1 2c       	mov	r13, r1
 978:	e1 2c       	mov	r14, r1
 97a:	f1 2c       	mov	r15, r1
 97c:	00 e0       	ldi	r16, 0x00	; 0
 97e:	10 e0       	ldi	r17, 0x00	; 0
	int temp[] = {0, 2, 3, 4, 5, 6};
	UART_init();
	while (1)
	{
		PORTC = ~row[i]; // common row connection
 980:	f8 01       	movw	r30, r16
 982:	e2 5c       	subi	r30, 0xC2	; 194
 984:	fe 4f       	sbci	r31, 0xFE	; 254
 986:	80 81       	ld	r24, Z
 988:	80 95       	com	r24
 98a:	85 bb       	out	0x15, r24	; 21
		PORTA = get_col(i); // upper matrix column
 98c:	c8 01       	movw	r24, r16
 98e:	0e 94 03 03 	call	0x606	; 0x606 <get_col>
 992:	8b bb       	out	0x1b, r24	; 27
		PORTB = get_col(i+8); // lower matrix column
 994:	c8 01       	movw	r24, r16
 996:	08 96       	adiw	r24, 0x08	; 8
 998:	0e 94 03 03 	call	0x606	; 0x606 <get_col>
 99c:	88 bb       	out	0x18, r24	; 24
		i++;
 99e:	0f 5f       	subi	r16, 0xFF	; 255
 9a0:	1f 4f       	sbci	r17, 0xFF	; 255
		if(i > 7) i = 0;
 9a2:	08 30       	cpi	r16, 0x08	; 8
 9a4:	11 05       	cpc	r17, r1
 9a6:	14 f0       	brlt	.+4      	; 0x9ac <main+0x7c>
 9a8:	00 e0       	ldi	r16, 0x00	; 0
 9aa:	10 e0       	ldi	r17, 0x00	; 0
 9ac:	87 ee       	ldi	r24, 0xE7	; 231
 9ae:	93 e0       	ldi	r25, 0x03	; 3
 9b0:	01 97       	sbiw	r24, 0x01	; 1
 9b2:	f1 f7       	brne	.-4      	; 0x9b0 <main+0x80>
 9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <main+0x86>
 9b6:	00 00       	nop
		_delay_ms(4);
		if(current_R == 0 && current_C == 2){
 9b8:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
 9bc:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x1>
 9c0:	89 2b       	or	r24, r25
 9c2:	09 f0       	breq	.+2      	; 0x9c6 <main+0x96>
 9c4:	47 c0       	rjmp	.+142    	; 0xa54 <main+0x124>
 9c6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <current_C>
 9ca:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <current_C+0x1>
 9ce:	02 97       	sbiw	r24, 0x02	; 2
 9d0:	09 f0       	breq	.+2      	; 0x9d4 <main+0xa4>
 9d2:	40 c0       	rjmp	.+128    	; 0xa54 <main+0x124>
			generate_shape(temp[i]);
 9d4:	f8 01       	movw	r30, r16
 9d6:	ee 0f       	add	r30, r30
 9d8:	ff 1f       	adc	r31, r31
 9da:	81 e0       	ldi	r24, 0x01	; 1
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	8c 0f       	add	r24, r28
 9e0:	9d 1f       	adc	r25, r29
 9e2:	e8 0f       	add	r30, r24
 9e4:	f9 1f       	adc	r31, r25
 9e6:	80 81       	ld	r24, Z
 9e8:	91 81       	ldd	r25, Z+1	; 0x01
 9ea:	0e 94 76 04 	call	0x8ec	; 0x8ec <generate_shape>
			r++; // make sure r doesn't exceed 100 later !!
 9ee:	9f ef       	ldi	r25, 0xFF	; 255
 9f0:	c9 1a       	sub	r12, r25
 9f2:	d9 0a       	sbc	r13, r25
			UART_send(rand_val[r]);
 9f4:	f6 01       	movw	r30, r12
 9f6:	ee 0f       	add	r30, r30
 9f8:	ff 1f       	adc	r31, r31
 9fa:	ea 58       	subi	r30, 0x8A	; 138
 9fc:	ff 4f       	sbci	r31, 0xFF	; 255
 9fe:	80 81       	ld	r24, Z
 a00:	0e 94 64 00 	call	0xc8	; 0xc8 <UART_send>
			remove_shape(current_shape_array);
 a04:	84 ee       	ldi	r24, 0xE4	; 228
 a06:	91 e0       	ldi	r25, 0x01	; 1
 a08:	0e 94 cf 02 	call	0x59e	; 0x59e <remove_shape>
			if(check_valid(0 , 2 , current_shape_array) == TRUE)
 a0c:	44 ee       	ldi	r20, 0xE4	; 228
 a0e:	51 e0       	ldi	r21, 0x01	; 1
 a10:	62 e0       	ldi	r22, 0x02	; 2
 a12:	70 e0       	ldi	r23, 0x00	; 0
 a14:	80 e0       	ldi	r24, 0x00	; 0
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	0e 94 59 02 	call	0x4b2	; 0x4b2 <check_valid>
 a1c:	8f 3f       	cpi	r24, 0xFF	; 255
 a1e:	29 f4       	brne	.+10     	; 0xa2a <main+0xfa>
			set_shape(current_shape_array);
 a20:	84 ee       	ldi	r24, 0xE4	; 228
 a22:	91 e0       	ldi	r25, 0x01	; 1
 a24:	0e 94 9a 02 	call	0x534	; 0x534 <set_shape>
 a28:	15 c0       	rjmp	.+42     	; 0xa54 <main+0x124>
			else{
				UART_send(9);
 a2a:	89 e0       	ldi	r24, 0x09	; 9
 a2c:	0e 94 64 00 	call	0xc8	; 0xc8 <UART_send>
				PORTD |= (1<< PD7);
 a30:	82 b3       	in	r24, 0x12	; 18
 a32:	80 68       	ori	r24, 0x80	; 128
 a34:	82 bb       	out	0x12, r24	; 18
 a36:	8f e4       	ldi	r24, 0x4F	; 79
 a38:	93 ec       	ldi	r25, 0xC3	; 195
 a3a:	01 97       	sbiw	r24, 0x01	; 1
 a3c:	f1 f7       	brne	.-4      	; 0xa3a <main+0x10a>
 a3e:	00 c0       	rjmp	.+0      	; 0xa40 <main+0x110>
 a40:	00 00       	nop
				_delay_ms(200);
				PORTD &= ~(1<< PD7);
 a42:	82 b3       	in	r24, 0x12	; 18
 a44:	8f 77       	andi	r24, 0x7F	; 127
 a46:	82 bb       	out	0x12, r24	; 18
 a48:	8f e4       	ldi	r24, 0x4F	; 79
 a4a:	93 ec       	ldi	r25, 0xC3	; 195
 a4c:	01 97       	sbiw	r24, 0x01	; 1
 a4e:	f1 f7       	brne	.-4      	; 0xa4c <main+0x11c>
 a50:	00 c0       	rjmp	.+0      	; 0xa52 <main+0x122>
 a52:	00 00       	nop
				_delay_ms(200);
			}
		}
		count++;
 a54:	9f ef       	ldi	r25, 0xFF	; 255
 a56:	e9 1a       	sub	r14, r25
 a58:	f9 0a       	sbc	r15, r25
		if(count == 50){
 a5a:	82 e3       	ldi	r24, 0x32	; 50
 a5c:	e8 16       	cp	r14, r24
 a5e:	f1 04       	cpc	r15, r1
 a60:	21 f4       	brne	.+8      	; 0xa6a <main+0x13a>
			go_down();
 a62:	0e 94 2d 04 	call	0x85a	; 0x85a <go_down>
			count = 0;
 a66:	e1 2c       	mov	r14, r1
 a68:	f1 2c       	mov	r15, r1
		}
		if(!(PIND & (1<<PD3))){
 a6a:	83 99       	sbic	0x10, 3	; 16
 a6c:	08 c0       	rjmp	.+16     	; 0xa7e <main+0x14e>
			go_left();
 a6e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <go_left>
 a72:	8f e4       	ldi	r24, 0x4F	; 79
 a74:	93 ec       	ldi	r25, 0xC3	; 195
 a76:	01 97       	sbiw	r24, 0x01	; 1
 a78:	f1 f7       	brne	.-4      	; 0xa76 <main+0x146>
 a7a:	00 c0       	rjmp	.+0      	; 0xa7c <main+0x14c>
 a7c:	00 00       	nop
			_delay_ms(200);
		}
		if(!(PIND & (1<<PD4))){
 a7e:	84 99       	sbic	0x10, 4	; 16
 a80:	08 c0       	rjmp	.+16     	; 0xa92 <main+0x162>
			go_right();
 a82:	0e 94 0b 04 	call	0x816	; 0x816 <go_right>
 a86:	8f e4       	ldi	r24, 0x4F	; 79
 a88:	93 ec       	ldi	r25, 0xC3	; 195
 a8a:	01 97       	sbiw	r24, 0x01	; 1
 a8c:	f1 f7       	brne	.-4      	; 0xa8a <main+0x15a>
 a8e:	00 c0       	rjmp	.+0      	; 0xa90 <main+0x160>
 a90:	00 00       	nop
			_delay_ms(200);
		}
		if(!(PIND & (1<<PD5))){
 a92:	85 99       	sbic	0x10, 5	; 16
 a94:	08 c0       	rjmp	.+16     	; 0xaa6 <main+0x176>
			go_down();
 a96:	0e 94 2d 04 	call	0x85a	; 0x85a <go_down>
 a9a:	8f e4       	ldi	r24, 0x4F	; 79
 a9c:	93 ec       	ldi	r25, 0xC3	; 195
 a9e:	01 97       	sbiw	r24, 0x01	; 1
 aa0:	f1 f7       	brne	.-4      	; 0xa9e <main+0x16e>
 aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <main+0x174>
 aa4:	00 00       	nop
			_delay_ms(200);
		}
		if(!(PIND & (1<<PD6))){
 aa6:	86 99       	sbic	0x10, 6	; 16
 aa8:	3c c0       	rjmp	.+120    	; 0xb22 <main+0x1f2>
			rotate_shape(current_shape_array);
 aaa:	84 ee       	ldi	r24, 0xE4	; 228
 aac:	91 e0       	ldi	r25, 0x01	; 1
 aae:	0e 94 a8 01 	call	0x350	; 0x350 <rotate_shape>
			remove_shape(current_shape_array);
 ab2:	84 ee       	ldi	r24, 0xE4	; 228
 ab4:	91 e0       	ldi	r25, 0x01	; 1
 ab6:	0e 94 cf 02 	call	0x59e	; 0x59e <remove_shape>
			if(check_valid(current_R, current_C, temp_shape_array) == TRUE){
 aba:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <current_C>
 abe:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <current_C+0x1>
 ac2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
 ac6:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x1>
 aca:	44 ed       	ldi	r20, 0xD4	; 212
 acc:	51 e0       	ldi	r21, 0x01	; 1
 ace:	0e 94 59 02 	call	0x4b2	; 0x4b2 <check_valid>
 ad2:	8f 3f       	cpi	r24, 0xFF	; 255
 ad4:	11 f5       	brne	.+68     	; 0xb1a <main+0x1ea>
 ad6:	1c c0       	rjmp	.+56     	; 0xb10 <main+0x1e0>
				for(int i = 0 ; i < 4; i++){
					for(int j = 0; j < 4; j++){
						current_shape_array[i][j] = temp_shape_array[i][j];
 ad8:	ca 01       	movw	r24, r20
 ada:	88 0f       	add	r24, r24
 adc:	99 1f       	adc	r25, r25
 ade:	88 0f       	add	r24, r24
 ae0:	99 1f       	adc	r25, r25
 ae2:	fc 01       	movw	r30, r24
 ae4:	ec 52       	subi	r30, 0x2C	; 44
 ae6:	fe 4f       	sbci	r31, 0xFE	; 254
 ae8:	e2 0f       	add	r30, r18
 aea:	f3 1f       	adc	r31, r19
 aec:	60 81       	ld	r22, Z
 aee:	8c 51       	subi	r24, 0x1C	; 28
 af0:	9e 4f       	sbci	r25, 0xFE	; 254
 af2:	fc 01       	movw	r30, r24
 af4:	e2 0f       	add	r30, r18
 af6:	f3 1f       	adc	r31, r19
 af8:	60 83       	st	Z, r22
		if(!(PIND & (1<<PD6))){
			rotate_shape(current_shape_array);
			remove_shape(current_shape_array);
			if(check_valid(current_R, current_C, temp_shape_array) == TRUE){
				for(int i = 0 ; i < 4; i++){
					for(int j = 0; j < 4; j++){
 afa:	2f 5f       	subi	r18, 0xFF	; 255
 afc:	3f 4f       	sbci	r19, 0xFF	; 255
 afe:	02 c0       	rjmp	.+4      	; 0xb04 <main+0x1d4>
 b00:	20 e0       	ldi	r18, 0x00	; 0
 b02:	30 e0       	ldi	r19, 0x00	; 0
 b04:	24 30       	cpi	r18, 0x04	; 4
 b06:	31 05       	cpc	r19, r1
 b08:	3c f3       	brlt	.-50     	; 0xad8 <main+0x1a8>
		}
		if(!(PIND & (1<<PD6))){
			rotate_shape(current_shape_array);
			remove_shape(current_shape_array);
			if(check_valid(current_R, current_C, temp_shape_array) == TRUE){
				for(int i = 0 ; i < 4; i++){
 b0a:	4f 5f       	subi	r20, 0xFF	; 255
 b0c:	5f 4f       	sbci	r21, 0xFF	; 255
 b0e:	02 c0       	rjmp	.+4      	; 0xb14 <main+0x1e4>
 b10:	40 e0       	ldi	r20, 0x00	; 0
 b12:	50 e0       	ldi	r21, 0x00	; 0
 b14:	44 30       	cpi	r20, 0x04	; 4
 b16:	51 05       	cpc	r21, r1
 b18:	9c f3       	brlt	.-26     	; 0xb00 <main+0x1d0>
					for(int j = 0; j < 4; j++){
						current_shape_array[i][j] = temp_shape_array[i][j];
					}
				}
			}
			set_shape(current_shape_array);
 b1a:	84 ee       	ldi	r24, 0xE4	; 228
 b1c:	91 e0       	ldi	r25, 0x01	; 1
 b1e:	0e 94 9a 02 	call	0x534	; 0x534 <set_shape>
		}
		update_score2x();
 b22:	0e 94 97 03 	call	0x72e	; 0x72e <update_score2x>
		update_score1x();
 b26:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <update_score1x>
		//PORTD |= 1 << PD7 ;
		//_delay_ms(200);
		//PORTD &= ~(1 << PD7);
		//_delay_ms(200);
		
	}
 b2a:	2a cf       	rjmp	.-428    	; 0x980 <main+0x50>

00000b2c <do_rand>:
 b2c:	8f 92       	push	r8
 b2e:	9f 92       	push	r9
 b30:	af 92       	push	r10
 b32:	bf 92       	push	r11
 b34:	cf 92       	push	r12
 b36:	df 92       	push	r13
 b38:	ef 92       	push	r14
 b3a:	ff 92       	push	r15
 b3c:	cf 93       	push	r28
 b3e:	df 93       	push	r29
 b40:	ec 01       	movw	r28, r24
 b42:	68 81       	ld	r22, Y
 b44:	79 81       	ldd	r23, Y+1	; 0x01
 b46:	8a 81       	ldd	r24, Y+2	; 0x02
 b48:	9b 81       	ldd	r25, Y+3	; 0x03
 b4a:	61 15       	cp	r22, r1
 b4c:	71 05       	cpc	r23, r1
 b4e:	81 05       	cpc	r24, r1
 b50:	91 05       	cpc	r25, r1
 b52:	21 f4       	brne	.+8      	; 0xb5c <do_rand+0x30>
 b54:	64 e2       	ldi	r22, 0x24	; 36
 b56:	79 ed       	ldi	r23, 0xD9	; 217
 b58:	8b e5       	ldi	r24, 0x5B	; 91
 b5a:	97 e0       	ldi	r25, 0x07	; 7
 b5c:	2d e1       	ldi	r18, 0x1D	; 29
 b5e:	33 ef       	ldi	r19, 0xF3	; 243
 b60:	41 e0       	ldi	r20, 0x01	; 1
 b62:	50 e0       	ldi	r21, 0x00	; 0
 b64:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__divmodsi4>
 b68:	49 01       	movw	r8, r18
 b6a:	5a 01       	movw	r10, r20
 b6c:	9b 01       	movw	r18, r22
 b6e:	ac 01       	movw	r20, r24
 b70:	a7 ea       	ldi	r26, 0xA7	; 167
 b72:	b1 e4       	ldi	r27, 0x41	; 65
 b74:	0e 94 11 06 	call	0xc22	; 0xc22 <__muluhisi3>
 b78:	6b 01       	movw	r12, r22
 b7a:	7c 01       	movw	r14, r24
 b7c:	ac ee       	ldi	r26, 0xEC	; 236
 b7e:	b4 ef       	ldi	r27, 0xF4	; 244
 b80:	a5 01       	movw	r20, r10
 b82:	94 01       	movw	r18, r8
 b84:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__mulohisi3>
 b88:	dc 01       	movw	r26, r24
 b8a:	cb 01       	movw	r24, r22
 b8c:	8c 0d       	add	r24, r12
 b8e:	9d 1d       	adc	r25, r13
 b90:	ae 1d       	adc	r26, r14
 b92:	bf 1d       	adc	r27, r15
 b94:	b7 ff       	sbrs	r27, 7
 b96:	03 c0       	rjmp	.+6      	; 0xb9e <do_rand+0x72>
 b98:	01 97       	sbiw	r24, 0x01	; 1
 b9a:	a1 09       	sbc	r26, r1
 b9c:	b0 48       	sbci	r27, 0x80	; 128
 b9e:	88 83       	st	Y, r24
 ba0:	99 83       	std	Y+1, r25	; 0x01
 ba2:	aa 83       	std	Y+2, r26	; 0x02
 ba4:	bb 83       	std	Y+3, r27	; 0x03
 ba6:	9f 77       	andi	r25, 0x7F	; 127
 ba8:	df 91       	pop	r29
 baa:	cf 91       	pop	r28
 bac:	ff 90       	pop	r15
 bae:	ef 90       	pop	r14
 bb0:	df 90       	pop	r13
 bb2:	cf 90       	pop	r12
 bb4:	bf 90       	pop	r11
 bb6:	af 90       	pop	r10
 bb8:	9f 90       	pop	r9
 bba:	8f 90       	pop	r8
 bbc:	08 95       	ret

00000bbe <rand_r>:
 bbe:	0e 94 96 05 	call	0xb2c	; 0xb2c <do_rand>
 bc2:	08 95       	ret

00000bc4 <rand>:
 bc4:	80 e6       	ldi	r24, 0x60	; 96
 bc6:	90 e0       	ldi	r25, 0x00	; 0
 bc8:	0e 94 96 05 	call	0xb2c	; 0xb2c <do_rand>
 bcc:	08 95       	ret

00000bce <srand>:
 bce:	a0 e0       	ldi	r26, 0x00	; 0
 bd0:	b0 e0       	ldi	r27, 0x00	; 0
 bd2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 bd6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 bda:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 bde:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 be2:	08 95       	ret

00000be4 <__divmodsi4>:
 be4:	05 2e       	mov	r0, r21
 be6:	97 fb       	bst	r25, 7
 be8:	1e f4       	brtc	.+6      	; 0xbf0 <__divmodsi4+0xc>
 bea:	00 94       	com	r0
 bec:	0e 94 09 06 	call	0xc12	; 0xc12 <__negsi2>
 bf0:	57 fd       	sbrc	r21, 7
 bf2:	07 d0       	rcall	.+14     	; 0xc02 <__divmodsi4_neg2>
 bf4:	0e 94 24 06 	call	0xc48	; 0xc48 <__udivmodsi4>
 bf8:	07 fc       	sbrc	r0, 7
 bfa:	03 d0       	rcall	.+6      	; 0xc02 <__divmodsi4_neg2>
 bfc:	4e f4       	brtc	.+18     	; 0xc10 <__divmodsi4_exit>
 bfe:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__negsi2>

00000c02 <__divmodsi4_neg2>:
 c02:	50 95       	com	r21
 c04:	40 95       	com	r20
 c06:	30 95       	com	r19
 c08:	21 95       	neg	r18
 c0a:	3f 4f       	sbci	r19, 0xFF	; 255
 c0c:	4f 4f       	sbci	r20, 0xFF	; 255
 c0e:	5f 4f       	sbci	r21, 0xFF	; 255

00000c10 <__divmodsi4_exit>:
 c10:	08 95       	ret

00000c12 <__negsi2>:
 c12:	90 95       	com	r25
 c14:	80 95       	com	r24
 c16:	70 95       	com	r23
 c18:	61 95       	neg	r22
 c1a:	7f 4f       	sbci	r23, 0xFF	; 255
 c1c:	8f 4f       	sbci	r24, 0xFF	; 255
 c1e:	9f 4f       	sbci	r25, 0xFF	; 255
 c20:	08 95       	ret

00000c22 <__muluhisi3>:
 c22:	0e 94 46 06 	call	0xc8c	; 0xc8c <__umulhisi3>
 c26:	a5 9f       	mul	r26, r21
 c28:	90 0d       	add	r25, r0
 c2a:	b4 9f       	mul	r27, r20
 c2c:	90 0d       	add	r25, r0
 c2e:	a4 9f       	mul	r26, r20
 c30:	80 0d       	add	r24, r0
 c32:	91 1d       	adc	r25, r1
 c34:	11 24       	eor	r1, r1
 c36:	08 95       	ret

00000c38 <__mulshisi3>:
 c38:	b7 ff       	sbrs	r27, 7
 c3a:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__muluhisi3>

00000c3e <__mulohisi3>:
 c3e:	0e 94 11 06 	call	0xc22	; 0xc22 <__muluhisi3>
 c42:	82 1b       	sub	r24, r18
 c44:	93 0b       	sbc	r25, r19
 c46:	08 95       	ret

00000c48 <__udivmodsi4>:
 c48:	a1 e2       	ldi	r26, 0x21	; 33
 c4a:	1a 2e       	mov	r1, r26
 c4c:	aa 1b       	sub	r26, r26
 c4e:	bb 1b       	sub	r27, r27
 c50:	fd 01       	movw	r30, r26
 c52:	0d c0       	rjmp	.+26     	; 0xc6e <__udivmodsi4_ep>

00000c54 <__udivmodsi4_loop>:
 c54:	aa 1f       	adc	r26, r26
 c56:	bb 1f       	adc	r27, r27
 c58:	ee 1f       	adc	r30, r30
 c5a:	ff 1f       	adc	r31, r31
 c5c:	a2 17       	cp	r26, r18
 c5e:	b3 07       	cpc	r27, r19
 c60:	e4 07       	cpc	r30, r20
 c62:	f5 07       	cpc	r31, r21
 c64:	20 f0       	brcs	.+8      	; 0xc6e <__udivmodsi4_ep>
 c66:	a2 1b       	sub	r26, r18
 c68:	b3 0b       	sbc	r27, r19
 c6a:	e4 0b       	sbc	r30, r20
 c6c:	f5 0b       	sbc	r31, r21

00000c6e <__udivmodsi4_ep>:
 c6e:	66 1f       	adc	r22, r22
 c70:	77 1f       	adc	r23, r23
 c72:	88 1f       	adc	r24, r24
 c74:	99 1f       	adc	r25, r25
 c76:	1a 94       	dec	r1
 c78:	69 f7       	brne	.-38     	; 0xc54 <__udivmodsi4_loop>
 c7a:	60 95       	com	r22
 c7c:	70 95       	com	r23
 c7e:	80 95       	com	r24
 c80:	90 95       	com	r25
 c82:	9b 01       	movw	r18, r22
 c84:	ac 01       	movw	r20, r24
 c86:	bd 01       	movw	r22, r26
 c88:	cf 01       	movw	r24, r30
 c8a:	08 95       	ret

00000c8c <__umulhisi3>:
 c8c:	a2 9f       	mul	r26, r18
 c8e:	b0 01       	movw	r22, r0
 c90:	b3 9f       	mul	r27, r19
 c92:	c0 01       	movw	r24, r0
 c94:	a3 9f       	mul	r26, r19
 c96:	70 0d       	add	r23, r0
 c98:	81 1d       	adc	r24, r1
 c9a:	11 24       	eor	r1, r1
 c9c:	91 1d       	adc	r25, r1
 c9e:	b2 9f       	mul	r27, r18
 ca0:	70 0d       	add	r23, r0
 ca2:	81 1d       	adc	r24, r1
 ca4:	11 24       	eor	r1, r1
 ca6:	91 1d       	adc	r25, r1
 ca8:	08 95       	ret

00000caa <_exit>:
 caa:	f8 94       	cli

00000cac <__stop_program>:
 cac:	ff cf       	rjmp	.-2      	; 0xcac <__stop_program>
