
firstCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001be0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  00001be0  00001c74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a8  008000fa  008000fa  00001d0e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026d2  00000000  00000000  00001ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007da  00000000  00000000  00004596  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015ac  00000000  00000000  00004d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b0  00000000  00000000  0000631c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065f  00000000  00000000  000066cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002577  00000000  00000000  00006d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d0  00000000  00000000  000092a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <align_top_left_justify+0xda>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__FUSE_REGION_LENGTH__+0x3a>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <Lcd4_Init+0x62>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__trampolines_end+0x1c>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__trampolines_end+0x60>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <pinChange+0x21a>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__trampolines_end+0xa8>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <pinChange+0x8>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	10 e0       	ldi	r17, 0x00	; 0
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e0 ee       	ldi	r30, 0xE0	; 224
     162:	fb e1       	ldi	r31, 0x1B	; 27
     164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0
     16a:	aa 3f       	cpi	r26, 0xFA	; 250
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
     170:	21 e0       	ldi	r18, 0x01	; 1
     172:	aa ef       	ldi	r26, 0xFA	; 250
     174:	b0 e0       	ldi	r27, 0x00	; 0
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a2 3a       	cpi	r26, 0xA2	; 162
     17c:	b2 07       	cpc	r27, r18
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 65 09 	call	0x12ca	; 0x12ca <main>
     184:	0c 94 ee 0d 	jmp	0x1bdc	; 0x1bdc <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <time>:
     18c:	fc 01       	movw	r30, r24
     18e:	0f b6       	in	r0, 0x3f	; 63
     190:	f8 94       	cli
     192:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <__system_time>
     196:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <__system_time+0x1>
     19a:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__system_time+0x2>
     19e:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__system_time+0x3>
     1a2:	0f be       	out	0x3f, r0	; 63
     1a4:	30 97       	sbiw	r30, 0x00	; 0
     1a6:	21 f0       	breq	.+8      	; 0x1b0 <time+0x24>
     1a8:	60 83       	st	Z, r22
     1aa:	71 83       	std	Z+1, r23	; 0x01
     1ac:	82 83       	std	Z+2, r24	; 0x02
     1ae:	93 83       	std	Z+3, r25	; 0x03
     1b0:	08 95       	ret

000001b2 <pinChange>:
}

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
	Lcd4_Cmd(0x08);
     1b2:	67 2b       	or	r22, r23
     1b4:	09 f0       	breq	.+2      	; 0x1b8 <pinChange+0x6>
     1b6:	df c0       	rjmp	.+446    	; 0x376 <pinChange+0x1c4>
     1b8:	00 97       	sbiw	r24, 0x00	; 0
     1ba:	21 f4       	brne	.+8      	; 0x1c4 <pinChange+0x12>
     1bc:	8b b3       	in	r24, 0x1b	; 27
     1be:	8e 7f       	andi	r24, 0xFE	; 254
     1c0:	8b bb       	out	0x1b, r24	; 27
     1c2:	08 95       	ret
     1c4:	81 30       	cpi	r24, 0x01	; 1
     1c6:	91 05       	cpc	r25, r1
     1c8:	21 f4       	brne	.+8      	; 0x1d2 <pinChange+0x20>
     1ca:	8b b3       	in	r24, 0x1b	; 27
     1cc:	8d 7f       	andi	r24, 0xFD	; 253
     1ce:	8b bb       	out	0x1b, r24	; 27
     1d0:	08 95       	ret
     1d2:	82 30       	cpi	r24, 0x02	; 2
     1d4:	91 05       	cpc	r25, r1
     1d6:	21 f4       	brne	.+8      	; 0x1e0 <pinChange+0x2e>
     1d8:	8b b3       	in	r24, 0x1b	; 27
     1da:	8b 7f       	andi	r24, 0xFB	; 251
     1dc:	8b bb       	out	0x1b, r24	; 27
     1de:	08 95       	ret
     1e0:	83 30       	cpi	r24, 0x03	; 3
     1e2:	91 05       	cpc	r25, r1
     1e4:	21 f4       	brne	.+8      	; 0x1ee <pinChange+0x3c>
     1e6:	8b b3       	in	r24, 0x1b	; 27
     1e8:	87 7f       	andi	r24, 0xF7	; 247
     1ea:	8b bb       	out	0x1b, r24	; 27
     1ec:	08 95       	ret
     1ee:	84 30       	cpi	r24, 0x04	; 4
     1f0:	91 05       	cpc	r25, r1
     1f2:	21 f4       	brne	.+8      	; 0x1fc <pinChange+0x4a>
     1f4:	8b b3       	in	r24, 0x1b	; 27
     1f6:	8f 7e       	andi	r24, 0xEF	; 239
     1f8:	8b bb       	out	0x1b, r24	; 27
     1fa:	08 95       	ret
     1fc:	85 30       	cpi	r24, 0x05	; 5
     1fe:	91 05       	cpc	r25, r1
     200:	21 f4       	brne	.+8      	; 0x20a <pinChange+0x58>
     202:	8b b3       	in	r24, 0x1b	; 27
     204:	8f 7d       	andi	r24, 0xDF	; 223
     206:	8b bb       	out	0x1b, r24	; 27
     208:	08 95       	ret
     20a:	86 30       	cpi	r24, 0x06	; 6
     20c:	91 05       	cpc	r25, r1
     20e:	21 f4       	brne	.+8      	; 0x218 <pinChange+0x66>
     210:	8b b3       	in	r24, 0x1b	; 27
     212:	8f 7b       	andi	r24, 0xBF	; 191
     214:	8b bb       	out	0x1b, r24	; 27
     216:	08 95       	ret
     218:	87 30       	cpi	r24, 0x07	; 7
     21a:	91 05       	cpc	r25, r1
     21c:	21 f4       	brne	.+8      	; 0x226 <pinChange+0x74>
     21e:	8b b3       	in	r24, 0x1b	; 27
     220:	8f 77       	andi	r24, 0x7F	; 127
     222:	8b bb       	out	0x1b, r24	; 27
     224:	08 95       	ret
     226:	8a 30       	cpi	r24, 0x0A	; 10
     228:	91 05       	cpc	r25, r1
     22a:	21 f4       	brne	.+8      	; 0x234 <pinChange+0x82>
     22c:	88 b3       	in	r24, 0x18	; 24
     22e:	8e 7f       	andi	r24, 0xFE	; 254
     230:	88 bb       	out	0x18, r24	; 24
     232:	08 95       	ret
     234:	8b 30       	cpi	r24, 0x0B	; 11
     236:	91 05       	cpc	r25, r1
     238:	21 f4       	brne	.+8      	; 0x242 <pinChange+0x90>
     23a:	88 b3       	in	r24, 0x18	; 24
     23c:	8d 7f       	andi	r24, 0xFD	; 253
     23e:	88 bb       	out	0x18, r24	; 24
     240:	08 95       	ret
     242:	8c 30       	cpi	r24, 0x0C	; 12
     244:	91 05       	cpc	r25, r1
     246:	21 f4       	brne	.+8      	; 0x250 <pinChange+0x9e>
     248:	88 b3       	in	r24, 0x18	; 24
     24a:	8b 7f       	andi	r24, 0xFB	; 251
     24c:	88 bb       	out	0x18, r24	; 24
     24e:	08 95       	ret
     250:	8d 30       	cpi	r24, 0x0D	; 13
     252:	91 05       	cpc	r25, r1
     254:	21 f4       	brne	.+8      	; 0x25e <pinChange+0xac>
     256:	88 b3       	in	r24, 0x18	; 24
     258:	87 7f       	andi	r24, 0xF7	; 247
     25a:	88 bb       	out	0x18, r24	; 24
     25c:	08 95       	ret
     25e:	8e 30       	cpi	r24, 0x0E	; 14
     260:	91 05       	cpc	r25, r1
     262:	21 f4       	brne	.+8      	; 0x26c <pinChange+0xba>
     264:	88 b3       	in	r24, 0x18	; 24
     266:	8f 7e       	andi	r24, 0xEF	; 239
     268:	88 bb       	out	0x18, r24	; 24
     26a:	08 95       	ret
     26c:	8f 30       	cpi	r24, 0x0F	; 15
     26e:	91 05       	cpc	r25, r1
     270:	21 f4       	brne	.+8      	; 0x27a <pinChange+0xc8>
     272:	88 b3       	in	r24, 0x18	; 24
     274:	8f 7d       	andi	r24, 0xDF	; 223
     276:	88 bb       	out	0x18, r24	; 24
     278:	08 95       	ret
     27a:	80 31       	cpi	r24, 0x10	; 16
     27c:	91 05       	cpc	r25, r1
     27e:	21 f4       	brne	.+8      	; 0x288 <pinChange+0xd6>
     280:	88 b3       	in	r24, 0x18	; 24
     282:	8f 7b       	andi	r24, 0xBF	; 191
     284:	88 bb       	out	0x18, r24	; 24
     286:	08 95       	ret
     288:	81 31       	cpi	r24, 0x11	; 17
     28a:	91 05       	cpc	r25, r1
     28c:	21 f4       	brne	.+8      	; 0x296 <pinChange+0xe4>
     28e:	88 b3       	in	r24, 0x18	; 24
     290:	8f 77       	andi	r24, 0x7F	; 127
     292:	88 bb       	out	0x18, r24	; 24
     294:	08 95       	ret
     296:	84 31       	cpi	r24, 0x14	; 20
     298:	91 05       	cpc	r25, r1
     29a:	21 f4       	brne	.+8      	; 0x2a4 <pinChange+0xf2>
     29c:	85 b3       	in	r24, 0x15	; 21
     29e:	8e 7f       	andi	r24, 0xFE	; 254
     2a0:	85 bb       	out	0x15, r24	; 21
     2a2:	08 95       	ret
     2a4:	85 31       	cpi	r24, 0x15	; 21
     2a6:	91 05       	cpc	r25, r1
     2a8:	21 f4       	brne	.+8      	; 0x2b2 <pinChange+0x100>
     2aa:	85 b3       	in	r24, 0x15	; 21
     2ac:	8d 7f       	andi	r24, 0xFD	; 253
     2ae:	85 bb       	out	0x15, r24	; 21
     2b0:	08 95       	ret
     2b2:	86 31       	cpi	r24, 0x16	; 22
     2b4:	91 05       	cpc	r25, r1
     2b6:	21 f4       	brne	.+8      	; 0x2c0 <pinChange+0x10e>
     2b8:	85 b3       	in	r24, 0x15	; 21
     2ba:	8b 7f       	andi	r24, 0xFB	; 251
     2bc:	85 bb       	out	0x15, r24	; 21
     2be:	08 95       	ret
     2c0:	87 31       	cpi	r24, 0x17	; 23
     2c2:	91 05       	cpc	r25, r1
     2c4:	21 f4       	brne	.+8      	; 0x2ce <pinChange+0x11c>
     2c6:	85 b3       	in	r24, 0x15	; 21
     2c8:	87 7f       	andi	r24, 0xF7	; 247
     2ca:	85 bb       	out	0x15, r24	; 21
     2cc:	08 95       	ret
     2ce:	88 31       	cpi	r24, 0x18	; 24
     2d0:	91 05       	cpc	r25, r1
     2d2:	21 f4       	brne	.+8      	; 0x2dc <pinChange+0x12a>
     2d4:	85 b3       	in	r24, 0x15	; 21
     2d6:	8f 7e       	andi	r24, 0xEF	; 239
     2d8:	85 bb       	out	0x15, r24	; 21
     2da:	08 95       	ret
     2dc:	89 31       	cpi	r24, 0x19	; 25
     2de:	91 05       	cpc	r25, r1
     2e0:	21 f4       	brne	.+8      	; 0x2ea <pinChange+0x138>
     2e2:	85 b3       	in	r24, 0x15	; 21
     2e4:	8f 7d       	andi	r24, 0xDF	; 223
     2e6:	85 bb       	out	0x15, r24	; 21
     2e8:	08 95       	ret
     2ea:	8a 31       	cpi	r24, 0x1A	; 26
     2ec:	91 05       	cpc	r25, r1
     2ee:	21 f4       	brne	.+8      	; 0x2f8 <pinChange+0x146>
     2f0:	85 b3       	in	r24, 0x15	; 21
     2f2:	8f 7b       	andi	r24, 0xBF	; 191
     2f4:	85 bb       	out	0x15, r24	; 21
     2f6:	08 95       	ret
     2f8:	8b 31       	cpi	r24, 0x1B	; 27
     2fa:	91 05       	cpc	r25, r1
     2fc:	21 f4       	brne	.+8      	; 0x306 <pinChange+0x154>
     2fe:	85 b3       	in	r24, 0x15	; 21
     300:	8f 77       	andi	r24, 0x7F	; 127
     302:	85 bb       	out	0x15, r24	; 21
     304:	08 95       	ret
     306:	8e 31       	cpi	r24, 0x1E	; 30
     308:	91 05       	cpc	r25, r1
     30a:	21 f4       	brne	.+8      	; 0x314 <pinChange+0x162>
     30c:	82 b3       	in	r24, 0x12	; 18
     30e:	8e 7f       	andi	r24, 0xFE	; 254
     310:	82 bb       	out	0x12, r24	; 18
     312:	08 95       	ret
     314:	8f 31       	cpi	r24, 0x1F	; 31
     316:	91 05       	cpc	r25, r1
     318:	21 f4       	brne	.+8      	; 0x322 <pinChange+0x170>
     31a:	82 b3       	in	r24, 0x12	; 18
     31c:	8d 7f       	andi	r24, 0xFD	; 253
     31e:	82 bb       	out	0x12, r24	; 18
     320:	08 95       	ret
     322:	80 32       	cpi	r24, 0x20	; 32
     324:	91 05       	cpc	r25, r1
     326:	21 f4       	brne	.+8      	; 0x330 <pinChange+0x17e>
     328:	82 b3       	in	r24, 0x12	; 18
     32a:	8b 7f       	andi	r24, 0xFB	; 251
     32c:	82 bb       	out	0x12, r24	; 18
     32e:	08 95       	ret
     330:	81 32       	cpi	r24, 0x21	; 33
     332:	91 05       	cpc	r25, r1
     334:	21 f4       	brne	.+8      	; 0x33e <pinChange+0x18c>
     336:	82 b3       	in	r24, 0x12	; 18
     338:	87 7f       	andi	r24, 0xF7	; 247
     33a:	82 bb       	out	0x12, r24	; 18
     33c:	08 95       	ret
     33e:	82 32       	cpi	r24, 0x22	; 34
     340:	91 05       	cpc	r25, r1
     342:	21 f4       	brne	.+8      	; 0x34c <pinChange+0x19a>
     344:	82 b3       	in	r24, 0x12	; 18
     346:	8f 7e       	andi	r24, 0xEF	; 239
     348:	82 bb       	out	0x12, r24	; 18
     34a:	08 95       	ret
     34c:	83 32       	cpi	r24, 0x23	; 35
     34e:	91 05       	cpc	r25, r1
     350:	21 f4       	brne	.+8      	; 0x35a <pinChange+0x1a8>
     352:	82 b3       	in	r24, 0x12	; 18
     354:	8f 7d       	andi	r24, 0xDF	; 223
     356:	82 bb       	out	0x12, r24	; 18
     358:	08 95       	ret
     35a:	84 32       	cpi	r24, 0x24	; 36
     35c:	91 05       	cpc	r25, r1
     35e:	21 f4       	brne	.+8      	; 0x368 <pinChange+0x1b6>
     360:	82 b3       	in	r24, 0x12	; 18
     362:	8f 7b       	andi	r24, 0xBF	; 191
     364:	82 bb       	out	0x12, r24	; 18
     366:	08 95       	ret
     368:	85 97       	sbiw	r24, 0x25	; 37
     36a:	09 f0       	breq	.+2      	; 0x36e <pinChange+0x1bc>
     36c:	e1 c0       	rjmp	.+450    	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
     36e:	82 b3       	in	r24, 0x12	; 18
     370:	8f 77       	andi	r24, 0x7F	; 127
     372:	82 bb       	out	0x12, r24	; 18
     374:	08 95       	ret
     376:	00 97       	sbiw	r24, 0x00	; 0
     378:	21 f4       	brne	.+8      	; 0x382 <pinChange+0x1d0>
     37a:	8b b3       	in	r24, 0x1b	; 27
     37c:	81 60       	ori	r24, 0x01	; 1
     37e:	8b bb       	out	0x1b, r24	; 27
     380:	08 95       	ret
     382:	81 30       	cpi	r24, 0x01	; 1
     384:	91 05       	cpc	r25, r1
     386:	21 f4       	brne	.+8      	; 0x390 <pinChange+0x1de>
     388:	8b b3       	in	r24, 0x1b	; 27
     38a:	82 60       	ori	r24, 0x02	; 2
     38c:	8b bb       	out	0x1b, r24	; 27
     38e:	08 95       	ret
     390:	82 30       	cpi	r24, 0x02	; 2
     392:	91 05       	cpc	r25, r1
     394:	21 f4       	brne	.+8      	; 0x39e <pinChange+0x1ec>
     396:	8b b3       	in	r24, 0x1b	; 27
     398:	84 60       	ori	r24, 0x04	; 4
     39a:	8b bb       	out	0x1b, r24	; 27
     39c:	08 95       	ret
     39e:	83 30       	cpi	r24, 0x03	; 3
     3a0:	91 05       	cpc	r25, r1
     3a2:	21 f4       	brne	.+8      	; 0x3ac <pinChange+0x1fa>
     3a4:	8b b3       	in	r24, 0x1b	; 27
     3a6:	88 60       	ori	r24, 0x08	; 8
     3a8:	8b bb       	out	0x1b, r24	; 27
     3aa:	08 95       	ret
     3ac:	84 30       	cpi	r24, 0x04	; 4
     3ae:	91 05       	cpc	r25, r1
     3b0:	21 f4       	brne	.+8      	; 0x3ba <pinChange+0x208>
     3b2:	8b b3       	in	r24, 0x1b	; 27
     3b4:	80 61       	ori	r24, 0x10	; 16
     3b6:	8b bb       	out	0x1b, r24	; 27
     3b8:	08 95       	ret
     3ba:	85 30       	cpi	r24, 0x05	; 5
     3bc:	91 05       	cpc	r25, r1
     3be:	21 f4       	brne	.+8      	; 0x3c8 <pinChange+0x216>
     3c0:	8b b3       	in	r24, 0x1b	; 27
     3c2:	80 62       	ori	r24, 0x20	; 32
     3c4:	8b bb       	out	0x1b, r24	; 27
     3c6:	08 95       	ret
     3c8:	86 30       	cpi	r24, 0x06	; 6
     3ca:	91 05       	cpc	r25, r1
     3cc:	21 f4       	brne	.+8      	; 0x3d6 <pinChange+0x224>
     3ce:	8b b3       	in	r24, 0x1b	; 27
     3d0:	80 64       	ori	r24, 0x40	; 64
     3d2:	8b bb       	out	0x1b, r24	; 27
     3d4:	08 95       	ret
     3d6:	87 30       	cpi	r24, 0x07	; 7
     3d8:	91 05       	cpc	r25, r1
     3da:	21 f4       	brne	.+8      	; 0x3e4 <pinChange+0x232>
     3dc:	8b b3       	in	r24, 0x1b	; 27
     3de:	80 68       	ori	r24, 0x80	; 128
     3e0:	8b bb       	out	0x1b, r24	; 27
     3e2:	08 95       	ret
     3e4:	8a 30       	cpi	r24, 0x0A	; 10
     3e6:	91 05       	cpc	r25, r1
     3e8:	21 f4       	brne	.+8      	; 0x3f2 <pinChange+0x240>
     3ea:	88 b3       	in	r24, 0x18	; 24
     3ec:	81 60       	ori	r24, 0x01	; 1
     3ee:	88 bb       	out	0x18, r24	; 24
     3f0:	08 95       	ret
     3f2:	8b 30       	cpi	r24, 0x0B	; 11
     3f4:	91 05       	cpc	r25, r1
     3f6:	21 f4       	brne	.+8      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3f8:	88 b3       	in	r24, 0x18	; 24
     3fa:	82 60       	ori	r24, 0x02	; 2
     3fc:	88 bb       	out	0x18, r24	; 24
     3fe:	08 95       	ret
     400:	8c 30       	cpi	r24, 0x0C	; 12
     402:	91 05       	cpc	r25, r1
     404:	21 f4       	brne	.+8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     406:	88 b3       	in	r24, 0x18	; 24
     408:	84 60       	ori	r24, 0x04	; 4
     40a:	88 bb       	out	0x18, r24	; 24
     40c:	08 95       	ret
     40e:	8d 30       	cpi	r24, 0x0D	; 13
     410:	91 05       	cpc	r25, r1
     412:	21 f4       	brne	.+8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     414:	88 b3       	in	r24, 0x18	; 24
     416:	88 60       	ori	r24, 0x08	; 8
     418:	88 bb       	out	0x18, r24	; 24
     41a:	08 95       	ret
     41c:	8e 30       	cpi	r24, 0x0E	; 14
     41e:	91 05       	cpc	r25, r1
     420:	21 f4       	brne	.+8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     422:	88 b3       	in	r24, 0x18	; 24
     424:	80 61       	ori	r24, 0x10	; 16
     426:	88 bb       	out	0x18, r24	; 24
     428:	08 95       	ret
     42a:	8f 30       	cpi	r24, 0x0F	; 15
     42c:	91 05       	cpc	r25, r1
     42e:	21 f4       	brne	.+8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     430:	88 b3       	in	r24, 0x18	; 24
     432:	80 62       	ori	r24, 0x20	; 32
     434:	88 bb       	out	0x18, r24	; 24
     436:	08 95       	ret
     438:	80 31       	cpi	r24, 0x10	; 16
     43a:	91 05       	cpc	r25, r1
     43c:	21 f4       	brne	.+8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     43e:	88 b3       	in	r24, 0x18	; 24
     440:	80 64       	ori	r24, 0x40	; 64
     442:	88 bb       	out	0x18, r24	; 24
     444:	08 95       	ret
     446:	81 31       	cpi	r24, 0x11	; 17
     448:	91 05       	cpc	r25, r1
     44a:	21 f4       	brne	.+8      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     44c:	88 b3       	in	r24, 0x18	; 24
     44e:	80 68       	ori	r24, 0x80	; 128
     450:	88 bb       	out	0x18, r24	; 24
     452:	08 95       	ret
     454:	84 31       	cpi	r24, 0x14	; 20
     456:	91 05       	cpc	r25, r1
     458:	21 f4       	brne	.+8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     45a:	85 b3       	in	r24, 0x15	; 21
     45c:	81 60       	ori	r24, 0x01	; 1
     45e:	85 bb       	out	0x15, r24	; 21
     460:	08 95       	ret
     462:	85 31       	cpi	r24, 0x15	; 21
     464:	91 05       	cpc	r25, r1
     466:	21 f4       	brne	.+8      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     468:	85 b3       	in	r24, 0x15	; 21
     46a:	82 60       	ori	r24, 0x02	; 2
     46c:	85 bb       	out	0x15, r24	; 21
     46e:	08 95       	ret
     470:	86 31       	cpi	r24, 0x16	; 22
     472:	91 05       	cpc	r25, r1
     474:	21 f4       	brne	.+8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
     476:	85 b3       	in	r24, 0x15	; 21
     478:	84 60       	ori	r24, 0x04	; 4
     47a:	85 bb       	out	0x15, r24	; 21
     47c:	08 95       	ret
     47e:	87 31       	cpi	r24, 0x17	; 23
     480:	91 05       	cpc	r25, r1
     482:	21 f4       	brne	.+8      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
     484:	85 b3       	in	r24, 0x15	; 21
     486:	88 60       	ori	r24, 0x08	; 8
     488:	85 bb       	out	0x15, r24	; 21
     48a:	08 95       	ret
     48c:	88 31       	cpi	r24, 0x18	; 24
     48e:	91 05       	cpc	r25, r1
     490:	21 f4       	brne	.+8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
     492:	85 b3       	in	r24, 0x15	; 21
     494:	80 61       	ori	r24, 0x10	; 16
     496:	85 bb       	out	0x15, r24	; 21
     498:	08 95       	ret
     49a:	89 31       	cpi	r24, 0x19	; 25
     49c:	91 05       	cpc	r25, r1
     49e:	21 f4       	brne	.+8      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     4a0:	85 b3       	in	r24, 0x15	; 21
     4a2:	80 62       	ori	r24, 0x20	; 32
     4a4:	85 bb       	out	0x15, r24	; 21
     4a6:	08 95       	ret
     4a8:	8a 31       	cpi	r24, 0x1A	; 26
     4aa:	91 05       	cpc	r25, r1
     4ac:	21 f4       	brne	.+8      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     4ae:	85 b3       	in	r24, 0x15	; 21
     4b0:	80 64       	ori	r24, 0x40	; 64
     4b2:	85 bb       	out	0x15, r24	; 21
     4b4:	08 95       	ret
     4b6:	8b 31       	cpi	r24, 0x1B	; 27
     4b8:	91 05       	cpc	r25, r1
     4ba:	21 f4       	brne	.+8      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
     4bc:	85 b3       	in	r24, 0x15	; 21
     4be:	80 68       	ori	r24, 0x80	; 128
     4c0:	85 bb       	out	0x15, r24	; 21
     4c2:	08 95       	ret
     4c4:	8e 31       	cpi	r24, 0x1E	; 30
     4c6:	91 05       	cpc	r25, r1
     4c8:	21 f4       	brne	.+8      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
     4ca:	82 b3       	in	r24, 0x12	; 18
     4cc:	81 60       	ori	r24, 0x01	; 1
     4ce:	82 bb       	out	0x12, r24	; 18
     4d0:	08 95       	ret
     4d2:	8f 31       	cpi	r24, 0x1F	; 31
     4d4:	91 05       	cpc	r25, r1
     4d6:	21 f4       	brne	.+8      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
     4d8:	82 b3       	in	r24, 0x12	; 18
     4da:	82 60       	ori	r24, 0x02	; 2
     4dc:	82 bb       	out	0x12, r24	; 18
     4de:	08 95       	ret
     4e0:	80 32       	cpi	r24, 0x20	; 32
     4e2:	91 05       	cpc	r25, r1
     4e4:	21 f4       	brne	.+8      	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
     4e6:	82 b3       	in	r24, 0x12	; 18
     4e8:	84 60       	ori	r24, 0x04	; 4
     4ea:	82 bb       	out	0x12, r24	; 18
     4ec:	08 95       	ret
     4ee:	81 32       	cpi	r24, 0x21	; 33
     4f0:	91 05       	cpc	r25, r1
     4f2:	21 f4       	brne	.+8      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
     4f4:	82 b3       	in	r24, 0x12	; 18
     4f6:	88 60       	ori	r24, 0x08	; 8
     4f8:	82 bb       	out	0x12, r24	; 18
     4fa:	08 95       	ret
     4fc:	82 32       	cpi	r24, 0x22	; 34
     4fe:	91 05       	cpc	r25, r1
     500:	21 f4       	brne	.+8      	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
     502:	82 b3       	in	r24, 0x12	; 18
     504:	80 61       	ori	r24, 0x10	; 16
     506:	82 bb       	out	0x12, r24	; 18
     508:	08 95       	ret
     50a:	83 32       	cpi	r24, 0x23	; 35
     50c:	91 05       	cpc	r25, r1
     50e:	21 f4       	brne	.+8      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
     510:	82 b3       	in	r24, 0x12	; 18
     512:	80 62       	ori	r24, 0x20	; 32
     514:	82 bb       	out	0x12, r24	; 18
     516:	08 95       	ret
     518:	84 32       	cpi	r24, 0x24	; 36
     51a:	91 05       	cpc	r25, r1
     51c:	21 f4       	brne	.+8      	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
     51e:	82 b3       	in	r24, 0x12	; 18
     520:	80 64       	ori	r24, 0x40	; 64
     522:	82 bb       	out	0x12, r24	; 18
     524:	08 95       	ret
     526:	85 97       	sbiw	r24, 0x25	; 37
     528:	19 f4       	brne	.+6      	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
     52a:	82 b3       	in	r24, 0x12	; 18
     52c:	80 68       	ori	r24, 0x80	; 128
     52e:	82 bb       	out	0x12, r24	; 18
     530:	08 95       	ret

00000532 <Lcd4_Port>:
     532:	cf 93       	push	r28
     534:	c8 2f       	mov	r28, r24
     536:	80 ff       	sbrs	r24, 0
     538:	07 c0       	rjmp	.+14     	; 0x548 <Lcd4_Port+0x16>
     53a:	61 e0       	ldi	r22, 0x01	; 1
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	82 e2       	ldi	r24, 0x22	; 34
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinChange>
     546:	06 c0       	rjmp	.+12     	; 0x554 <Lcd4_Port+0x22>
     548:	60 e0       	ldi	r22, 0x00	; 0
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	82 e2       	ldi	r24, 0x22	; 34
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinChange>
     554:	c1 ff       	sbrs	r28, 1
     556:	07 c0       	rjmp	.+14     	; 0x566 <Lcd4_Port+0x34>
     558:	61 e0       	ldi	r22, 0x01	; 1
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	83 e2       	ldi	r24, 0x23	; 35
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinChange>
     564:	06 c0       	rjmp	.+12     	; 0x572 <Lcd4_Port+0x40>
     566:	60 e0       	ldi	r22, 0x00	; 0
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	83 e2       	ldi	r24, 0x23	; 35
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinChange>
     572:	c2 ff       	sbrs	r28, 2
     574:	07 c0       	rjmp	.+14     	; 0x584 <Lcd4_Port+0x52>
     576:	61 e0       	ldi	r22, 0x01	; 1
     578:	70 e0       	ldi	r23, 0x00	; 0
     57a:	84 e2       	ldi	r24, 0x24	; 36
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinChange>
     582:	06 c0       	rjmp	.+12     	; 0x590 <Lcd4_Port+0x5e>
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	84 e2       	ldi	r24, 0x24	; 36
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinChange>
     590:	c3 ff       	sbrs	r28, 3
     592:	07 c0       	rjmp	.+14     	; 0x5a2 <Lcd4_Port+0x70>
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	85 e2       	ldi	r24, 0x25	; 37
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinChange>
     5a0:	06 c0       	rjmp	.+12     	; 0x5ae <Lcd4_Port+0x7c>
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	85 e2       	ldi	r24, 0x25	; 37
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinChange>
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret

000005b2 <Lcd4_Cmd>:
     5b2:	cf 93       	push	r28
     5b4:	c8 2f       	mov	r28, r24
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	8a e1       	ldi	r24, 0x1A	; 26
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinChange>
     5c2:	8c 2f       	mov	r24, r28
     5c4:	0e 94 99 02 	call	0x532	; 0x532 <Lcd4_Port>
     5c8:	61 e0       	ldi	r22, 0x01	; 1
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	8b e1       	ldi	r24, 0x1B	; 27
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinChange>
     5d4:	89 ef       	ldi	r24, 0xF9	; 249
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	01 97       	sbiw	r24, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <Lcd4_Cmd+0x26>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <Lcd4_Cmd+0x2c>
     5de:	00 00       	nop
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	8b e1       	ldi	r24, 0x1B	; 27
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinChange>
     5ec:	89 ef       	ldi	r24, 0xF9	; 249
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	01 97       	sbiw	r24, 0x01	; 1
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <Lcd4_Cmd+0x3e>
     5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <Lcd4_Cmd+0x44>
     5f6:	00 00       	nop
     5f8:	cf 91       	pop	r28
     5fa:	08 95       	ret

000005fc <Lcd4_Set_Cursor>:
     5fc:	cf 93       	push	r28
     5fe:	81 30       	cpi	r24, 0x01	; 1
     600:	61 f4       	brne	.+24     	; 0x61a <Lcd4_Set_Cursor+0x1e>
     602:	80 e8       	ldi	r24, 0x80	; 128
     604:	86 0f       	add	r24, r22
     606:	c6 2f       	mov	r28, r22
     608:	cf 70       	andi	r28, 0x0F	; 15
     60a:	82 95       	swap	r24
     60c:	8f 70       	andi	r24, 0x0F	; 15
     60e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <Lcd4_Cmd>
     612:	8c 2f       	mov	r24, r28
     614:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <Lcd4_Cmd>
     618:	0d c0       	rjmp	.+26     	; 0x634 <Lcd4_Set_Cursor+0x38>
     61a:	82 30       	cpi	r24, 0x02	; 2
     61c:	59 f4       	brne	.+22     	; 0x634 <Lcd4_Set_Cursor+0x38>
     61e:	80 ec       	ldi	r24, 0xC0	; 192
     620:	86 0f       	add	r24, r22
     622:	c6 2f       	mov	r28, r22
     624:	cf 70       	andi	r28, 0x0F	; 15
     626:	82 95       	swap	r24
     628:	8f 70       	andi	r24, 0x0F	; 15
     62a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <Lcd4_Cmd>
     62e:	8c 2f       	mov	r24, r28
     630:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <Lcd4_Cmd>
     634:	cf 91       	pop	r28
     636:	08 95       	ret

00000638 <Lcd4_Init>:
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	0e 94 99 02 	call	0x532	; 0x532 <Lcd4_Port>
     63e:	87 e8       	ldi	r24, 0x87	; 135
     640:	93 e1       	ldi	r25, 0x13	; 19
     642:	01 97       	sbiw	r24, 0x01	; 1
     644:	f1 f7       	brne	.-4      	; 0x642 <Lcd4_Init+0xa>
     646:	00 c0       	rjmp	.+0      	; 0x648 <Lcd4_Init+0x10>
     648:	00 00       	nop
     64a:	83 e0       	ldi	r24, 0x03	; 3
     64c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <Lcd4_Cmd>
     650:	81 ee       	ldi	r24, 0xE1	; 225
     652:	94 e0       	ldi	r25, 0x04	; 4
     654:	01 97       	sbiw	r24, 0x01	; 1
     656:	f1 f7       	brne	.-4      	; 0x654 <Lcd4_Init+0x1c>
     658:	00 c0       	rjmp	.+0      	; 0x65a <Lcd4_Init+0x22>
     65a:	00 00       	nop
     65c:	83 e0       	ldi	r24, 0x03	; 3
     65e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <Lcd4_Cmd>
     662:	8d eb       	ldi	r24, 0xBD	; 189
     664:	9a e0       	ldi	r25, 0x0A	; 10
     666:	01 97       	sbiw	r24, 0x01	; 1
     668:	f1 f7       	brne	.-4      	; 0x666 <Lcd4_Init+0x2e>
     66a:	00 c0       	rjmp	.+0      	; 0x66c <Lcd4_Init+0x34>
     66c:	00 00       	nop
     66e:	83 e0       	ldi	r24, 0x03	; 3
     670:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <Lcd4_Cmd>
     674:	82 e0       	ldi	r24, 0x02	; 2
     676:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <Lcd4_Cmd>
     67a:	82 e0       	ldi	r24, 0x02	; 2
     67c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <Lcd4_Cmd>
     680:	88 e0       	ldi	r24, 0x08	; 8
     682:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <Lcd4_Cmd>
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <Lcd4_Cmd>
     68c:	8c e0       	ldi	r24, 0x0C	; 12
     68e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <Lcd4_Cmd>
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <Lcd4_Cmd>
     698:	86 e0       	ldi	r24, 0x06	; 6
     69a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <Lcd4_Cmd>
     69e:	08 95       	ret

000006a0 <Lcd4_Write_Char>:
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	d8 2f       	mov	r29, r24
     6a6:	df 70       	andi	r29, 0x0F	; 15
     6a8:	c8 2f       	mov	r28, r24
     6aa:	c0 7f       	andi	r28, 0xF0	; 240
     6ac:	61 e0       	ldi	r22, 0x01	; 1
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	8a e1       	ldi	r24, 0x1A	; 26
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinChange>
     6b8:	8c 2f       	mov	r24, r28
     6ba:	82 95       	swap	r24
     6bc:	8f 70       	andi	r24, 0x0F	; 15
     6be:	0e 94 99 02 	call	0x532	; 0x532 <Lcd4_Port>
     6c2:	61 e0       	ldi	r22, 0x01	; 1
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	8b e1       	ldi	r24, 0x1B	; 27
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinChange>
     6ce:	89 ef       	ldi	r24, 0xF9	; 249
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <Lcd4_Write_Char+0x32>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <Lcd4_Write_Char+0x38>
     6d8:	00 00       	nop
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	8b e1       	ldi	r24, 0x1B	; 27
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinChange>
     6e6:	89 ef       	ldi	r24, 0xF9	; 249
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <Lcd4_Write_Char+0x4a>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <Lcd4_Write_Char+0x50>
     6f0:	00 00       	nop
     6f2:	8d 2f       	mov	r24, r29
     6f4:	0e 94 99 02 	call	0x532	; 0x532 <Lcd4_Port>
     6f8:	61 e0       	ldi	r22, 0x01	; 1
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	8b e1       	ldi	r24, 0x1B	; 27
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinChange>
     704:	89 ef       	ldi	r24, 0xF9	; 249
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	f1 f7       	brne	.-4      	; 0x708 <Lcd4_Write_Char+0x68>
     70c:	00 c0       	rjmp	.+0      	; 0x70e <Lcd4_Write_Char+0x6e>
     70e:	00 00       	nop
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	8b e1       	ldi	r24, 0x1B	; 27
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <pinChange>
     71c:	89 ef       	ldi	r24, 0xF9	; 249
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <Lcd4_Write_Char+0x80>
     724:	00 c0       	rjmp	.+0      	; 0x726 <Lcd4_Write_Char+0x86>
     726:	00 00       	nop
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	08 95       	ret

0000072e <Lcd4_Write_String>:
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	8c 01       	movw	r16, r24
     738:	c0 e0       	ldi	r28, 0x00	; 0
     73a:	d0 e0       	ldi	r29, 0x00	; 0
     73c:	03 c0       	rjmp	.+6      	; 0x744 <Lcd4_Write_String+0x16>
     73e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Lcd4_Write_Char>
     742:	21 96       	adiw	r28, 0x01	; 1
     744:	f8 01       	movw	r30, r16
     746:	ec 0f       	add	r30, r28
     748:	fd 1f       	adc	r31, r29
     74a:	80 81       	ld	r24, Z
     74c:	81 11       	cpse	r24, r1
     74e:	f7 cf       	rjmp	.-18     	; 0x73e <Lcd4_Write_String+0x10>
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	08 95       	ret

0000075a <row_shift>:
volatile int current_C = 2;
int current_shape = -1;
int score_update = 0;

void row_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
     75a:	cf 92       	push	r12
     75c:	df 92       	push	r13
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
	for(int counter=0; counter<shift_count; counter++){
     76a:	c1 2c       	mov	r12, r1
     76c:	d1 2c       	mov	r13, r1
     76e:	47 c0       	rjmp	.+142    	; 0x7fe <row_shift+0xa4>
		int index = 0;
		if (direction>0){
     770:	14 16       	cp	r1, r20
     772:	15 06       	cpc	r1, r21
     774:	24 f4       	brge	.+8      	; 0x77e <row_shift+0x24>
			index = length-1;
     776:	8c 01       	movw	r16, r24
     778:	01 50       	subi	r16, 0x01	; 1
     77a:	11 09       	sbc	r17, r1
     77c:	02 c0       	rjmp	.+4      	; 0x782 <row_shift+0x28>
int score_update = 0;

void row_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
	for(int counter=0; counter<shift_count; counter++){
		int index = 0;
     77e:	00 e0       	ldi	r16, 0x00	; 0
     780:	10 e0       	ldi	r17, 0x00	; 0
     782:	e1 2c       	mov	r14, r1
     784:	f1 2c       	mov	r15, r1
     786:	22 c0       	rjmp	.+68     	; 0x7cc <row_shift+0x72>
			index = length-1;
		}

		for (int i=0; i<length-1; i++){
			for (int j=0; j<length; j++){
				shape_array[index][j] = shape_array[index-direction][j];
     788:	d8 01       	movw	r26, r16
     78a:	aa 0f       	add	r26, r26
     78c:	bb 1f       	adc	r27, r27
     78e:	aa 0f       	add	r26, r26
     790:	bb 1f       	adc	r27, r27
     792:	a6 0f       	add	r26, r22
     794:	b7 1f       	adc	r27, r23
     796:	f8 01       	movw	r30, r16
     798:	e4 1b       	sub	r30, r20
     79a:	f5 0b       	sbc	r31, r21
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	ee 0f       	add	r30, r30
     7a2:	ff 1f       	adc	r31, r31
     7a4:	e6 0f       	add	r30, r22
     7a6:	f7 1f       	adc	r31, r23
     7a8:	ec 0f       	add	r30, r28
     7aa:	fd 1f       	adc	r31, r29
     7ac:	e0 81       	ld	r30, Z
     7ae:	ac 0f       	add	r26, r28
     7b0:	bd 1f       	adc	r27, r29
     7b2:	ec 93       	st	X, r30
		if (direction>0){
			index = length-1;
		}

		for (int i=0; i<length-1; i++){
			for (int j=0; j<length; j++){
     7b4:	21 96       	adiw	r28, 0x01	; 1
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <row_shift+0x62>
     7b8:	c0 e0       	ldi	r28, 0x00	; 0
     7ba:	d0 e0       	ldi	r29, 0x00	; 0
     7bc:	c8 17       	cp	r28, r24
     7be:	d9 07       	cpc	r29, r25
     7c0:	1c f3       	brlt	.-58     	; 0x788 <row_shift+0x2e>
				shape_array[index][j] = shape_array[index-direction][j];
			}
			index = index - direction;
     7c2:	04 1b       	sub	r16, r20
     7c4:	15 0b       	sbc	r17, r21
		int index = 0;
		if (direction>0){
			index = length-1;
		}

		for (int i=0; i<length-1; i++){
     7c6:	ef ef       	ldi	r30, 0xFF	; 255
     7c8:	ee 1a       	sub	r14, r30
     7ca:	fe 0a       	sbc	r15, r30
     7cc:	fc 01       	movw	r30, r24
     7ce:	31 97       	sbiw	r30, 0x01	; 1
     7d0:	ee 16       	cp	r14, r30
     7d2:	ff 06       	cpc	r15, r31
     7d4:	8c f3       	brlt	.-30     	; 0x7b8 <row_shift+0x5e>
     7d6:	a0 e0       	ldi	r26, 0x00	; 0
     7d8:	b0 e0       	ldi	r27, 0x00	; 0
     7da:	0b c0       	rjmp	.+22     	; 0x7f2 <row_shift+0x98>
				shape_array[index][j] = shape_array[index-direction][j];
			}
			index = index - direction;
		}
		for (int j=0; j<length; j++){
			shape_array[index][j] = FALSE;
     7dc:	f8 01       	movw	r30, r16
     7de:	ee 0f       	add	r30, r30
     7e0:	ff 1f       	adc	r31, r31
     7e2:	ee 0f       	add	r30, r30
     7e4:	ff 1f       	adc	r31, r31
     7e6:	e6 0f       	add	r30, r22
     7e8:	f7 1f       	adc	r31, r23
     7ea:	ea 0f       	add	r30, r26
     7ec:	fb 1f       	adc	r31, r27
     7ee:	10 82       	st	Z, r1
			for (int j=0; j<length; j++){
				shape_array[index][j] = shape_array[index-direction][j];
			}
			index = index - direction;
		}
		for (int j=0; j<length; j++){
     7f0:	11 96       	adiw	r26, 0x01	; 1
     7f2:	a8 17       	cp	r26, r24
     7f4:	b9 07       	cpc	r27, r25
     7f6:	94 f3       	brlt	.-28     	; 0x7dc <row_shift+0x82>
int current_shape = -1;
int score_update = 0;

void row_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
	for(int counter=0; counter<shift_count; counter++){
     7f8:	ef ef       	ldi	r30, 0xFF	; 255
     7fa:	ce 1a       	sub	r12, r30
     7fc:	de 0a       	sbc	r13, r30
     7fe:	c2 16       	cp	r12, r18
     800:	d3 06       	cpc	r13, r19
     802:	0c f4       	brge	.+2      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     804:	b5 cf       	rjmp	.-150    	; 0x770 <row_shift+0x16>
		}
		for (int j=0; j<length; j++){
			shape_array[index][j] = FALSE;
		}
	}
}
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	1f 91       	pop	r17
     80c:	0f 91       	pop	r16
     80e:	ff 90       	pop	r15
     810:	ef 90       	pop	r14
     812:	df 90       	pop	r13
     814:	cf 90       	pop	r12
     816:	08 95       	ret

00000818 <col_shift>:

void col_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
     818:	af 92       	push	r10
     81a:	bf 92       	push	r11
     81c:	cf 92       	push	r12
     81e:	df 92       	push	r13
     820:	ef 92       	push	r14
     822:	ff 92       	push	r15
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	5c 01       	movw	r10, r24
     82e:	79 01       	movw	r14, r18
	for(int counter=0; counter<shift_count; counter++){
     830:	00 e0       	ldi	r16, 0x00	; 0
     832:	10 e0       	ldi	r17, 0x00	; 0
     834:	40 c0       	rjmp	.+128    	; 0x8b6 <__stack+0x57>
		int index = 0;
		if (direction>0){
     836:	14 16       	cp	r1, r20
     838:	15 06       	cpc	r1, r21
     83a:	1c f4       	brge	.+6      	; 0x842 <col_shift+0x2a>
			index = length-1;
     83c:	c5 01       	movw	r24, r10
     83e:	01 97       	sbiw	r24, 0x01	; 1
     840:	02 c0       	rjmp	.+4      	; 0x846 <col_shift+0x2e>
}

void col_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
	for(int counter=0; counter<shift_count; counter++){
		int index = 0;
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	1c c0       	rjmp	.+56     	; 0x884 <__stack+0x25>
			index = length-1;
		}

		for (int j=0; j<length-1; j++){
			for (int i=0; i<length; i++){
				shape_array[i][index] = shape_array[i][index-direction];
     84c:	fd 01       	movw	r30, r26
     84e:	ee 0f       	add	r30, r30
     850:	ff 1f       	adc	r31, r31
     852:	ee 0f       	add	r30, r30
     854:	ff 1f       	adc	r31, r31
     856:	e6 0f       	add	r30, r22
     858:	f7 1f       	adc	r31, r23
     85a:	6c 01       	movw	r12, r24
     85c:	c4 1a       	sub	r12, r20
     85e:	d5 0a       	sbc	r13, r21
     860:	ce 0e       	add	r12, r30
     862:	df 1e       	adc	r13, r31
     864:	e6 01       	movw	r28, r12
     866:	d8 80       	ld	r13, Y
     868:	e8 0f       	add	r30, r24
     86a:	f9 1f       	adc	r31, r25
     86c:	d0 82       	st	Z, r13
		if (direction>0){
			index = length-1;
		}

		for (int j=0; j<length-1; j++){
			for (int i=0; i<length; i++){
     86e:	11 96       	adiw	r26, 0x01	; 1
     870:	02 c0       	rjmp	.+4      	; 0x876 <__stack+0x17>
     872:	a0 e0       	ldi	r26, 0x00	; 0
     874:	b0 e0       	ldi	r27, 0x00	; 0
     876:	aa 15       	cp	r26, r10
     878:	bb 05       	cpc	r27, r11
     87a:	44 f3       	brlt	.-48     	; 0x84c <col_shift+0x34>
				shape_array[i][index] = shape_array[i][index-direction];
			}
			index = index - direction;
     87c:	84 1b       	sub	r24, r20
     87e:	95 0b       	sbc	r25, r21
		int index = 0;
		if (direction>0){
			index = length-1;
		}

		for (int j=0; j<length-1; j++){
     880:	2f 5f       	subi	r18, 0xFF	; 255
     882:	3f 4f       	sbci	r19, 0xFF	; 255
     884:	f5 01       	movw	r30, r10
     886:	31 97       	sbiw	r30, 0x01	; 1
     888:	2e 17       	cp	r18, r30
     88a:	3f 07       	cpc	r19, r31
     88c:	94 f3       	brlt	.-28     	; 0x872 <__stack+0x13>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	0c c0       	rjmp	.+24     	; 0x8ac <__stack+0x4d>
				shape_array[i][index] = shape_array[i][index-direction];
			}
			index = index - direction;
		}
		for (int i=0; i<length; i++){
			shape_array[i][index] = FALSE;
     894:	f9 01       	movw	r30, r18
     896:	ee 0f       	add	r30, r30
     898:	ff 1f       	adc	r31, r31
     89a:	ee 0f       	add	r30, r30
     89c:	ff 1f       	adc	r31, r31
     89e:	e6 0f       	add	r30, r22
     8a0:	f7 1f       	adc	r31, r23
     8a2:	e8 0f       	add	r30, r24
     8a4:	f9 1f       	adc	r31, r25
     8a6:	10 82       	st	Z, r1
			for (int i=0; i<length; i++){
				shape_array[i][index] = shape_array[i][index-direction];
			}
			index = index - direction;
		}
		for (int i=0; i<length; i++){
     8a8:	2f 5f       	subi	r18, 0xFF	; 255
     8aa:	3f 4f       	sbci	r19, 0xFF	; 255
     8ac:	2a 15       	cp	r18, r10
     8ae:	3b 05       	cpc	r19, r11
     8b0:	8c f3       	brlt	.-30     	; 0x894 <__stack+0x35>
	}
}

void col_shift(int length, bool shape_array[][4], int direction, int shift_count)	//no wrap around
{
	for(int counter=0; counter<shift_count; counter++){
     8b2:	0f 5f       	subi	r16, 0xFF	; 255
     8b4:	1f 4f       	sbci	r17, 0xFF	; 255
     8b6:	0e 15       	cp	r16, r14
     8b8:	1f 05       	cpc	r17, r15
     8ba:	0c f4       	brge	.+2      	; 0x8be <__stack+0x5f>
     8bc:	bc cf       	rjmp	.-136    	; 0x836 <col_shift+0x1e>
		}
		for (int i=0; i<length; i++){
			shape_array[i][index] = FALSE;
		}
	}
}
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	ff 90       	pop	r15
     8c8:	ef 90       	pop	r14
     8ca:	df 90       	pop	r13
     8cc:	cf 90       	pop	r12
     8ce:	bf 90       	pop	r11
     8d0:	af 90       	pop	r10
     8d2:	08 95       	ret

000008d4 <align_top_left_justify>:

void align_top_left_justify(bool shape_array[][4])
{
     8d4:	0f 93       	push	r16
     8d6:	1f 93       	push	r17
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	ec 01       	movw	r28, r24
	//top left justify shape after rotation
	//top
	int shift_count = -1;
	int shift_direction = UP;
	for (int i=0; i<4; i++){
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0

void align_top_left_justify(bool shape_array[][4])
{
	//top left justify shape after rotation
	//top
	int shift_count = -1;
     8e2:	0f ef       	ldi	r16, 0xFF	; 255
     8e4:	1f ef       	ldi	r17, 0xFF	; 255
	int shift_direction = UP;
	for (int i=0; i<4; i++){
     8e6:	1b c0       	rjmp	.+54     	; 0x91e <align_top_left_justify+0x4a>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
     8e8:	f9 01       	movw	r30, r18
     8ea:	ee 0f       	add	r30, r30
     8ec:	ff 1f       	adc	r31, r31
     8ee:	ee 0f       	add	r30, r30
     8f0:	ff 1f       	adc	r31, r31
     8f2:	ec 0f       	add	r30, r28
     8f4:	fd 1f       	adc	r31, r29
     8f6:	e8 0f       	add	r30, r24
     8f8:	f9 1f       	adc	r31, r25
     8fa:	40 81       	ld	r20, Z
     8fc:	4f 3f       	cpi	r20, 0xFF	; 255
     8fe:	41 f0       	breq	.+16     	; 0x910 <align_top_left_justify+0x3c>
	//top left justify shape after rotation
	//top
	int shift_count = -1;
	int shift_direction = UP;
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
     900:	01 96       	adiw	r24, 0x01	; 1
     902:	02 c0       	rjmp	.+4      	; 0x908 <align_top_left_justify+0x34>
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	84 30       	cpi	r24, 0x04	; 4
     90a:	91 05       	cpc	r25, r1
     90c:	6c f3       	brlt	.-38     	; 0x8e8 <align_top_left_justify+0x14>
     90e:	01 c0       	rjmp	.+2      	; 0x912 <align_top_left_justify+0x3e>
			if(shape_array[i][j] == TRUE){
				shift_count = i;
     910:	89 01       	movw	r16, r18
				break;
			}
		}
		if (shift_count != -1){
     912:	0f 3f       	cpi	r16, 0xFF	; 255
     914:	8f ef       	ldi	r24, 0xFF	; 255
     916:	18 07       	cpc	r17, r24
     918:	29 f4       	brne	.+10     	; 0x924 <align_top_left_justify+0x50>
{
	//top left justify shape after rotation
	//top
	int shift_count = -1;
	int shift_direction = UP;
	for (int i=0; i<4; i++){
     91a:	2f 5f       	subi	r18, 0xFF	; 255
     91c:	3f 4f       	sbci	r19, 0xFF	; 255
     91e:	24 30       	cpi	r18, 0x04	; 4
     920:	31 05       	cpc	r19, r1
     922:	84 f3       	brlt	.-32     	; 0x904 <align_top_left_justify+0x30>
		}
		if (shift_count != -1){
			break;
		}
	}
	row_shift(4, shape_array,shift_direction,shift_count);
     924:	98 01       	movw	r18, r16
     926:	4f ef       	ldi	r20, 0xFF	; 255
     928:	5f ef       	ldi	r21, 0xFF	; 255
     92a:	be 01       	movw	r22, r28
     92c:	84 e0       	ldi	r24, 0x04	; 4
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	0e 94 ad 03 	call	0x75a	; 0x75a <row_shift>
	
	//left justify
	int width = 0;
	int w1 = -1, w2 = -1;
	for (int j=0; j<4; j++){
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
	}
	row_shift(4, shape_array,shift_direction,shift_count);
	
	//left justify
	int width = 0;
	int w1 = -1, w2 = -1;
     938:	6f ef       	ldi	r22, 0xFF	; 255
     93a:	7f ef       	ldi	r23, 0xFF	; 255
     93c:	af ef       	ldi	r26, 0xFF	; 255
     93e:	bf ef       	ldi	r27, 0xFF	; 255
	for (int j=0; j<4; j++){
     940:	25 c0       	rjmp	.+74     	; 0x98c <align_top_left_justify+0xb8>
		for (int i=0; i<4; i++){
			if(shape_array[i][j] == TRUE){
     942:	fc 01       	movw	r30, r24
     944:	ee 0f       	add	r30, r30
     946:	ff 1f       	adc	r31, r31
     948:	ee 0f       	add	r30, r30
     94a:	ff 1f       	adc	r31, r31
     94c:	ec 0f       	add	r30, r28
     94e:	fd 1f       	adc	r31, r29
     950:	e2 0f       	add	r30, r18
     952:	f3 1f       	adc	r31, r19
     954:	40 81       	ld	r20, Z
     956:	4f 3f       	cpi	r20, 0xFF	; 255
     958:	31 f4       	brne	.+12     	; 0x966 <align_top_left_justify+0x92>
				if(w1 == -1){
     95a:	af 3f       	cpi	r26, 0xFF	; 255
     95c:	8f ef       	ldi	r24, 0xFF	; 255
     95e:	b8 07       	cpc	r27, r24
     960:	51 f0       	breq	.+20     	; 0x976 <align_top_left_justify+0xa2>
					w1 = j;
				}
				w2 = j;
     962:	b9 01       	movw	r22, r18
     964:	0a c0       	rjmp	.+20     	; 0x97a <align_top_left_justify+0xa6>
	
	//left justify
	int width = 0;
	int w1 = -1, w2 = -1;
	for (int j=0; j<4; j++){
		for (int i=0; i<4; i++){
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	02 c0       	rjmp	.+4      	; 0x96e <align_top_left_justify+0x9a>
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	84 30       	cpi	r24, 0x04	; 4
     970:	91 05       	cpc	r25, r1
     972:	3c f3       	brlt	.-50     	; 0x942 <align_top_left_justify+0x6e>
     974:	02 c0       	rjmp	.+4      	; 0x97a <align_top_left_justify+0xa6>
			if(shape_array[i][j] == TRUE){
				if(w1 == -1){
					w1 = j;
				}
				w2 = j;
     976:	b9 01       	movw	r22, r18
	int w1 = -1, w2 = -1;
	for (int j=0; j<4; j++){
		for (int i=0; i<4; i++){
			if(shape_array[i][j] == TRUE){
				if(w1 == -1){
					w1 = j;
     978:	d9 01       	movw	r26, r18
				}
				w2 = j;
				break;
			}
		}
		if((w1 != -1) && (w2<j)){
     97a:	af 3f       	cpi	r26, 0xFF	; 255
     97c:	8f ef       	ldi	r24, 0xFF	; 255
     97e:	b8 07       	cpc	r27, r24
     980:	19 f0       	breq	.+6      	; 0x988 <align_top_left_justify+0xb4>
     982:	62 17       	cp	r22, r18
     984:	73 07       	cpc	r23, r19
     986:	2c f0       	brlt	.+10     	; 0x992 <align_top_left_justify+0xbe>
	row_shift(4, shape_array,shift_direction,shift_count);
	
	//left justify
	int width = 0;
	int w1 = -1, w2 = -1;
	for (int j=0; j<4; j++){
     988:	2f 5f       	subi	r18, 0xFF	; 255
     98a:	3f 4f       	sbci	r19, 0xFF	; 255
     98c:	24 30       	cpi	r18, 0x04	; 4
     98e:	31 05       	cpc	r19, r1
     990:	64 f3       	brlt	.-40     	; 0x96a <align_top_left_justify+0x96>
		}
		if((w1 != -1) && (w2<j)){
			break;
		}
	}
	width = w2 - w1 + 1;
     992:	6a 1b       	sub	r22, r26
     994:	7b 0b       	sbc	r23, r27
     996:	cb 01       	movw	r24, r22
     998:	01 96       	adiw	r24, 0x01	; 1
	if(width == 1 || width == 2){
     99a:	62 30       	cpi	r22, 0x02	; 2
     99c:	71 05       	cpc	r23, r1
     99e:	20 f4       	brcc	.+8      	; 0x9a8 <align_top_left_justify+0xd4>
		shift_count = w1 - 1;
     9a0:	8d 01       	movw	r16, r26
     9a2:	01 50       	subi	r16, 0x01	; 1
     9a4:	11 09       	sbc	r17, r1
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <align_top_left_justify+0xdc>
	}
	else if(width == 3 || width == 4){
     9a8:	03 97       	sbiw	r24, 0x03	; 3
     9aa:	02 97       	sbiw	r24, 0x02	; 2
     9ac:	08 f4       	brcc	.+2      	; 0x9b0 <align_top_left_justify+0xdc>
		shift_count = w1 - 0;
     9ae:	8d 01       	movw	r16, r26
	}
	if(shift_count<0){
     9b0:	11 23       	and	r17, r17
     9b2:	34 f4       	brge	.+12     	; 0x9c0 <align_top_left_justify+0xec>
		shift_count = -shift_count;
     9b4:	11 95       	neg	r17
     9b6:	01 95       	neg	r16
     9b8:	11 09       	sbc	r17, r1
		shift_direction = RIGHT;
     9ba:	41 e0       	ldi	r20, 0x01	; 1
     9bc:	50 e0       	ldi	r21, 0x00	; 0
     9be:	02 c0       	rjmp	.+4      	; 0x9c4 <align_top_left_justify+0xf0>
	}
	else{
		shift_direction = LEFT;
     9c0:	4f ef       	ldi	r20, 0xFF	; 255
     9c2:	5f ef       	ldi	r21, 0xFF	; 255
	}
	col_shift(4,shape_array,shift_direction,shift_count);
     9c4:	98 01       	movw	r18, r16
     9c6:	be 01       	movw	r22, r28
     9c8:	84 e0       	ldi	r24, 0x04	; 4
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 0c 04 	call	0x818	; 0x818 <col_shift>
}
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	08 95       	ret

000009da <rotate_shape>:

void rotate_shape(bool shape_array[][4])
{
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
     9e2:	60 97       	sbiw	r28, 0x10	; 16
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	dc 01       	movw	r26, r24
	//rotate clockwise.
	//transpose, mirror.
	bool temp[4][4];
	
	for (int i=0; i<4; i++){
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	1f c0       	rjmp	.+62     	; 0xa34 <rotate_shape+0x5a>
		for (int j=0; j<4; j++){
			temp[i][j] = shape_array[i][j];	//copy
     9f6:	9b 01       	movw	r18, r22
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	22 0f       	add	r18, r18
     9fe:	33 1f       	adc	r19, r19
     a00:	fd 01       	movw	r30, r26
     a02:	e2 0f       	add	r30, r18
     a04:	f3 1f       	adc	r31, r19
     a06:	e4 0f       	add	r30, r20
     a08:	f5 1f       	adc	r31, r21
     a0a:	90 81       	ld	r25, Z
     a0c:	e1 e0       	ldi	r30, 0x01	; 1
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	ec 0f       	add	r30, r28
     a12:	fd 1f       	adc	r31, r29
     a14:	2e 0f       	add	r18, r30
     a16:	3f 1f       	adc	r19, r31
     a18:	f9 01       	movw	r30, r18
     a1a:	e4 0f       	add	r30, r20
     a1c:	f5 1f       	adc	r31, r21
     a1e:	90 83       	st	Z, r25
	//rotate clockwise.
	//transpose, mirror.
	bool temp[4][4];
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
     a20:	4f 5f       	subi	r20, 0xFF	; 255
     a22:	5f 4f       	sbci	r21, 0xFF	; 255
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <rotate_shape+0x50>
     a26:	40 e0       	ldi	r20, 0x00	; 0
     a28:	50 e0       	ldi	r21, 0x00	; 0
     a2a:	44 30       	cpi	r20, 0x04	; 4
     a2c:	51 05       	cpc	r21, r1
     a2e:	1c f3       	brlt	.-58     	; 0x9f6 <rotate_shape+0x1c>
{
	//rotate clockwise.
	//transpose, mirror.
	bool temp[4][4];
	
	for (int i=0; i<4; i++){
     a30:	6f 5f       	subi	r22, 0xFF	; 255
     a32:	7f 4f       	sbci	r23, 0xFF	; 255
     a34:	64 30       	cpi	r22, 0x04	; 4
     a36:	71 05       	cpc	r23, r1
     a38:	b4 f3       	brlt	.-20     	; 0xa26 <rotate_shape+0x4c>
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	21 c0       	rjmp	.+66     	; 0xa82 <rotate_shape+0xa8>
		}
	}
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
			temp_shape_array[i][j] = temp[j][i];	//transpose
     a40:	fc 01       	movw	r30, r24
     a42:	ee 0f       	add	r30, r30
     a44:	ff 1f       	adc	r31, r31
     a46:	ee 0f       	add	r30, r30
     a48:	ff 1f       	adc	r31, r31
     a4a:	41 e0       	ldi	r20, 0x01	; 1
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	4c 0f       	add	r20, r28
     a50:	5d 1f       	adc	r21, r29
     a52:	e4 0f       	add	r30, r20
     a54:	f5 1f       	adc	r31, r21
     a56:	e2 0f       	add	r30, r18
     a58:	f3 1f       	adc	r31, r19
     a5a:	40 81       	ld	r20, Z
     a5c:	f9 01       	movw	r30, r18
     a5e:	ee 0f       	add	r30, r30
     a60:	ff 1f       	adc	r31, r31
     a62:	ee 0f       	add	r30, r30
     a64:	ff 1f       	adc	r31, r31
     a66:	e2 58       	subi	r30, 0x82	; 130
     a68:	fe 4f       	sbci	r31, 0xFE	; 254
     a6a:	e8 0f       	add	r30, r24
     a6c:	f9 1f       	adc	r31, r25
     a6e:	40 83       	st	Z, r20
			temp[i][j] = shape_array[i][j];	//copy
		}
	}
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <rotate_shape+0x9e>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	84 30       	cpi	r24, 0x04	; 4
     a7a:	91 05       	cpc	r25, r1
     a7c:	0c f3       	brlt	.-62     	; 0xa40 <rotate_shape+0x66>
		for (int j=0; j<4; j++){
			temp[i][j] = shape_array[i][j];	//copy
		}
	}
	
	for (int i=0; i<4; i++){
     a7e:	2f 5f       	subi	r18, 0xFF	; 255
     a80:	3f 4f       	sbci	r19, 0xFF	; 255
     a82:	24 30       	cpi	r18, 0x04	; 4
     a84:	31 05       	cpc	r19, r1
     a86:	b4 f3       	brlt	.-20     	; 0xa74 <rotate_shape+0x9a>
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	1f c0       	rjmp	.+62     	; 0xacc <rotate_shape+0xf2>
		}
	}
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
			temp[i][j] = temp_shape_array[i][j];
     a8e:	cb 01       	movw	r24, r22
     a90:	88 0f       	add	r24, r24
     a92:	99 1f       	adc	r25, r25
     a94:	88 0f       	add	r24, r24
     a96:	99 1f       	adc	r25, r25
     a98:	fc 01       	movw	r30, r24
     a9a:	e2 58       	subi	r30, 0x82	; 130
     a9c:	fe 4f       	sbci	r31, 0xFE	; 254
     a9e:	e2 0f       	add	r30, r18
     aa0:	f3 1f       	adc	r31, r19
     aa2:	40 81       	ld	r20, Z
     aa4:	e1 e0       	ldi	r30, 0x01	; 1
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	ec 0f       	add	r30, r28
     aaa:	fd 1f       	adc	r31, r29
     aac:	8e 0f       	add	r24, r30
     aae:	9f 1f       	adc	r25, r31
     ab0:	fc 01       	movw	r30, r24
     ab2:	e2 0f       	add	r30, r18
     ab4:	f3 1f       	adc	r31, r19
     ab6:	40 83       	st	Z, r20
			temp_shape_array[i][j] = temp[j][i];	//transpose
		}
	}
	
	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
     ab8:	2f 5f       	subi	r18, 0xFF	; 255
     aba:	3f 4f       	sbci	r19, 0xFF	; 255
     abc:	02 c0       	rjmp	.+4      	; 0xac2 <rotate_shape+0xe8>
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	24 30       	cpi	r18, 0x04	; 4
     ac4:	31 05       	cpc	r19, r1
     ac6:	1c f3       	brlt	.-58     	; 0xa8e <rotate_shape+0xb4>
		for (int j=0; j<4; j++){
			temp_shape_array[i][j] = temp[j][i];	//transpose
		}
	}
	
	for (int i=0; i<4; i++){
     ac8:	6f 5f       	subi	r22, 0xFF	; 255
     aca:	7f 4f       	sbci	r23, 0xFF	; 255
     acc:	64 30       	cpi	r22, 0x04	; 4
     ace:	71 05       	cpc	r23, r1
     ad0:	b4 f3       	brlt	.-20     	; 0xabe <rotate_shape+0xe4>
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	22 c0       	rjmp	.+68     	; 0xb1c <rotate_shape+0x142>
		}
	}

	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
			temp_shape_array[i][j] = temp[i][3-j];	//mirror
     ad8:	e3 e0       	ldi	r30, 0x03	; 3
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	e2 1b       	sub	r30, r18
     ade:	f3 0b       	sbc	r31, r19
     ae0:	cb 01       	movw	r24, r22
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	41 e0       	ldi	r20, 0x01	; 1
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	4c 0f       	add	r20, r28
     af0:	5d 1f       	adc	r21, r29
     af2:	48 0f       	add	r20, r24
     af4:	59 1f       	adc	r21, r25
     af6:	e4 0f       	add	r30, r20
     af8:	f5 1f       	adc	r31, r21
     afa:	40 81       	ld	r20, Z
     afc:	82 58       	subi	r24, 0x82	; 130
     afe:	9e 4f       	sbci	r25, 0xFE	; 254
     b00:	fc 01       	movw	r30, r24
     b02:	e2 0f       	add	r30, r18
     b04:	f3 1f       	adc	r31, r19
     b06:	40 83       	st	Z, r20
			temp[i][j] = temp_shape_array[i][j];
		}
	}

	for (int i=0; i<4; i++){
		for (int j=0; j<4; j++){
     b08:	2f 5f       	subi	r18, 0xFF	; 255
     b0a:	3f 4f       	sbci	r19, 0xFF	; 255
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <rotate_shape+0x138>
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	24 30       	cpi	r18, 0x04	; 4
     b14:	31 05       	cpc	r19, r1
     b16:	04 f3       	brlt	.-64     	; 0xad8 <rotate_shape+0xfe>
		for (int j=0; j<4; j++){
			temp[i][j] = temp_shape_array[i][j];
		}
	}

	for (int i=0; i<4; i++){
     b18:	6f 5f       	subi	r22, 0xFF	; 255
     b1a:	7f 4f       	sbci	r23, 0xFF	; 255
     b1c:	64 30       	cpi	r22, 0x04	; 4
     b1e:	71 05       	cpc	r23, r1
     b20:	b4 f3       	brlt	.-20     	; 0xb0e <rotate_shape+0x134>
		for (int j=0; j<4; j++){
			temp_shape_array[i][j] = temp[i][3-j];	//mirror
		}
	}
	align_top_left_justify(temp_shape_array);
     b22:	8e e7       	ldi	r24, 0x7E	; 126
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <align_top_left_justify>
}
     b2a:	60 96       	adiw	r28, 0x10	; 16
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	f8 94       	cli
     b30:	de bf       	out	0x3e, r29	; 62
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	cd bf       	out	0x3d, r28	; 61
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	08 95       	ret

00000b3c <check_valid>:

bool check_valid(int row, int col, bool shape_array[][4])
{
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	ec 01       	movw	r28, r24
	for(int i=0; i<4; i++){
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	2e c0       	rjmp	.+92     	; 0xba4 <check_valid+0x68>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
     b48:	fd 01       	movw	r30, r26
     b4a:	ee 0f       	add	r30, r30
     b4c:	ff 1f       	adc	r31, r31
     b4e:	ee 0f       	add	r30, r30
     b50:	ff 1f       	adc	r31, r31
     b52:	e4 0f       	add	r30, r20
     b54:	f5 1f       	adc	r31, r21
     b56:	e2 0f       	add	r30, r18
     b58:	f3 1f       	adc	r31, r19
     b5a:	90 81       	ld	r25, Z
     b5c:	9f 3f       	cpi	r25, 0xFF	; 255
     b5e:	c9 f4       	brne	.+50     	; 0xb92 <check_valid+0x56>
				if((row+i) > 15){
     b60:	fd 01       	movw	r30, r26
     b62:	ec 0f       	add	r30, r28
     b64:	fd 1f       	adc	r31, r29
     b66:	e0 31       	cpi	r30, 0x10	; 16
     b68:	f1 05       	cpc	r31, r1
     b6a:	0c f5       	brge	.+66     	; 0xbae <check_valid+0x72>
					//bottom row reached
					//invalid
					return FALSE;
				}
				if((col+j) < 0 || (col+j) > 7){
     b6c:	c9 01       	movw	r24, r18
     b6e:	86 0f       	add	r24, r22
     b70:	97 1f       	adc	r25, r23
     b72:	88 30       	cpi	r24, 0x08	; 8
     b74:	91 05       	cpc	r25, r1
     b76:	e8 f4       	brcc	.+58     	; 0xbb2 <check_valid+0x76>
					//left/right col reached
					//invalid
					return FALSE;
				}
				if(current_display[row+i][col+j] == TRUE){
     b78:	ee 0f       	add	r30, r30
     b7a:	ff 1f       	adc	r31, r31
     b7c:	ee 0f       	add	r30, r30
     b7e:	ff 1f       	adc	r31, r31
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	e2 50       	subi	r30, 0x02	; 2
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	e8 0f       	add	r30, r24
     b8a:	f9 1f       	adc	r31, r25
     b8c:	80 81       	ld	r24, Z
     b8e:	8f 3f       	cpi	r24, 0xFF	; 255
     b90:	91 f0       	breq	.+36     	; 0xbb6 <check_valid+0x7a>
}

bool check_valid(int row, int col, bool shape_array[][4])
{
	for(int i=0; i<4; i++){
		for (int j=0; j<4; j++){
     b92:	2f 5f       	subi	r18, 0xFF	; 255
     b94:	3f 4f       	sbci	r19, 0xFF	; 255
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <check_valid+0x60>
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	24 30       	cpi	r18, 0x04	; 4
     b9e:	31 05       	cpc	r19, r1
     ba0:	9c f2       	brlt	.-90     	; 0xb48 <check_valid+0xc>
	align_top_left_justify(temp_shape_array);
}

bool check_valid(int row, int col, bool shape_array[][4])
{
	for(int i=0; i<4; i++){
     ba2:	11 96       	adiw	r26, 0x01	; 1
     ba4:	a4 30       	cpi	r26, 0x04	; 4
     ba6:	b1 05       	cpc	r27, r1
     ba8:	bc f3       	brlt	.-18     	; 0xb98 <check_valid+0x5c>
					return FALSE;
				}
			}
		}
	}
	return TRUE;
     baa:	8f ef       	ldi	r24, 0xFF	; 255
     bac:	05 c0       	rjmp	.+10     	; 0xbb8 <check_valid+0x7c>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
				if((row+i) > 15){
					//bottom row reached
					//invalid
					return FALSE;
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <check_valid+0x7c>
				}
				if((col+j) < 0 || (col+j) > 7){
					//left/right col reached
					//invalid
					return FALSE;
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <check_valid+0x7c>
				}
				if(current_display[row+i][col+j] == TRUE){
					//position filled
					//invalid
					return FALSE;
     bb6:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
	return TRUE;
}
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	08 95       	ret

00000bbe <set_shape>:

void set_shape(bool shape_array[][4])
{
     bbe:	dc 01       	movw	r26, r24
	for(int i=0; i<4; i++){
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	2d c0       	rjmp	.+90     	; 0xc20 <set_shape+0x62>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
     bc6:	fb 01       	movw	r30, r22
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	ee 0f       	add	r30, r30
     bce:	ff 1f       	adc	r31, r31
     bd0:	ea 0f       	add	r30, r26
     bd2:	fb 1f       	adc	r31, r27
     bd4:	e2 0f       	add	r30, r18
     bd6:	f3 1f       	adc	r31, r19
     bd8:	90 81       	ld	r25, Z
     bda:	9f 3f       	cpi	r25, 0xFF	; 255
     bdc:	b9 f4       	brne	.+46     	; 0xc0c <set_shape+0x4e>
				current_display[current_R+i][current_C+j] = shape_array[i][j];
     bde:	40 91 fc 00 	lds	r20, 0x00FC	; 0x8000fc <current_R>
     be2:	50 91 fd 00 	lds	r21, 0x00FD	; 0x8000fd <current_R+0x1>
     be6:	46 0f       	add	r20, r22
     be8:	57 1f       	adc	r21, r23
     bea:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <current_C>
     bee:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <current_C+0x1>
     bf2:	e2 0f       	add	r30, r18
     bf4:	f3 1f       	adc	r31, r19
     bf6:	44 0f       	add	r20, r20
     bf8:	55 1f       	adc	r21, r21
     bfa:	44 0f       	add	r20, r20
     bfc:	55 1f       	adc	r21, r21
     bfe:	44 0f       	add	r20, r20
     c00:	55 1f       	adc	r21, r21
     c02:	42 50       	subi	r20, 0x02	; 2
     c04:	5f 4f       	sbci	r21, 0xFF	; 255
     c06:	e4 0f       	add	r30, r20
     c08:	f5 1f       	adc	r31, r21
     c0a:	90 83       	st	Z, r25
}

void set_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
		for (int j=0; j<4; j++){
     c0c:	2f 5f       	subi	r18, 0xFF	; 255
     c0e:	3f 4f       	sbci	r19, 0xFF	; 255
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <set_shape+0x58>
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	24 30       	cpi	r18, 0x04	; 4
     c18:	31 05       	cpc	r19, r1
     c1a:	ac f2       	brlt	.-86     	; 0xbc6 <set_shape+0x8>
	return TRUE;
}

void set_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
     c1c:	6f 5f       	subi	r22, 0xFF	; 255
     c1e:	7f 4f       	sbci	r23, 0xFF	; 255
     c20:	64 30       	cpi	r22, 0x04	; 4
     c22:	71 05       	cpc	r23, r1
     c24:	b4 f3       	brlt	.-20     	; 0xc12 <set_shape+0x54>
				current_display[current_R+i][current_C+j] = shape_array[i][j];
			}
		}
	}
	//_delay_ms(50);
}
     c26:	08 95       	ret

00000c28 <remove_shape>:
void remove_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <remove_shape+0x60>
		for (int j=0; j<4; j++){
			if(shape_array[i][j] == TRUE){
     c2e:	fb 01       	movw	r30, r22
     c30:	ee 0f       	add	r30, r30
     c32:	ff 1f       	adc	r31, r31
     c34:	ee 0f       	add	r30, r30
     c36:	ff 1f       	adc	r31, r31
     c38:	e8 0f       	add	r30, r24
     c3a:	f9 1f       	adc	r31, r25
     c3c:	e2 0f       	add	r30, r18
     c3e:	f3 1f       	adc	r31, r19
     c40:	40 81       	ld	r20, Z
     c42:	4f 3f       	cpi	r20, 0xFF	; 255
     c44:	b9 f4       	brne	.+46     	; 0xc74 <remove_shape+0x4c>
				current_display[current_R+i][current_C+j] = FALSE;
     c46:	40 91 fc 00 	lds	r20, 0x00FC	; 0x8000fc <current_R>
     c4a:	50 91 fd 00 	lds	r21, 0x00FD	; 0x8000fd <current_R+0x1>
     c4e:	46 0f       	add	r20, r22
     c50:	57 1f       	adc	r21, r23
     c52:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <current_C>
     c56:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <current_C+0x1>
     c5a:	e2 0f       	add	r30, r18
     c5c:	f3 1f       	adc	r31, r19
     c5e:	44 0f       	add	r20, r20
     c60:	55 1f       	adc	r21, r21
     c62:	44 0f       	add	r20, r20
     c64:	55 1f       	adc	r21, r21
     c66:	44 0f       	add	r20, r20
     c68:	55 1f       	adc	r21, r21
     c6a:	42 50       	subi	r20, 0x02	; 2
     c6c:	5f 4f       	sbci	r21, 0xFF	; 255
     c6e:	e4 0f       	add	r30, r20
     c70:	f5 1f       	adc	r31, r21
     c72:	10 82       	st	Z, r1
	//_delay_ms(50);
}
void remove_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
		for (int j=0; j<4; j++){
     c74:	2f 5f       	subi	r18, 0xFF	; 255
     c76:	3f 4f       	sbci	r19, 0xFF	; 255
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <remove_shape+0x56>
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	24 30       	cpi	r18, 0x04	; 4
     c80:	31 05       	cpc	r19, r1
     c82:	ac f2       	brlt	.-86     	; 0xc2e <remove_shape+0x6>
	}
	//_delay_ms(50);
}
void remove_shape(bool shape_array[][4])
{
	for(int i=0; i<4; i++){
     c84:	6f 5f       	subi	r22, 0xFF	; 255
     c86:	7f 4f       	sbci	r23, 0xFF	; 255
     c88:	64 30       	cpi	r22, 0x04	; 4
     c8a:	71 05       	cpc	r23, r1
     c8c:	b4 f3       	brlt	.-20     	; 0xc7a <remove_shape+0x52>
				current_display[current_R+i][current_C+j] = FALSE;
			}
		}
	}
	//_delay_ms(100);
}
     c8e:	08 95       	ret

00000c90 <get_col>:

int get_col(int row)
{
     c90:	ac 01       	movw	r20, r24
	int col_value = 0x00;
	for (int j=0; j<8; j++){
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
	//_delay_ms(100);
}

int get_col(int row)
{
	int col_value = 0x00;
     c96:	a0 e0       	ldi	r26, 0x00	; 0
     c98:	b0 e0       	ldi	r27, 0x00	; 0
	for (int j=0; j<8; j++){
     c9a:	1a c0       	rjmp	.+52     	; 0xcd0 <get_col+0x40>
		if(current_display[row][j] == TRUE){
     c9c:	fa 01       	movw	r30, r20
     c9e:	ee 0f       	add	r30, r30
     ca0:	ff 1f       	adc	r31, r31
     ca2:	ee 0f       	add	r30, r30
     ca4:	ff 1f       	adc	r31, r31
     ca6:	ee 0f       	add	r30, r30
     ca8:	ff 1f       	adc	r31, r31
     caa:	e2 50       	subi	r30, 0x02	; 2
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	e2 0f       	add	r30, r18
     cb0:	f3 1f       	adc	r31, r19
     cb2:	90 81       	ld	r25, Z
     cb4:	9f 3f       	cpi	r25, 0xFF	; 255
     cb6:	51 f4       	brne	.+20     	; 0xccc <get_col+0x3c>
			col_value |= 1<<(j);
     cb8:	61 e0       	ldi	r22, 0x01	; 1
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	02 2e       	mov	r0, r18
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <get_col+0x34>
     cc0:	66 0f       	add	r22, r22
     cc2:	77 1f       	adc	r23, r23
     cc4:	0a 94       	dec	r0
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <get_col+0x30>
     cc8:	a6 2b       	or	r26, r22
     cca:	b7 2b       	or	r27, r23
}

int get_col(int row)
{
	int col_value = 0x00;
	for (int j=0; j<8; j++){
     ccc:	2f 5f       	subi	r18, 0xFF	; 255
     cce:	3f 4f       	sbci	r19, 0xFF	; 255
     cd0:	28 30       	cpi	r18, 0x08	; 8
     cd2:	31 05       	cpc	r19, r1
     cd4:	1c f3       	brlt	.-58     	; 0xc9c <get_col+0xc>
		if(current_display[row][j] == TRUE){
			col_value |= 1<<(j);
		}
	}
	return col_value;
}
     cd6:	cd 01       	movw	r24, r26
     cd8:	08 95       	ret

00000cda <remove_row>:

void remove_row(int row){
	//shift rows downwards from row to 1
	for(int i = row ; i > 0 ; i--){
     cda:	22 c0       	rjmp	.+68     	; 0xd20 <remove_row+0x46>
		for(int j = 0 ; j< 8; j++){
			current_display[i][j] = current_display[i-1][j];
     cdc:	fc 01       	movw	r30, r24
     cde:	31 97       	sbiw	r30, 0x01	; 1
     ce0:	ee 0f       	add	r30, r30
     ce2:	ff 1f       	adc	r31, r31
     ce4:	ee 0f       	add	r30, r30
     ce6:	ff 1f       	adc	r31, r31
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	e2 50       	subi	r30, 0x02	; 2
     cee:	ff 4f       	sbci	r31, 0xFF	; 255
     cf0:	e2 0f       	add	r30, r18
     cf2:	f3 1f       	adc	r31, r19
     cf4:	40 81       	ld	r20, Z
     cf6:	fc 01       	movw	r30, r24
     cf8:	ee 0f       	add	r30, r30
     cfa:	ff 1f       	adc	r31, r31
     cfc:	ee 0f       	add	r30, r30
     cfe:	ff 1f       	adc	r31, r31
     d00:	ee 0f       	add	r30, r30
     d02:	ff 1f       	adc	r31, r31
     d04:	e2 50       	subi	r30, 0x02	; 2
     d06:	ff 4f       	sbci	r31, 0xFF	; 255
     d08:	e2 0f       	add	r30, r18
     d0a:	f3 1f       	adc	r31, r19
     d0c:	40 83       	st	Z, r20
}

void remove_row(int row){
	//shift rows downwards from row to 1
	for(int i = row ; i > 0 ; i--){
		for(int j = 0 ; j< 8; j++){
     d0e:	2f 5f       	subi	r18, 0xFF	; 255
     d10:	3f 4f       	sbci	r19, 0xFF	; 255
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <remove_row+0x3e>
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	28 30       	cpi	r18, 0x08	; 8
     d1a:	31 05       	cpc	r19, r1
     d1c:	fc f2       	brlt	.-66     	; 0xcdc <remove_row+0x2>
	return col_value;
}

void remove_row(int row){
	//shift rows downwards from row to 1
	for(int i = row ; i > 0 ; i--){
     d1e:	01 97       	sbiw	r24, 0x01	; 1
     d20:	18 16       	cp	r1, r24
     d22:	19 06       	cpc	r1, r25
     d24:	bc f3       	brlt	.-18     	; 0xd14 <remove_row+0x3a>
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	05 c0       	rjmp	.+10     	; 0xd36 <remove_row+0x5c>
			current_display[i][j] = current_display[i-1][j];
		}
	}
	//put false in row 0
	for(int i = 0 ; i < 8; i++){
		current_display[0][i] = FALSE;
     d2c:	fc 01       	movw	r30, r24
     d2e:	e2 50       	subi	r30, 0x02	; 2
     d30:	ff 4f       	sbci	r31, 0xFF	; 255
     d32:	10 82       	st	Z, r1
		for(int j = 0 ; j< 8; j++){
			current_display[i][j] = current_display[i-1][j];
		}
	}
	//put false in row 0
	for(int i = 0 ; i < 8; i++){
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	88 30       	cpi	r24, 0x08	; 8
     d38:	91 05       	cpc	r25, r1
     d3a:	c4 f3       	brlt	.-16     	; 0xd2c <remove_row+0x52>
		current_display[0][i] = FALSE;
	}
}
     d3c:	08 95       	ret

00000d3e <showScore>:
void showScore(){
     d3e:	0f 93       	push	r16
     d40:	1f 93       	push	r17
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	63 97       	sbiw	r28, 0x13	; 19
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	f8 94       	cli
     d50:	de bf       	out	0x3e, r29	; 62
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	cd bf       	out	0x3d, r28	; 61
	char score[10];
	dtostrf(score_update , 0, 2, score);
     d56:	60 91 fa 00 	lds	r22, 0x00FA	; 0x8000fa <__data_end>
     d5a:	70 91 fb 00 	lds	r23, 0x00FB	; 0x8000fb <__data_end+0x1>
     d5e:	07 2e       	mov	r0, r23
     d60:	00 0c       	add	r0, r0
     d62:	88 0b       	sbc	r24, r24
     d64:	99 0b       	sbc	r25, r25
     d66:	0e 94 43 0a 	call	0x1486	; 0x1486 <__floatsisf>
     d6a:	8e 01       	movw	r16, r28
     d6c:	0f 5f       	subi	r16, 0xFF	; 255
     d6e:	1f 4f       	sbci	r17, 0xFF	; 255
     d70:	22 e0       	ldi	r18, 0x02	; 2
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	0e 94 a6 0a 	call	0x154c	; 0x154c <dtostrf>
	char msg[] = "Score : ";
     d78:	89 e0       	ldi	r24, 0x09	; 9
     d7a:	e0 ee       	ldi	r30, 0xE0	; 224
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	de 01       	movw	r26, r28
     d80:	1b 96       	adiw	r26, 0x0b	; 11
     d82:	01 90       	ld	r0, Z+
     d84:	0d 92       	st	X+, r0
     d86:	8a 95       	dec	r24
     d88:	e1 f7       	brne	.-8      	; 0xd82 <showScore+0x44>
	Lcd4_Set_Cursor(1,1);
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <Lcd4_Set_Cursor>
	Lcd4_Write_String(msg);
     d92:	ce 01       	movw	r24, r28
     d94:	0b 96       	adiw	r24, 0x0b	; 11
     d96:	0e 94 97 03 	call	0x72e	; 0x72e <Lcd4_Write_String>
	Lcd4_Write_String(score);
     d9a:	c8 01       	movw	r24, r16
     d9c:	0e 94 97 03 	call	0x72e	; 0x72e <Lcd4_Write_String>
}
     da0:	63 96       	adiw	r28, 0x13	; 19
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	de bf       	out	0x3e, r29	; 62
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	cd bf       	out	0x3d, r28	; 61
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	08 95       	ret

00000db6 <update_score1x>:
void update_score1x(){
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
	uint8_t temp ;
	for(int i = 0 ; i < 16 ; i++){
     dba:	c0 e0       	ldi	r28, 0x00	; 0
     dbc:	d0 e0       	ldi	r29, 0x00	; 0
     dbe:	38 c0       	rjmp	.+112    	; 0xe30 <update_score1x+0x7a>
		temp = TRUE;
		for(int j = 0 ; j < 8; j++){
			temp &= current_display[i][j];
     dc0:	fe 01       	movw	r30, r28
     dc2:	ee 0f       	add	r30, r30
     dc4:	ff 1f       	adc	r31, r31
     dc6:	ee 0f       	add	r30, r30
     dc8:	ff 1f       	adc	r31, r31
     dca:	ee 0f       	add	r30, r30
     dcc:	ff 1f       	adc	r31, r31
     dce:	e2 50       	subi	r30, 0x02	; 2
     dd0:	ff 4f       	sbci	r31, 0xFF	; 255
     dd2:	e8 0f       	add	r30, r24
     dd4:	f9 1f       	adc	r31, r25
     dd6:	30 81       	ld	r19, Z
     dd8:	23 23       	and	r18, r19
}
void update_score1x(){
	uint8_t temp ;
	for(int i = 0 ; i < 16 ; i++){
		temp = TRUE;
		for(int j = 0 ; j < 8; j++){
     dda:	01 96       	adiw	r24, 0x01	; 1
     ddc:	03 c0       	rjmp	.+6      	; 0xde4 <update_score1x+0x2e>
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	2f ef       	ldi	r18, 0xFF	; 255
     de4:	88 30       	cpi	r24, 0x08	; 8
     de6:	91 05       	cpc	r25, r1
     de8:	5c f3       	brlt	.-42     	; 0xdc0 <update_score1x+0xa>
			temp &= current_display[i][j];
		}
		if(temp == TRUE){
     dea:	2f 3f       	cpi	r18, 0xFF	; 255
     dec:	01 f5       	brne	.+64     	; 0xe2e <update_score1x+0x78>
			//UART_send(10);
			score_update++;
     dee:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
     df2:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <__data_end+0x1>
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <__data_end+0x1>
     dfc:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__data_end>
			PORTC |= (1<< PC5);
     e00:	85 b3       	in	r24, 0x15	; 21
     e02:	80 62       	ori	r24, 0x20	; 32
     e04:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e06:	8f e4       	ldi	r24, 0x4F	; 79
     e08:	93 ec       	ldi	r25, 0xC3	; 195
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	f1 f7       	brne	.-4      	; 0xe0a <update_score1x+0x54>
     e0e:	00 c0       	rjmp	.+0      	; 0xe10 <update_score1x+0x5a>
     e10:	00 00       	nop
			_delay_ms(200);
			PORTC &= ~(1<< PC5);
     e12:	85 b3       	in	r24, 0x15	; 21
     e14:	8f 7d       	andi	r24, 0xDF	; 223
     e16:	85 bb       	out	0x15, r24	; 21
     e18:	8f e4       	ldi	r24, 0x4F	; 79
     e1a:	93 ec       	ldi	r25, 0xC3	; 195
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <update_score1x+0x66>
     e20:	00 c0       	rjmp	.+0      	; 0xe22 <update_score1x+0x6c>
     e22:	00 00       	nop
			_delay_ms(200);
			remove_row(i);
     e24:	ce 01       	movw	r24, r28
     e26:	0e 94 6d 06 	call	0xcda	; 0xcda <remove_row>
			showScore();
     e2a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <showScore>
	Lcd4_Write_String(msg);
	Lcd4_Write_String(score);
}
void update_score1x(){
	uint8_t temp ;
	for(int i = 0 ; i < 16 ; i++){
     e2e:	21 96       	adiw	r28, 0x01	; 1
     e30:	c0 31       	cpi	r28, 0x10	; 16
     e32:	d1 05       	cpc	r29, r1
     e34:	a4 f2       	brlt	.-88     	; 0xdde <update_score1x+0x28>
			_delay_ms(200);
			remove_row(i);
			showScore();
		}
	}
}
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	08 95       	ret

00000e3c <update_score2x>:
void update_score2x(){
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
	uint8_t temp ;
	for(int i = 0 ; i < 12 ; i++){
     e44:	c0 e0       	ldi	r28, 0x00	; 0
     e46:	d0 e0       	ldi	r29, 0x00	; 0
     e48:	4b c0       	rjmp	.+150    	; 0xee0 <update_score2x+0xa4>
		temp = TRUE;
		int ii = i;
		for(int t = 0; t < 4; t++){
			for(int j = 0 ; j < 8; j++){
				temp &= current_display[ii][j];
     e4a:	fa 01       	movw	r30, r20
     e4c:	ee 0f       	add	r30, r30
     e4e:	ff 1f       	adc	r31, r31
     e50:	ee 0f       	add	r30, r30
     e52:	ff 1f       	adc	r31, r31
     e54:	ee 0f       	add	r30, r30
     e56:	ff 1f       	adc	r31, r31
     e58:	e2 50       	subi	r30, 0x02	; 2
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	e8 0f       	add	r30, r24
     e5e:	f9 1f       	adc	r31, r25
     e60:	30 81       	ld	r19, Z
     e62:	23 23       	and	r18, r19
	uint8_t temp ;
	for(int i = 0 ; i < 12 ; i++){
		temp = TRUE;
		int ii = i;
		for(int t = 0; t < 4; t++){
			for(int j = 0 ; j < 8; j++){
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <update_score2x+0x30>
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	88 30       	cpi	r24, 0x08	; 8
     e6e:	91 05       	cpc	r25, r1
     e70:	64 f3       	brlt	.-40     	; 0xe4a <update_score2x+0xe>
				temp &= current_display[ii][j];
			}
			ii++;
     e72:	4f 5f       	subi	r20, 0xFF	; 255
     e74:	5f 4f       	sbci	r21, 0xFF	; 255
void update_score2x(){
	uint8_t temp ;
	for(int i = 0 ; i < 12 ; i++){
		temp = TRUE;
		int ii = i;
		for(int t = 0; t < 4; t++){
     e76:	6f 5f       	subi	r22, 0xFF	; 255
     e78:	7f 4f       	sbci	r23, 0xFF	; 255
     e7a:	04 c0       	rjmp	.+8      	; 0xe84 <update_score2x+0x48>
     e7c:	ae 01       	movw	r20, r28
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	2f ef       	ldi	r18, 0xFF	; 255
     e84:	64 30       	cpi	r22, 0x04	; 4
     e86:	71 05       	cpc	r23, r1
     e88:	7c f3       	brlt	.-34     	; 0xe68 <update_score2x+0x2c>
			for(int j = 0 ; j < 8; j++){
				temp &= current_display[ii][j];
			}
			ii++;
		}
		if(temp == TRUE){
     e8a:	2f 3f       	cpi	r18, 0xFF	; 255
     e8c:	41 f5       	brne	.+80     	; 0xede <update_score2x+0xa2>
			//UART_send(11);
			score_update += 8;
     e8e:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__data_end>
     e92:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <__data_end+0x1>
     e96:	08 96       	adiw	r24, 0x08	; 8
     e98:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <__data_end+0x1>
     e9c:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__data_end>
			PORTC |= (1<< PC5);
     ea0:	85 b3       	in	r24, 0x15	; 21
     ea2:	80 62       	ori	r24, 0x20	; 32
     ea4:	85 bb       	out	0x15, r24	; 21
     ea6:	8f e4       	ldi	r24, 0x4F	; 79
     ea8:	93 ec       	ldi	r25, 0xC3	; 195
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	f1 f7       	brne	.-4      	; 0xeaa <update_score2x+0x6e>
     eae:	00 c0       	rjmp	.+0      	; 0xeb0 <update_score2x+0x74>
     eb0:	00 00       	nop
			_delay_ms(200);
			PORTC &= ~(1<< PC5);
     eb2:	85 b3       	in	r24, 0x15	; 21
     eb4:	8f 7d       	andi	r24, 0xDF	; 223
     eb6:	85 bb       	out	0x15, r24	; 21
     eb8:	8f e4       	ldi	r24, 0x4F	; 79
     eba:	93 ec       	ldi	r25, 0xC3	; 195
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	f1 f7       	brne	.-4      	; 0xebc <update_score2x+0x80>
     ec0:	00 c0       	rjmp	.+0      	; 0xec2 <update_score2x+0x86>
     ec2:	00 00       	nop
			_delay_ms(200);
			for(int t = 0; t < 4; t++){
     ec4:	00 e0       	ldi	r16, 0x00	; 0
     ec6:	10 e0       	ldi	r17, 0x00	; 0
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <update_score2x+0x98>
				remove_row(i);
     eca:	ce 01       	movw	r24, r28
     ecc:	0e 94 6d 06 	call	0xcda	; 0xcda <remove_row>
			score_update += 8;
			PORTC |= (1<< PC5);
			_delay_ms(200);
			PORTC &= ~(1<< PC5);
			_delay_ms(200);
			for(int t = 0; t < 4; t++){
     ed0:	0f 5f       	subi	r16, 0xFF	; 255
     ed2:	1f 4f       	sbci	r17, 0xFF	; 255
     ed4:	04 30       	cpi	r16, 0x04	; 4
     ed6:	11 05       	cpc	r17, r1
     ed8:	c4 f3       	brlt	.-16     	; 0xeca <update_score2x+0x8e>
				remove_row(i);
			}
			showScore();
     eda:	0e 94 9f 06 	call	0xd3e	; 0xd3e <showScore>
		}
	}
}
void update_score2x(){
	uint8_t temp ;
	for(int i = 0 ; i < 12 ; i++){
     ede:	21 96       	adiw	r28, 0x01	; 1
     ee0:	cc 30       	cpi	r28, 0x0C	; 12
     ee2:	d1 05       	cpc	r29, r1
     ee4:	5c f2       	brlt	.-106    	; 0xe7c <update_score2x+0x40>
				remove_row(i);
			}
			showScore();
		}
	}
}
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	08 95       	ret

00000ef0 <go_left>:
void go_left(){
	remove_shape(current_shape_array);
     ef0:	8e e8       	ldi	r24, 0x8E	; 142
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	0e 94 14 06 	call	0xc28	; 0xc28 <remove_shape>
	if(check_valid(current_R, current_C-1 , current_shape_array) == TRUE){
     ef8:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <current_C>
     efc:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <current_C+0x1>
     f00:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <current_R>
     f04:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <current_R+0x1>
     f08:	61 50       	subi	r22, 0x01	; 1
     f0a:	71 09       	sbc	r23, r1
     f0c:	4e e8       	ldi	r20, 0x8E	; 142
     f0e:	51 e0       	ldi	r21, 0x01	; 1
     f10:	0e 94 9e 05 	call	0xb3c	; 0xb3c <check_valid>
     f14:	8f 3f       	cpi	r24, 0xFF	; 255
     f16:	49 f4       	brne	.+18     	; 0xf2a <go_left+0x3a>
		current_C--;
     f18:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <current_C>
     f1c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <current_C+0x1>
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <current_C+0x1>
     f26:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <current_C>
	}
	set_shape(current_shape_array);
     f2a:	8e e8       	ldi	r24, 0x8E	; 142
     f2c:	91 e0       	ldi	r25, 0x01	; 1
     f2e:	0e 94 df 05 	call	0xbbe	; 0xbbe <set_shape>
     f32:	08 95       	ret

00000f34 <go_right>:
}
void go_right(){
	remove_shape(current_shape_array);
     f34:	8e e8       	ldi	r24, 0x8E	; 142
     f36:	91 e0       	ldi	r25, 0x01	; 1
     f38:	0e 94 14 06 	call	0xc28	; 0xc28 <remove_shape>
	if(check_valid(current_R, current_C+1 , current_shape_array) == TRUE){
     f3c:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <current_C>
     f40:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <current_C+0x1>
     f44:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <current_R>
     f48:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <current_R+0x1>
     f4c:	6f 5f       	subi	r22, 0xFF	; 255
     f4e:	7f 4f       	sbci	r23, 0xFF	; 255
     f50:	4e e8       	ldi	r20, 0x8E	; 142
     f52:	51 e0       	ldi	r21, 0x01	; 1
     f54:	0e 94 9e 05 	call	0xb3c	; 0xb3c <check_valid>
     f58:	8f 3f       	cpi	r24, 0xFF	; 255
     f5a:	49 f4       	brne	.+18     	; 0xf6e <go_right+0x3a>
		current_C++;
     f5c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <current_C>
     f60:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <current_C+0x1>
     f64:	01 96       	adiw	r24, 0x01	; 1
     f66:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <current_C+0x1>
     f6a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <current_C>
	}
	set_shape(current_shape_array);
     f6e:	8e e8       	ldi	r24, 0x8E	; 142
     f70:	91 e0       	ldi	r25, 0x01	; 1
     f72:	0e 94 df 05 	call	0xbbe	; 0xbbe <set_shape>
     f76:	08 95       	ret

00000f78 <go_down>:
}
void go_down(){
	remove_shape(current_shape_array);
     f78:	8e e8       	ldi	r24, 0x8E	; 142
     f7a:	91 e0       	ldi	r25, 0x01	; 1
     f7c:	0e 94 14 06 	call	0xc28	; 0xc28 <remove_shape>
	if(check_valid(current_R+1, current_C , current_shape_array) == TRUE){
     f80:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <current_C>
     f84:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <current_C+0x1>
     f88:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <current_R>
     f8c:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <current_R+0x1>
     f90:	4e e8       	ldi	r20, 0x8E	; 142
     f92:	51 e0       	ldi	r21, 0x01	; 1
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	0e 94 9e 05 	call	0xb3c	; 0xb3c <check_valid>
     f9a:	8f 3f       	cpi	r24, 0xFF	; 255
     f9c:	71 f4       	brne	.+28     	; 0xfba <go_down+0x42>
		current_R++;
     f9e:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <current_R>
     fa2:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <current_R+0x1>
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <current_R+0x1>
     fac:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <current_R>
		set_shape(current_shape_array);
     fb0:	8e e8       	ldi	r24, 0x8E	; 142
     fb2:	91 e0       	ldi	r25, 0x01	; 1
     fb4:	0e 94 df 05 	call	0xbbe	; 0xbbe <set_shape>
     fb8:	08 95       	ret
	}
	else{
		set_shape(current_shape_array);
     fba:	8e e8       	ldi	r24, 0x8E	; 142
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	0e 94 df 05 	call	0xbbe	; 0xbbe <set_shape>
		current_C = 2;
     fc2:	82 e0       	ldi	r24, 0x02	; 2
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <current_C+0x1>
     fca:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <current_C>
		current_R = 0;
     fce:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <current_R+0x1>
     fd2:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <current_R>
		for(int i = 0 ; i < 4; i++){
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	13 c0       	rjmp	.+38     	; 0x1002 <go_down+0x8a>
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = FALSE;
     fdc:	f9 01       	movw	r30, r18
     fde:	ee 0f       	add	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	e2 57       	subi	r30, 0x72	; 114
     fe8:	fe 4f       	sbci	r31, 0xFE	; 254
     fea:	e8 0f       	add	r30, r24
     fec:	f9 1f       	adc	r31, r25
     fee:	10 82       	st	Z, r1
	else{
		set_shape(current_shape_array);
		current_C = 2;
		current_R = 0;
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <go_down+0x80>
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	84 30       	cpi	r24, 0x04	; 4
     ffa:	91 05       	cpc	r25, r1
     ffc:	7c f3       	brlt	.-34     	; 0xfdc <go_down+0x64>
	}
	else{
		set_shape(current_shape_array);
		current_C = 2;
		current_R = 0;
		for(int i = 0 ; i < 4; i++){
     ffe:	2f 5f       	subi	r18, 0xFF	; 255
    1000:	3f 4f       	sbci	r19, 0xFF	; 255
    1002:	24 30       	cpi	r18, 0x04	; 4
    1004:	31 05       	cpc	r19, r1
    1006:	b4 f3       	brlt	.-20     	; 0xff4 <go_down+0x7c>
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = FALSE;
			}
		}
		current_shape = -1;
    1008:	8f ef       	ldi	r24, 0xFF	; 255
    100a:	9f ef       	ldi	r25, 0xFF	; 255
    100c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <current_shape+0x1>
    1010:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <current_shape>
		update_score2x();
    1014:	0e 94 1e 07 	call	0xe3c	; 0xe3c <update_score2x>
		update_score1x();
    1018:	0e 94 db 06 	call	0xdb6	; 0xdb6 <update_score1x>
    101c:	08 95       	ret

0000101e <generate_shape>:
	}
}
void generate_shape(){
	//int shape = 0;
	int shape = rand()%7;
    101e:	0e 94 12 0b 	call	0x1624	; 0x1624 <rand>
    1022:	67 e0       	ldi	r22, 0x07	; 7
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__divmodhi4>
    102a:	28 2f       	mov	r18, r24
    102c:	39 2f       	mov	r19, r25
	current_shape = shape;
    102e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <current_shape>
    1032:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <current_shape+0x1>
	if( shape == 0){
    1036:	21 15       	cp	r18, r1
    1038:	31 05       	cpc	r19, r1
    103a:	e9 f0       	breq	.+58     	; 0x1076 <generate_shape+0x58>
    103c:	22 c0       	rjmp	.+68     	; 0x1082 <generate_shape+0x64>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_O_array[i][j];
    103e:	cb 01       	movw	r24, r22
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	fc 01       	movw	r30, r24
    104a:	e8 53       	subi	r30, 0x38	; 56
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	e2 0f       	add	r30, r18
    1050:	f3 1f       	adc	r31, r19
    1052:	40 81       	ld	r20, Z
    1054:	82 57       	subi	r24, 0x72	; 114
    1056:	9e 4f       	sbci	r25, 0xFE	; 254
    1058:	fc 01       	movw	r30, r24
    105a:	e2 0f       	add	r30, r18
    105c:	f3 1f       	adc	r31, r19
    105e:	40 83       	st	Z, r20
	//int shape = 0;
	int shape = rand()%7;
	current_shape = shape;
	if( shape == 0){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
    1060:	2f 5f       	subi	r18, 0xFF	; 255
    1062:	3f 4f       	sbci	r19, 0xFF	; 255
    1064:	02 c0       	rjmp	.+4      	; 0x106a <generate_shape+0x4c>
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	24 30       	cpi	r18, 0x04	; 4
    106c:	31 05       	cpc	r19, r1
    106e:	3c f3       	brlt	.-50     	; 0x103e <generate_shape+0x20>
void generate_shape(){
	//int shape = 0;
	int shape = rand()%7;
	current_shape = shape;
	if( shape == 0){
		for(int i = 0 ; i < 4; i++){
    1070:	6f 5f       	subi	r22, 0xFF	; 255
    1072:	7f 4f       	sbci	r23, 0xFF	; 255
    1074:	02 c0       	rjmp	.+4      	; 0x107a <generate_shape+0x5c>
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	64 30       	cpi	r22, 0x04	; 4
    107c:	71 05       	cpc	r23, r1
    107e:	9c f3       	brlt	.-26     	; 0x1066 <generate_shape+0x48>
    1080:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_O_array[i][j];
			}
		}
	}
	else if(shape == 1){
    1082:	21 30       	cpi	r18, 0x01	; 1
    1084:	31 05       	cpc	r19, r1
    1086:	19 f5       	brne	.+70     	; 0x10ce <generate_shape+0xb0>
    1088:	1c c0       	rjmp	.+56     	; 0x10c2 <generate_shape+0xa4>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_I_array[i][j];
    108a:	cb 01       	movw	r24, r22
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	fc 01       	movw	r30, r24
    1096:	e8 54       	subi	r30, 0x48	; 72
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	e2 0f       	add	r30, r18
    109c:	f3 1f       	adc	r31, r19
    109e:	40 81       	ld	r20, Z
    10a0:	82 57       	subi	r24, 0x72	; 114
    10a2:	9e 4f       	sbci	r25, 0xFE	; 254
    10a4:	fc 01       	movw	r30, r24
    10a6:	e2 0f       	add	r30, r18
    10a8:	f3 1f       	adc	r31, r19
    10aa:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 1){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
    10ac:	2f 5f       	subi	r18, 0xFF	; 255
    10ae:	3f 4f       	sbci	r19, 0xFF	; 255
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <generate_shape+0x98>
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	24 30       	cpi	r18, 0x04	; 4
    10b8:	31 05       	cpc	r19, r1
    10ba:	3c f3       	brlt	.-50     	; 0x108a <generate_shape+0x6c>
				current_shape_array[i][j] = shape_O_array[i][j];
			}
		}
	}
	else if(shape == 1){
		for(int i = 0 ; i < 4; i++){
    10bc:	6f 5f       	subi	r22, 0xFF	; 255
    10be:	7f 4f       	sbci	r23, 0xFF	; 255
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <generate_shape+0xa8>
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	64 30       	cpi	r22, 0x04	; 4
    10c8:	71 05       	cpc	r23, r1
    10ca:	9c f3       	brlt	.-26     	; 0x10b2 <generate_shape+0x94>
    10cc:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_I_array[i][j];
			}
		}
	}
	else if(shape == 2){
    10ce:	22 30       	cpi	r18, 0x02	; 2
    10d0:	31 05       	cpc	r19, r1
    10d2:	19 f5       	brne	.+70     	; 0x111a <generate_shape+0xfc>
    10d4:	1c c0       	rjmp	.+56     	; 0x110e <generate_shape+0xf0>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_L_array[i][j];
    10d6:	cb 01       	movw	r24, r22
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	fc 01       	movw	r30, r24
    10e2:	e8 55       	subi	r30, 0x58	; 88
    10e4:	ff 4f       	sbci	r31, 0xFF	; 255
    10e6:	e2 0f       	add	r30, r18
    10e8:	f3 1f       	adc	r31, r19
    10ea:	40 81       	ld	r20, Z
    10ec:	82 57       	subi	r24, 0x72	; 114
    10ee:	9e 4f       	sbci	r25, 0xFE	; 254
    10f0:	fc 01       	movw	r30, r24
    10f2:	e2 0f       	add	r30, r18
    10f4:	f3 1f       	adc	r31, r19
    10f6:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 2){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
    10f8:	2f 5f       	subi	r18, 0xFF	; 255
    10fa:	3f 4f       	sbci	r19, 0xFF	; 255
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <generate_shape+0xe4>
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	24 30       	cpi	r18, 0x04	; 4
    1104:	31 05       	cpc	r19, r1
    1106:	3c f3       	brlt	.-50     	; 0x10d6 <generate_shape+0xb8>
				current_shape_array[i][j] = shape_I_array[i][j];
			}
		}
	}
	else if(shape == 2){
		for(int i = 0 ; i < 4; i++){
    1108:	6f 5f       	subi	r22, 0xFF	; 255
    110a:	7f 4f       	sbci	r23, 0xFF	; 255
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <generate_shape+0xf4>
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	64 30       	cpi	r22, 0x04	; 4
    1114:	71 05       	cpc	r23, r1
    1116:	9c f3       	brlt	.-26     	; 0x10fe <generate_shape+0xe0>
    1118:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_L_array[i][j];
			}
		}
	}
	else if(shape == 3){
    111a:	23 30       	cpi	r18, 0x03	; 3
    111c:	31 05       	cpc	r19, r1
    111e:	19 f5       	brne	.+70     	; 0x1166 <generate_shape+0x148>
    1120:	1c c0       	rjmp	.+56     	; 0x115a <generate_shape+0x13c>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_J_array[i][j];
    1122:	cb 01       	movw	r24, r22
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	fc 01       	movw	r30, r24
    112e:	e8 56       	subi	r30, 0x68	; 104
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	e2 0f       	add	r30, r18
    1134:	f3 1f       	adc	r31, r19
    1136:	40 81       	ld	r20, Z
    1138:	82 57       	subi	r24, 0x72	; 114
    113a:	9e 4f       	sbci	r25, 0xFE	; 254
    113c:	fc 01       	movw	r30, r24
    113e:	e2 0f       	add	r30, r18
    1140:	f3 1f       	adc	r31, r19
    1142:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 3){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
    1144:	2f 5f       	subi	r18, 0xFF	; 255
    1146:	3f 4f       	sbci	r19, 0xFF	; 255
    1148:	02 c0       	rjmp	.+4      	; 0x114e <generate_shape+0x130>
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	24 30       	cpi	r18, 0x04	; 4
    1150:	31 05       	cpc	r19, r1
    1152:	3c f3       	brlt	.-50     	; 0x1122 <generate_shape+0x104>
				current_shape_array[i][j] = shape_L_array[i][j];
			}
		}
	}
	else if(shape == 3){
		for(int i = 0 ; i < 4; i++){
    1154:	6f 5f       	subi	r22, 0xFF	; 255
    1156:	7f 4f       	sbci	r23, 0xFF	; 255
    1158:	02 c0       	rjmp	.+4      	; 0x115e <generate_shape+0x140>
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	64 30       	cpi	r22, 0x04	; 4
    1160:	71 05       	cpc	r23, r1
    1162:	9c f3       	brlt	.-26     	; 0x114a <generate_shape+0x12c>
    1164:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_J_array[i][j];
			}
		}
	}
	else if(shape == 4){
    1166:	24 30       	cpi	r18, 0x04	; 4
    1168:	31 05       	cpc	r19, r1
    116a:	19 f5       	brne	.+70     	; 0x11b2 <generate_shape+0x194>
    116c:	1c c0       	rjmp	.+56     	; 0x11a6 <generate_shape+0x188>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_S_array[i][j];
    116e:	cb 01       	movw	r24, r22
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	fc 01       	movw	r30, r24
    117a:	e8 57       	subi	r30, 0x78	; 120
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	e2 0f       	add	r30, r18
    1180:	f3 1f       	adc	r31, r19
    1182:	40 81       	ld	r20, Z
    1184:	82 57       	subi	r24, 0x72	; 114
    1186:	9e 4f       	sbci	r25, 0xFE	; 254
    1188:	fc 01       	movw	r30, r24
    118a:	e2 0f       	add	r30, r18
    118c:	f3 1f       	adc	r31, r19
    118e:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 4){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
    1190:	2f 5f       	subi	r18, 0xFF	; 255
    1192:	3f 4f       	sbci	r19, 0xFF	; 255
    1194:	02 c0       	rjmp	.+4      	; 0x119a <generate_shape+0x17c>
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	24 30       	cpi	r18, 0x04	; 4
    119c:	31 05       	cpc	r19, r1
    119e:	3c f3       	brlt	.-50     	; 0x116e <generate_shape+0x150>
				current_shape_array[i][j] = shape_J_array[i][j];
			}
		}
	}
	else if(shape == 4){
		for(int i = 0 ; i < 4; i++){
    11a0:	6f 5f       	subi	r22, 0xFF	; 255
    11a2:	7f 4f       	sbci	r23, 0xFF	; 255
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <generate_shape+0x18c>
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	64 30       	cpi	r22, 0x04	; 4
    11ac:	71 05       	cpc	r23, r1
    11ae:	9c f3       	brlt	.-26     	; 0x1196 <generate_shape+0x178>
    11b0:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_S_array[i][j];
			}
		}
	}
	else if(shape == 5){
    11b2:	25 30       	cpi	r18, 0x05	; 5
    11b4:	31 05       	cpc	r19, r1
    11b6:	19 f5       	brne	.+70     	; 0x11fe <generate_shape+0x1e0>
    11b8:	1c c0       	rjmp	.+56     	; 0x11f2 <generate_shape+0x1d4>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_Z_array[i][j];
    11ba:	cb 01       	movw	r24, r22
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	fc 01       	movw	r30, r24
    11c6:	e8 58       	subi	r30, 0x88	; 136
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	e2 0f       	add	r30, r18
    11cc:	f3 1f       	adc	r31, r19
    11ce:	40 81       	ld	r20, Z
    11d0:	82 57       	subi	r24, 0x72	; 114
    11d2:	9e 4f       	sbci	r25, 0xFE	; 254
    11d4:	fc 01       	movw	r30, r24
    11d6:	e2 0f       	add	r30, r18
    11d8:	f3 1f       	adc	r31, r19
    11da:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 5){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
    11dc:	2f 5f       	subi	r18, 0xFF	; 255
    11de:	3f 4f       	sbci	r19, 0xFF	; 255
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <generate_shape+0x1c8>
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	24 30       	cpi	r18, 0x04	; 4
    11e8:	31 05       	cpc	r19, r1
    11ea:	3c f3       	brlt	.-50     	; 0x11ba <generate_shape+0x19c>
				current_shape_array[i][j] = shape_S_array[i][j];
			}
		}
	}
	else if(shape == 5){
		for(int i = 0 ; i < 4; i++){
    11ec:	6f 5f       	subi	r22, 0xFF	; 255
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <generate_shape+0x1d8>
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	64 30       	cpi	r22, 0x04	; 4
    11f8:	71 05       	cpc	r23, r1
    11fa:	9c f3       	brlt	.-26     	; 0x11e2 <generate_shape+0x1c4>
    11fc:	08 95       	ret
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_Z_array[i][j];
			}
		}
	}
	else if(shape == 6){
    11fe:	26 30       	cpi	r18, 0x06	; 6
    1200:	31 05       	cpc	r19, r1
    1202:	11 f5       	brne	.+68     	; 0x1248 <generate_shape+0x22a>
    1204:	1c c0       	rjmp	.+56     	; 0x123e <generate_shape+0x220>
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
				current_shape_array[i][j] = shape_T_array[i][j];
    1206:	cb 01       	movw	r24, r22
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	fc 01       	movw	r30, r24
    1212:	e8 59       	subi	r30, 0x98	; 152
    1214:	ff 4f       	sbci	r31, 0xFF	; 255
    1216:	e2 0f       	add	r30, r18
    1218:	f3 1f       	adc	r31, r19
    121a:	40 81       	ld	r20, Z
    121c:	82 57       	subi	r24, 0x72	; 114
    121e:	9e 4f       	sbci	r25, 0xFE	; 254
    1220:	fc 01       	movw	r30, r24
    1222:	e2 0f       	add	r30, r18
    1224:	f3 1f       	adc	r31, r19
    1226:	40 83       	st	Z, r20
			}
		}
	}
	else if(shape == 6){
		for(int i = 0 ; i < 4; i++){
			for(int j = 0; j < 4; j++){
    1228:	2f 5f       	subi	r18, 0xFF	; 255
    122a:	3f 4f       	sbci	r19, 0xFF	; 255
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <generate_shape+0x214>
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	24 30       	cpi	r18, 0x04	; 4
    1234:	31 05       	cpc	r19, r1
    1236:	3c f3       	brlt	.-50     	; 0x1206 <generate_shape+0x1e8>
				current_shape_array[i][j] = shape_Z_array[i][j];
			}
		}
	}
	else if(shape == 6){
		for(int i = 0 ; i < 4; i++){
    1238:	6f 5f       	subi	r22, 0xFF	; 255
    123a:	7f 4f       	sbci	r23, 0xFF	; 255
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <generate_shape+0x224>
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	64 30       	cpi	r22, 0x04	; 4
    1244:	71 05       	cpc	r23, r1
    1246:	9c f3       	brlt	.-26     	; 0x122e <generate_shape+0x210>
    1248:	08 95       	ret

0000124a <start_again>:
		}
	}
}

void start_again(){
	for(int i = 0; i < 16; i++){
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	15 c0       	rjmp	.+42     	; 0x127a <start_again+0x30>
		for(int j = 0; j < 8; j++){
			current_display[i][j] = FALSE;
    1250:	f9 01       	movw	r30, r18
    1252:	ee 0f       	add	r30, r30
    1254:	ff 1f       	adc	r31, r31
    1256:	ee 0f       	add	r30, r30
    1258:	ff 1f       	adc	r31, r31
    125a:	ee 0f       	add	r30, r30
    125c:	ff 1f       	adc	r31, r31
    125e:	e2 50       	subi	r30, 0x02	; 2
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	e8 0f       	add	r30, r24
    1264:	f9 1f       	adc	r31, r25
    1266:	10 82       	st	Z, r1
	}
}

void start_again(){
	for(int i = 0; i < 16; i++){
		for(int j = 0; j < 8; j++){
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <start_again+0x26>
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	88 30       	cpi	r24, 0x08	; 8
    1272:	91 05       	cpc	r25, r1
    1274:	6c f3       	brlt	.-38     	; 0x1250 <start_again+0x6>
		}
	}
}

void start_again(){
	for(int i = 0; i < 16; i++){
    1276:	2f 5f       	subi	r18, 0xFF	; 255
    1278:	3f 4f       	sbci	r19, 0xFF	; 255
    127a:	20 31       	cpi	r18, 0x10	; 16
    127c:	31 05       	cpc	r19, r1
    127e:	b4 f3       	brlt	.-20     	; 0x126c <start_again+0x22>
		for(int j = 0; j < 8; j++){
			current_display[i][j] = FALSE;
		}
	}
}
    1280:	08 95       	ret

00001282 <showNextPiece>:



void showNextPiece(int x){
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	60 97       	sbiw	r28, 0x10	; 16
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
	char msg1[] = "Next piece :   ";
    1296:	80 e1       	ldi	r24, 0x10	; 16
    1298:	e9 ee       	ldi	r30, 0xE9	; 233
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	de 01       	movw	r26, r28
    129e:	11 96       	adiw	r26, 0x01	; 1
    12a0:	01 90       	ld	r0, Z+
    12a2:	0d 92       	st	X+, r0
    12a4:	8a 95       	dec	r24
    12a6:	e1 f7       	brne	.-8      	; 0x12a0 <showNextPiece+0x1e>
	//msg1[13] = ;
	Lcd4_Set_Cursor(2,1);
    12a8:	61 e0       	ldi	r22, 0x01	; 1
    12aa:	82 e0       	ldi	r24, 0x02	; 2
    12ac:	0e 94 fe 02 	call	0x5fc	; 0x5fc <Lcd4_Set_Cursor>
	Lcd4_Write_String(msg1);
    12b0:	ce 01       	movw	r24, r28
    12b2:	01 96       	adiw	r24, 0x01	; 1
    12b4:	0e 94 97 03 	call	0x72e	; 0x72e <Lcd4_Write_String>
}
    12b8:	60 96       	adiw	r28, 0x10	; 16
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	08 95       	ret

000012ca <main>:
int main(void)
{
	MCUCSR |= 1<<JTD;
    12ca:	84 b7       	in	r24, 0x34	; 52
    12cc:	80 68       	ori	r24, 0x80	; 128
    12ce:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= 1<<JTD;
    12d0:	84 b7       	in	r24, 0x34	; 52
    12d2:	80 68       	ori	r24, 0x80	; 128
    12d4:	84 bf       	out	0x34, r24	; 52
	srand(time(NULL));
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	0e 94 c6 00 	call	0x18c	; 0x18c <time>
    12de:	cb 01       	movw	r24, r22
    12e0:	0e 94 17 0b 	call	0x162e	; 0x162e <srand>
	DDRA = 0xFF;
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
    12e8:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
    12ea:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11110000 ;
    12ec:	80 ef       	ldi	r24, 0xF0	; 240
    12ee:	81 bb       	out	0x11, r24	; 17
	Lcd4_Init();
    12f0:	0e 94 1c 03 	call	0x638	; 0x638 <Lcd4_Init>
	int i = 0, count = 0; 
    12f4:	00 e0       	ldi	r16, 0x00	; 0
    12f6:	10 e0       	ldi	r17, 0x00	; 0
    12f8:	c0 e0       	ldi	r28, 0x00	; 0
    12fa:	d0 e0       	ldi	r29, 0x00	; 0
	//r = 0;
	//UART_init();
	while (1)
	{
		PORTC = row[i]; // common row connection
    12fc:	fe 01       	movw	r30, r28
    12fe:	e8 52       	subi	r30, 0x28	; 40
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	80 81       	ld	r24, Z
    1304:	85 bb       	out	0x15, r24	; 21
		PORTA = get_col(i); // upper matrix column
    1306:	ce 01       	movw	r24, r28
    1308:	0e 94 48 06 	call	0xc90	; 0xc90 <get_col>
    130c:	8b bb       	out	0x1b, r24	; 27
		PORTB = get_col(i+8); // lower matrix column
    130e:	ce 01       	movw	r24, r28
    1310:	08 96       	adiw	r24, 0x08	; 8
    1312:	0e 94 48 06 	call	0xc90	; 0xc90 <get_col>
    1316:	88 bb       	out	0x18, r24	; 24
		i++;
    1318:	21 96       	adiw	r28, 0x01	; 1
		if(i > 7) i = 0;
    131a:	c8 30       	cpi	r28, 0x08	; 8
    131c:	d1 05       	cpc	r29, r1
    131e:	14 f0       	brlt	.+4      	; 0x1324 <main+0x5a>
    1320:	c0 e0       	ldi	r28, 0x00	; 0
    1322:	d0 e0       	ldi	r29, 0x00	; 0
		//_delay_ms(4);
		if(current_R == 0 && current_C == 2 && current_shape == -1){
    1324:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <current_R>
    1328:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <current_R+0x1>
    132c:	89 2b       	or	r24, r25
    132e:	09 f0       	breq	.+2      	; 0x1332 <main+0x68>
    1330:	40 c0       	rjmp	.+128    	; 0x13b2 <main+0xe8>
    1332:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <current_C>
    1336:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <current_C+0x1>
    133a:	02 97       	sbiw	r24, 0x02	; 2
    133c:	d1 f5       	brne	.+116    	; 0x13b2 <main+0xe8>
    133e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <current_shape>
    1342:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <current_shape+0x1>
    1346:	01 96       	adiw	r24, 0x01	; 1
    1348:	a1 f5       	brne	.+104    	; 0x13b2 <main+0xe8>
			generate_shape();
    134a:	0e 94 0f 08 	call	0x101e	; 0x101e <generate_shape>
			if(check_valid(0 , 2 , current_shape_array) == TRUE){
    134e:	4e e8       	ldi	r20, 0x8E	; 142
    1350:	51 e0       	ldi	r21, 0x01	; 1
    1352:	62 e0       	ldi	r22, 0x02	; 2
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <check_valid>
    135e:	8f 3f       	cpi	r24, 0xFF	; 255
    1360:	59 f4       	brne	.+22     	; 0x1378 <main+0xae>
			//	UART_send(current_shape);
				showNextPiece(current_shape);
    1362:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <current_shape>
    1366:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <current_shape+0x1>
    136a:	0e 94 41 09 	call	0x1282	; 0x1282 <showNextPiece>
				set_shape(current_shape_array);
    136e:	8e e8       	ldi	r24, 0x8E	; 142
    1370:	91 e0       	ldi	r25, 0x01	; 1
    1372:	0e 94 df 05 	call	0xbbe	; 0xbbe <set_shape>
    1376:	1d c0       	rjmp	.+58     	; 0x13b2 <main+0xe8>
				//_delay_ms(2);
			}
			else{
				//UART_send(9);
				PORTC |= (1<< PC5);
    1378:	85 b3       	in	r24, 0x15	; 21
    137a:	80 62       	ori	r24, 0x20	; 32
    137c:	85 bb       	out	0x15, r24	; 21
    137e:	8f e4       	ldi	r24, 0x4F	; 79
    1380:	93 ec       	ldi	r25, 0xC3	; 195
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	f1 f7       	brne	.-4      	; 0x1382 <main+0xb8>
    1386:	00 c0       	rjmp	.+0      	; 0x1388 <main+0xbe>
    1388:	00 00       	nop
				_delay_ms(200);
				PORTC &= ~(1<< PC5);
    138a:	85 b3       	in	r24, 0x15	; 21
    138c:	8f 7d       	andi	r24, 0xDF	; 223
    138e:	85 bb       	out	0x15, r24	; 21
    1390:	8f e4       	ldi	r24, 0x4F	; 79
    1392:	93 ec       	ldi	r25, 0xC3	; 195
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	f1 f7       	brne	.-4      	; 0x1394 <main+0xca>
    1398:	00 c0       	rjmp	.+0      	; 0x139a <main+0xd0>
    139a:	00 00       	nop
				_delay_ms(200);
				start_again();
    139c:	0e 94 25 09 	call	0x124a	; 0x124a <start_again>
    13a0:	9f e3       	ldi	r25, 0x3F	; 63
    13a2:	2d e0       	ldi	r18, 0x0D	; 13
    13a4:	83 e0       	ldi	r24, 0x03	; 3
    13a6:	91 50       	subi	r25, 0x01	; 1
    13a8:	20 40       	sbci	r18, 0x00	; 0
    13aa:	80 40       	sbci	r24, 0x00	; 0
    13ac:	e1 f7       	brne	.-8      	; 0x13a6 <main+0xdc>
    13ae:	00 c0       	rjmp	.+0      	; 0x13b0 <main+0xe6>
    13b0:	00 00       	nop
				_delay_ms(1000);
			}
		}
		count++;
    13b2:	0f 5f       	subi	r16, 0xFF	; 255
    13b4:	1f 4f       	sbci	r17, 0xFF	; 255
		if(count == 25){
    13b6:	09 31       	cpi	r16, 0x19	; 25
    13b8:	11 05       	cpc	r17, r1
    13ba:	21 f4       	brne	.+8      	; 0x13c4 <main+0xfa>
			go_down();
    13bc:	0e 94 bc 07 	call	0xf78	; 0xf78 <go_down>
			count = 0;
    13c0:	00 e0       	ldi	r16, 0x00	; 0
    13c2:	10 e0       	ldi	r17, 0x00	; 0
		}
		if(!(PIND & (1<<PD0))){
    13c4:	80 99       	sbic	0x10, 0	; 16
    13c6:	08 c0       	rjmp	.+16     	; 0x13d8 <main+0x10e>
			go_left();
    13c8:	0e 94 78 07 	call	0xef0	; 0xef0 <go_left>
    13cc:	8f e4       	ldi	r24, 0x4F	; 79
    13ce:	93 ec       	ldi	r25, 0xC3	; 195
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	f1 f7       	brne	.-4      	; 0x13d0 <main+0x106>
    13d4:	00 c0       	rjmp	.+0      	; 0x13d6 <main+0x10c>
    13d6:	00 00       	nop
			_delay_ms(200);
		}
		if(!(PIND & (1<<PD1))){
    13d8:	81 99       	sbic	0x10, 1	; 16
    13da:	08 c0       	rjmp	.+16     	; 0x13ec <main+0x122>
			go_right();
    13dc:	0e 94 9a 07 	call	0xf34	; 0xf34 <go_right>
    13e0:	8f e4       	ldi	r24, 0x4F	; 79
    13e2:	93 ec       	ldi	r25, 0xC3	; 195
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <main+0x11a>
    13e8:	00 c0       	rjmp	.+0      	; 0x13ea <main+0x120>
    13ea:	00 00       	nop
			_delay_ms(200);
		}
		if(!(PIND & (1<<PD2))){
    13ec:	82 99       	sbic	0x10, 2	; 16
    13ee:	08 c0       	rjmp	.+16     	; 0x1400 <main+0x136>
			go_down();
    13f0:	0e 94 bc 07 	call	0xf78	; 0xf78 <go_down>
    13f4:	8f e4       	ldi	r24, 0x4F	; 79
    13f6:	93 ec       	ldi	r25, 0xC3	; 195
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	f1 f7       	brne	.-4      	; 0x13f8 <main+0x12e>
    13fc:	00 c0       	rjmp	.+0      	; 0x13fe <main+0x134>
    13fe:	00 00       	nop
			_delay_ms(200);
		}
		if(!(PIND & (1<<PD3))){
    1400:	83 99       	sbic	0x10, 3	; 16
    1402:	3c c0       	rjmp	.+120    	; 0x147c <main+0x1b2>
			rotate_shape(current_shape_array);
    1404:	8e e8       	ldi	r24, 0x8E	; 142
    1406:	91 e0       	ldi	r25, 0x01	; 1
    1408:	0e 94 ed 04 	call	0x9da	; 0x9da <rotate_shape>
			remove_shape(current_shape_array);
    140c:	8e e8       	ldi	r24, 0x8E	; 142
    140e:	91 e0       	ldi	r25, 0x01	; 1
    1410:	0e 94 14 06 	call	0xc28	; 0xc28 <remove_shape>
			if(check_valid(current_R, current_C, temp_shape_array) == TRUE){
    1414:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <current_C>
    1418:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <current_C+0x1>
    141c:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <current_R>
    1420:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <current_R+0x1>
    1424:	4e e7       	ldi	r20, 0x7E	; 126
    1426:	51 e0       	ldi	r21, 0x01	; 1
    1428:	0e 94 9e 05 	call	0xb3c	; 0xb3c <check_valid>
    142c:	8f 3f       	cpi	r24, 0xFF	; 255
    142e:	11 f5       	brne	.+68     	; 0x1474 <main+0x1aa>
    1430:	1c c0       	rjmp	.+56     	; 0x146a <main+0x1a0>
				for(int i = 0 ; i < 4; i++){
					for(int j = 0; j < 4; j++){
						current_shape_array[i][j] = temp_shape_array[i][j];
    1432:	cb 01       	movw	r24, r22
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	fc 01       	movw	r30, r24
    143e:	e2 58       	subi	r30, 0x82	; 130
    1440:	fe 4f       	sbci	r31, 0xFE	; 254
    1442:	e2 0f       	add	r30, r18
    1444:	f3 1f       	adc	r31, r19
    1446:	40 81       	ld	r20, Z
    1448:	82 57       	subi	r24, 0x72	; 114
    144a:	9e 4f       	sbci	r25, 0xFE	; 254
    144c:	fc 01       	movw	r30, r24
    144e:	e2 0f       	add	r30, r18
    1450:	f3 1f       	adc	r31, r19
    1452:	40 83       	st	Z, r20
		if(!(PIND & (1<<PD3))){
			rotate_shape(current_shape_array);
			remove_shape(current_shape_array);
			if(check_valid(current_R, current_C, temp_shape_array) == TRUE){
				for(int i = 0 ; i < 4; i++){
					for(int j = 0; j < 4; j++){
    1454:	2f 5f       	subi	r18, 0xFF	; 255
    1456:	3f 4f       	sbci	r19, 0xFF	; 255
    1458:	02 c0       	rjmp	.+4      	; 0x145e <main+0x194>
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	24 30       	cpi	r18, 0x04	; 4
    1460:	31 05       	cpc	r19, r1
    1462:	3c f3       	brlt	.-50     	; 0x1432 <main+0x168>
		}
		if(!(PIND & (1<<PD3))){
			rotate_shape(current_shape_array);
			remove_shape(current_shape_array);
			if(check_valid(current_R, current_C, temp_shape_array) == TRUE){
				for(int i = 0 ; i < 4; i++){
    1464:	6f 5f       	subi	r22, 0xFF	; 255
    1466:	7f 4f       	sbci	r23, 0xFF	; 255
    1468:	02 c0       	rjmp	.+4      	; 0x146e <main+0x1a4>
    146a:	60 e0       	ldi	r22, 0x00	; 0
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	64 30       	cpi	r22, 0x04	; 4
    1470:	71 05       	cpc	r23, r1
    1472:	9c f3       	brlt	.-26     	; 0x145a <main+0x190>
					for(int j = 0; j < 4; j++){
						current_shape_array[i][j] = temp_shape_array[i][j];
					}
				}
			}
			set_shape(current_shape_array);
    1474:	8e e8       	ldi	r24, 0x8E	; 142
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	0e 94 df 05 	call	0xbbe	; 0xbbe <set_shape>
		}
		showScore();
    147c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <showScore>
	}
    1480:	3d cf       	rjmp	.-390    	; 0x12fc <main+0x32>

00001482 <__floatunsisf>:
    1482:	e8 94       	clt
    1484:	09 c0       	rjmp	.+18     	; 0x1498 <__floatsisf+0x12>

00001486 <__floatsisf>:
    1486:	97 fb       	bst	r25, 7
    1488:	3e f4       	brtc	.+14     	; 0x1498 <__floatsisf+0x12>
    148a:	90 95       	com	r25
    148c:	80 95       	com	r24
    148e:	70 95       	com	r23
    1490:	61 95       	neg	r22
    1492:	7f 4f       	sbci	r23, 0xFF	; 255
    1494:	8f 4f       	sbci	r24, 0xFF	; 255
    1496:	9f 4f       	sbci	r25, 0xFF	; 255
    1498:	99 23       	and	r25, r25
    149a:	a9 f0       	breq	.+42     	; 0x14c6 <__floatsisf+0x40>
    149c:	f9 2f       	mov	r31, r25
    149e:	96 e9       	ldi	r25, 0x96	; 150
    14a0:	bb 27       	eor	r27, r27
    14a2:	93 95       	inc	r25
    14a4:	f6 95       	lsr	r31
    14a6:	87 95       	ror	r24
    14a8:	77 95       	ror	r23
    14aa:	67 95       	ror	r22
    14ac:	b7 95       	ror	r27
    14ae:	f1 11       	cpse	r31, r1
    14b0:	f8 cf       	rjmp	.-16     	; 0x14a2 <__floatsisf+0x1c>
    14b2:	fa f4       	brpl	.+62     	; 0x14f2 <__floatsisf+0x6c>
    14b4:	bb 0f       	add	r27, r27
    14b6:	11 f4       	brne	.+4      	; 0x14bc <__floatsisf+0x36>
    14b8:	60 ff       	sbrs	r22, 0
    14ba:	1b c0       	rjmp	.+54     	; 0x14f2 <__floatsisf+0x6c>
    14bc:	6f 5f       	subi	r22, 0xFF	; 255
    14be:	7f 4f       	sbci	r23, 0xFF	; 255
    14c0:	8f 4f       	sbci	r24, 0xFF	; 255
    14c2:	9f 4f       	sbci	r25, 0xFF	; 255
    14c4:	16 c0       	rjmp	.+44     	; 0x14f2 <__floatsisf+0x6c>
    14c6:	88 23       	and	r24, r24
    14c8:	11 f0       	breq	.+4      	; 0x14ce <__floatsisf+0x48>
    14ca:	96 e9       	ldi	r25, 0x96	; 150
    14cc:	11 c0       	rjmp	.+34     	; 0x14f0 <__floatsisf+0x6a>
    14ce:	77 23       	and	r23, r23
    14d0:	21 f0       	breq	.+8      	; 0x14da <__floatsisf+0x54>
    14d2:	9e e8       	ldi	r25, 0x8E	; 142
    14d4:	87 2f       	mov	r24, r23
    14d6:	76 2f       	mov	r23, r22
    14d8:	05 c0       	rjmp	.+10     	; 0x14e4 <__floatsisf+0x5e>
    14da:	66 23       	and	r22, r22
    14dc:	71 f0       	breq	.+28     	; 0x14fa <__floatsisf+0x74>
    14de:	96 e8       	ldi	r25, 0x86	; 134
    14e0:	86 2f       	mov	r24, r22
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	2a f0       	brmi	.+10     	; 0x14f2 <__floatsisf+0x6c>
    14e8:	9a 95       	dec	r25
    14ea:	66 0f       	add	r22, r22
    14ec:	77 1f       	adc	r23, r23
    14ee:	88 1f       	adc	r24, r24
    14f0:	da f7       	brpl	.-10     	; 0x14e8 <__floatsisf+0x62>
    14f2:	88 0f       	add	r24, r24
    14f4:	96 95       	lsr	r25
    14f6:	87 95       	ror	r24
    14f8:	97 f9       	bld	r25, 7
    14fa:	08 95       	ret

000014fc <__divmodhi4>:
    14fc:	97 fb       	bst	r25, 7
    14fe:	07 2e       	mov	r0, r23
    1500:	16 f4       	brtc	.+4      	; 0x1506 <__divmodhi4+0xa>
    1502:	00 94       	com	r0
    1504:	07 d0       	rcall	.+14     	; 0x1514 <__divmodhi4_neg1>
    1506:	77 fd       	sbrc	r23, 7
    1508:	09 d0       	rcall	.+18     	; 0x151c <__divmodhi4_neg2>
    150a:	0e 94 92 0a 	call	0x1524	; 0x1524 <__udivmodhi4>
    150e:	07 fc       	sbrc	r0, 7
    1510:	05 d0       	rcall	.+10     	; 0x151c <__divmodhi4_neg2>
    1512:	3e f4       	brtc	.+14     	; 0x1522 <__divmodhi4_exit>

00001514 <__divmodhi4_neg1>:
    1514:	90 95       	com	r25
    1516:	81 95       	neg	r24
    1518:	9f 4f       	sbci	r25, 0xFF	; 255
    151a:	08 95       	ret

0000151c <__divmodhi4_neg2>:
    151c:	70 95       	com	r23
    151e:	61 95       	neg	r22
    1520:	7f 4f       	sbci	r23, 0xFF	; 255

00001522 <__divmodhi4_exit>:
    1522:	08 95       	ret

00001524 <__udivmodhi4>:
    1524:	aa 1b       	sub	r26, r26
    1526:	bb 1b       	sub	r27, r27
    1528:	51 e1       	ldi	r21, 0x11	; 17
    152a:	07 c0       	rjmp	.+14     	; 0x153a <__udivmodhi4_ep>

0000152c <__udivmodhi4_loop>:
    152c:	aa 1f       	adc	r26, r26
    152e:	bb 1f       	adc	r27, r27
    1530:	a6 17       	cp	r26, r22
    1532:	b7 07       	cpc	r27, r23
    1534:	10 f0       	brcs	.+4      	; 0x153a <__udivmodhi4_ep>
    1536:	a6 1b       	sub	r26, r22
    1538:	b7 0b       	sbc	r27, r23

0000153a <__udivmodhi4_ep>:
    153a:	88 1f       	adc	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	5a 95       	dec	r21
    1540:	a9 f7       	brne	.-22     	; 0x152c <__udivmodhi4_loop>
    1542:	80 95       	com	r24
    1544:	90 95       	com	r25
    1546:	bc 01       	movw	r22, r24
    1548:	cd 01       	movw	r24, r26
    154a:	08 95       	ret

0000154c <dtostrf>:
    154c:	ef 92       	push	r14
    154e:	0f 93       	push	r16
    1550:	1f 93       	push	r17
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	e8 01       	movw	r28, r16
    1558:	47 fd       	sbrc	r20, 7
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <dtostrf+0x14>
    155c:	34 e0       	ldi	r19, 0x04	; 4
    155e:	01 c0       	rjmp	.+2      	; 0x1562 <dtostrf+0x16>
    1560:	34 e1       	ldi	r19, 0x14	; 20
    1562:	04 2e       	mov	r0, r20
    1564:	00 0c       	add	r0, r0
    1566:	55 0b       	sbc	r21, r21
    1568:	57 ff       	sbrs	r21, 7
    156a:	03 c0       	rjmp	.+6      	; 0x1572 <dtostrf+0x26>
    156c:	51 95       	neg	r21
    156e:	41 95       	neg	r20
    1570:	51 09       	sbc	r21, r1
    1572:	e3 2e       	mov	r14, r19
    1574:	02 2f       	mov	r16, r18
    1576:	24 2f       	mov	r18, r20
    1578:	ae 01       	movw	r20, r28
    157a:	0e 94 22 0b 	call	0x1644	; 0x1644 <dtoa_prf>
    157e:	ce 01       	movw	r24, r28
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	0f 91       	pop	r16
    1588:	ef 90       	pop	r14
    158a:	08 95       	ret

0000158c <do_rand>:
    158c:	8f 92       	push	r8
    158e:	9f 92       	push	r9
    1590:	af 92       	push	r10
    1592:	bf 92       	push	r11
    1594:	cf 92       	push	r12
    1596:	df 92       	push	r13
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	ec 01       	movw	r28, r24
    15a2:	68 81       	ld	r22, Y
    15a4:	79 81       	ldd	r23, Y+1	; 0x01
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	9b 81       	ldd	r25, Y+3	; 0x03
    15aa:	61 15       	cp	r22, r1
    15ac:	71 05       	cpc	r23, r1
    15ae:	81 05       	cpc	r24, r1
    15b0:	91 05       	cpc	r25, r1
    15b2:	21 f4       	brne	.+8      	; 0x15bc <do_rand+0x30>
    15b4:	64 e2       	ldi	r22, 0x24	; 36
    15b6:	79 ed       	ldi	r23, 0xD9	; 217
    15b8:	8b e5       	ldi	r24, 0x5B	; 91
    15ba:	97 e0       	ldi	r25, 0x07	; 7
    15bc:	2d e1       	ldi	r18, 0x1D	; 29
    15be:	33 ef       	ldi	r19, 0xF3	; 243
    15c0:	41 e0       	ldi	r20, 0x01	; 1
    15c2:	50 e0       	ldi	r21, 0x00	; 0
    15c4:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__divmodsi4>
    15c8:	49 01       	movw	r8, r18
    15ca:	5a 01       	movw	r10, r20
    15cc:	9b 01       	movw	r18, r22
    15ce:	ac 01       	movw	r20, r24
    15d0:	a7 ea       	ldi	r26, 0xA7	; 167
    15d2:	b1 e4       	ldi	r27, 0x41	; 65
    15d4:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__muluhisi3>
    15d8:	6b 01       	movw	r12, r22
    15da:	7c 01       	movw	r14, r24
    15dc:	ac ee       	ldi	r26, 0xEC	; 236
    15de:	b4 ef       	ldi	r27, 0xF4	; 244
    15e0:	a5 01       	movw	r20, r10
    15e2:	94 01       	movw	r18, r8
    15e4:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__mulohisi3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	8c 0d       	add	r24, r12
    15ee:	9d 1d       	adc	r25, r13
    15f0:	ae 1d       	adc	r26, r14
    15f2:	bf 1d       	adc	r27, r15
    15f4:	b7 ff       	sbrs	r27, 7
    15f6:	03 c0       	rjmp	.+6      	; 0x15fe <do_rand+0x72>
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	a1 09       	sbc	r26, r1
    15fc:	b0 48       	sbci	r27, 0x80	; 128
    15fe:	88 83       	st	Y, r24
    1600:	99 83       	std	Y+1, r25	; 0x01
    1602:	aa 83       	std	Y+2, r26	; 0x02
    1604:	bb 83       	std	Y+3, r27	; 0x03
    1606:	9f 77       	andi	r25, 0x7F	; 127
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	ff 90       	pop	r15
    160e:	ef 90       	pop	r14
    1610:	df 90       	pop	r13
    1612:	cf 90       	pop	r12
    1614:	bf 90       	pop	r11
    1616:	af 90       	pop	r10
    1618:	9f 90       	pop	r9
    161a:	8f 90       	pop	r8
    161c:	08 95       	ret

0000161e <rand_r>:
    161e:	0e 94 c6 0a 	call	0x158c	; 0x158c <do_rand>
    1622:	08 95       	ret

00001624 <rand>:
    1624:	80 e6       	ldi	r24, 0x60	; 96
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	0e 94 c6 0a 	call	0x158c	; 0x158c <do_rand>
    162c:	08 95       	ret

0000162e <srand>:
    162e:	a0 e0       	ldi	r26, 0x00	; 0
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    1636:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    163a:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    163e:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    1642:	08 95       	ret

00001644 <dtoa_prf>:
    1644:	a9 e0       	ldi	r26, 0x09	; 9
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e8 e2       	ldi	r30, 0x28	; 40
    164a:	fb e0       	ldi	r31, 0x0B	; 11
    164c:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__prologue_saves__+0xc>
    1650:	6a 01       	movw	r12, r20
    1652:	12 2f       	mov	r17, r18
    1654:	b0 2e       	mov	r11, r16
    1656:	2b e3       	ldi	r18, 0x3B	; 59
    1658:	20 17       	cp	r18, r16
    165a:	20 f0       	brcs	.+8      	; 0x1664 <dtoa_prf+0x20>
    165c:	ff 24       	eor	r15, r15
    165e:	f3 94       	inc	r15
    1660:	f0 0e       	add	r15, r16
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <dtoa_prf+0x24>
    1664:	2c e3       	ldi	r18, 0x3C	; 60
    1666:	f2 2e       	mov	r15, r18
    1668:	0f 2d       	mov	r16, r15
    166a:	27 e0       	ldi	r18, 0x07	; 7
    166c:	ae 01       	movw	r20, r28
    166e:	4f 5f       	subi	r20, 0xFF	; 255
    1670:	5f 4f       	sbci	r21, 0xFF	; 255
    1672:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__ftoa_engine>
    1676:	bc 01       	movw	r22, r24
    1678:	49 81       	ldd	r20, Y+1	; 0x01
    167a:	84 2f       	mov	r24, r20
    167c:	89 70       	andi	r24, 0x09	; 9
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	31 f0       	breq	.+12     	; 0x168e <dtoa_prf+0x4a>
    1682:	e1 fc       	sbrc	r14, 1
    1684:	06 c0       	rjmp	.+12     	; 0x1692 <dtoa_prf+0x4e>
    1686:	e0 fe       	sbrs	r14, 0
    1688:	06 c0       	rjmp	.+12     	; 0x1696 <dtoa_prf+0x52>
    168a:	90 e2       	ldi	r25, 0x20	; 32
    168c:	05 c0       	rjmp	.+10     	; 0x1698 <dtoa_prf+0x54>
    168e:	9d e2       	ldi	r25, 0x2D	; 45
    1690:	03 c0       	rjmp	.+6      	; 0x1698 <dtoa_prf+0x54>
    1692:	9b e2       	ldi	r25, 0x2B	; 43
    1694:	01 c0       	rjmp	.+2      	; 0x1698 <dtoa_prf+0x54>
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	5e 2d       	mov	r21, r14
    169a:	50 71       	andi	r21, 0x10	; 16
    169c:	43 ff       	sbrs	r20, 3
    169e:	3c c0       	rjmp	.+120    	; 0x1718 <dtoa_prf+0xd4>
    16a0:	91 11       	cpse	r25, r1
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <dtoa_prf+0x64>
    16a4:	83 e0       	ldi	r24, 0x03	; 3
    16a6:	01 c0       	rjmp	.+2      	; 0x16aa <dtoa_prf+0x66>
    16a8:	84 e0       	ldi	r24, 0x04	; 4
    16aa:	81 17       	cp	r24, r17
    16ac:	18 f4       	brcc	.+6      	; 0x16b4 <dtoa_prf+0x70>
    16ae:	21 2f       	mov	r18, r17
    16b0:	28 1b       	sub	r18, r24
    16b2:	01 c0       	rjmp	.+2      	; 0x16b6 <dtoa_prf+0x72>
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	51 11       	cpse	r21, r1
    16b8:	0b c0       	rjmp	.+22     	; 0x16d0 <dtoa_prf+0x8c>
    16ba:	f6 01       	movw	r30, r12
    16bc:	82 2f       	mov	r24, r18
    16be:	30 e2       	ldi	r19, 0x20	; 32
    16c0:	88 23       	and	r24, r24
    16c2:	19 f0       	breq	.+6      	; 0x16ca <dtoa_prf+0x86>
    16c4:	31 93       	st	Z+, r19
    16c6:	81 50       	subi	r24, 0x01	; 1
    16c8:	fb cf       	rjmp	.-10     	; 0x16c0 <dtoa_prf+0x7c>
    16ca:	c2 0e       	add	r12, r18
    16cc:	d1 1c       	adc	r13, r1
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	99 23       	and	r25, r25
    16d2:	29 f0       	breq	.+10     	; 0x16de <dtoa_prf+0x9a>
    16d4:	d6 01       	movw	r26, r12
    16d6:	9c 93       	st	X, r25
    16d8:	f6 01       	movw	r30, r12
    16da:	31 96       	adiw	r30, 0x01	; 1
    16dc:	6f 01       	movw	r12, r30
    16de:	c6 01       	movw	r24, r12
    16e0:	03 96       	adiw	r24, 0x03	; 3
    16e2:	e2 fe       	sbrs	r14, 2
    16e4:	0a c0       	rjmp	.+20     	; 0x16fa <dtoa_prf+0xb6>
    16e6:	3e e4       	ldi	r19, 0x4E	; 78
    16e8:	d6 01       	movw	r26, r12
    16ea:	3c 93       	st	X, r19
    16ec:	41 e4       	ldi	r20, 0x41	; 65
    16ee:	11 96       	adiw	r26, 0x01	; 1
    16f0:	4c 93       	st	X, r20
    16f2:	11 97       	sbiw	r26, 0x01	; 1
    16f4:	12 96       	adiw	r26, 0x02	; 2
    16f6:	3c 93       	st	X, r19
    16f8:	06 c0       	rjmp	.+12     	; 0x1706 <dtoa_prf+0xc2>
    16fa:	3e e6       	ldi	r19, 0x6E	; 110
    16fc:	f6 01       	movw	r30, r12
    16fe:	30 83       	st	Z, r19
    1700:	41 e6       	ldi	r20, 0x61	; 97
    1702:	41 83       	std	Z+1, r20	; 0x01
    1704:	32 83       	std	Z+2, r19	; 0x02
    1706:	fc 01       	movw	r30, r24
    1708:	32 2f       	mov	r19, r18
    170a:	40 e2       	ldi	r20, 0x20	; 32
    170c:	33 23       	and	r19, r19
    170e:	09 f4       	brne	.+2      	; 0x1712 <dtoa_prf+0xce>
    1710:	42 c0       	rjmp	.+132    	; 0x1796 <dtoa_prf+0x152>
    1712:	41 93       	st	Z+, r20
    1714:	31 50       	subi	r19, 0x01	; 1
    1716:	fa cf       	rjmp	.-12     	; 0x170c <dtoa_prf+0xc8>
    1718:	42 ff       	sbrs	r20, 2
    171a:	44 c0       	rjmp	.+136    	; 0x17a4 <dtoa_prf+0x160>
    171c:	91 11       	cpse	r25, r1
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <dtoa_prf+0xe0>
    1720:	83 e0       	ldi	r24, 0x03	; 3
    1722:	01 c0       	rjmp	.+2      	; 0x1726 <dtoa_prf+0xe2>
    1724:	84 e0       	ldi	r24, 0x04	; 4
    1726:	81 17       	cp	r24, r17
    1728:	18 f4       	brcc	.+6      	; 0x1730 <dtoa_prf+0xec>
    172a:	21 2f       	mov	r18, r17
    172c:	28 1b       	sub	r18, r24
    172e:	01 c0       	rjmp	.+2      	; 0x1732 <dtoa_prf+0xee>
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	51 11       	cpse	r21, r1
    1734:	0b c0       	rjmp	.+22     	; 0x174c <dtoa_prf+0x108>
    1736:	f6 01       	movw	r30, r12
    1738:	82 2f       	mov	r24, r18
    173a:	30 e2       	ldi	r19, 0x20	; 32
    173c:	88 23       	and	r24, r24
    173e:	19 f0       	breq	.+6      	; 0x1746 <dtoa_prf+0x102>
    1740:	31 93       	st	Z+, r19
    1742:	81 50       	subi	r24, 0x01	; 1
    1744:	fb cf       	rjmp	.-10     	; 0x173c <dtoa_prf+0xf8>
    1746:	c2 0e       	add	r12, r18
    1748:	d1 1c       	adc	r13, r1
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	99 23       	and	r25, r25
    174e:	29 f0       	breq	.+10     	; 0x175a <dtoa_prf+0x116>
    1750:	d6 01       	movw	r26, r12
    1752:	9c 93       	st	X, r25
    1754:	f6 01       	movw	r30, r12
    1756:	31 96       	adiw	r30, 0x01	; 1
    1758:	6f 01       	movw	r12, r30
    175a:	c6 01       	movw	r24, r12
    175c:	03 96       	adiw	r24, 0x03	; 3
    175e:	e2 fe       	sbrs	r14, 2
    1760:	0b c0       	rjmp	.+22     	; 0x1778 <dtoa_prf+0x134>
    1762:	39 e4       	ldi	r19, 0x49	; 73
    1764:	d6 01       	movw	r26, r12
    1766:	3c 93       	st	X, r19
    1768:	3e e4       	ldi	r19, 0x4E	; 78
    176a:	11 96       	adiw	r26, 0x01	; 1
    176c:	3c 93       	st	X, r19
    176e:	11 97       	sbiw	r26, 0x01	; 1
    1770:	36 e4       	ldi	r19, 0x46	; 70
    1772:	12 96       	adiw	r26, 0x02	; 2
    1774:	3c 93       	st	X, r19
    1776:	07 c0       	rjmp	.+14     	; 0x1786 <dtoa_prf+0x142>
    1778:	39 e6       	ldi	r19, 0x69	; 105
    177a:	f6 01       	movw	r30, r12
    177c:	30 83       	st	Z, r19
    177e:	3e e6       	ldi	r19, 0x6E	; 110
    1780:	31 83       	std	Z+1, r19	; 0x01
    1782:	36 e6       	ldi	r19, 0x66	; 102
    1784:	32 83       	std	Z+2, r19	; 0x02
    1786:	fc 01       	movw	r30, r24
    1788:	32 2f       	mov	r19, r18
    178a:	40 e2       	ldi	r20, 0x20	; 32
    178c:	33 23       	and	r19, r19
    178e:	19 f0       	breq	.+6      	; 0x1796 <dtoa_prf+0x152>
    1790:	41 93       	st	Z+, r20
    1792:	31 50       	subi	r19, 0x01	; 1
    1794:	fb cf       	rjmp	.-10     	; 0x178c <dtoa_prf+0x148>
    1796:	fc 01       	movw	r30, r24
    1798:	e2 0f       	add	r30, r18
    179a:	f1 1d       	adc	r31, r1
    179c:	10 82       	st	Z, r1
    179e:	8e ef       	ldi	r24, 0xFE	; 254
    17a0:	9f ef       	ldi	r25, 0xFF	; 255
    17a2:	a6 c0       	rjmp	.+332    	; 0x18f0 <dtoa_prf+0x2ac>
    17a4:	21 e0       	ldi	r18, 0x01	; 1
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	91 11       	cpse	r25, r1
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <dtoa_prf+0x16c>
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	16 16       	cp	r1, r22
    17b2:	17 06       	cpc	r1, r23
    17b4:	1c f4       	brge	.+6      	; 0x17bc <dtoa_prf+0x178>
    17b6:	fb 01       	movw	r30, r22
    17b8:	31 96       	adiw	r30, 0x01	; 1
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <dtoa_prf+0x17c>
    17bc:	e1 e0       	ldi	r30, 0x01	; 1
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	2e 0f       	add	r18, r30
    17c2:	3f 1f       	adc	r19, r31
    17c4:	bb 20       	and	r11, r11
    17c6:	21 f0       	breq	.+8      	; 0x17d0 <dtoa_prf+0x18c>
    17c8:	eb 2d       	mov	r30, r11
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	31 96       	adiw	r30, 0x01	; 1
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <dtoa_prf+0x190>
    17d0:	e0 e0       	ldi	r30, 0x00	; 0
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	2e 0f       	add	r18, r30
    17d6:	3f 1f       	adc	r19, r31
    17d8:	e1 2f       	mov	r30, r17
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	2e 17       	cp	r18, r30
    17de:	3f 07       	cpc	r19, r31
    17e0:	1c f4       	brge	.+6      	; 0x17e8 <dtoa_prf+0x1a4>
    17e2:	12 1b       	sub	r17, r18
    17e4:	21 2f       	mov	r18, r17
    17e6:	01 c0       	rjmp	.+2      	; 0x17ea <dtoa_prf+0x1a6>
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	8e 2d       	mov	r24, r14
    17ec:	88 71       	andi	r24, 0x18	; 24
    17ee:	59 f4       	brne	.+22     	; 0x1806 <dtoa_prf+0x1c2>
    17f0:	f6 01       	movw	r30, r12
    17f2:	82 2f       	mov	r24, r18
    17f4:	30 e2       	ldi	r19, 0x20	; 32
    17f6:	88 23       	and	r24, r24
    17f8:	19 f0       	breq	.+6      	; 0x1800 <dtoa_prf+0x1bc>
    17fa:	31 93       	st	Z+, r19
    17fc:	81 50       	subi	r24, 0x01	; 1
    17fe:	fb cf       	rjmp	.-10     	; 0x17f6 <dtoa_prf+0x1b2>
    1800:	c2 0e       	add	r12, r18
    1802:	d1 1c       	adc	r13, r1
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	99 23       	and	r25, r25
    1808:	29 f0       	breq	.+10     	; 0x1814 <dtoa_prf+0x1d0>
    180a:	d6 01       	movw	r26, r12
    180c:	9c 93       	st	X, r25
    180e:	f6 01       	movw	r30, r12
    1810:	31 96       	adiw	r30, 0x01	; 1
    1812:	6f 01       	movw	r12, r30
    1814:	51 11       	cpse	r21, r1
    1816:	0b c0       	rjmp	.+22     	; 0x182e <dtoa_prf+0x1ea>
    1818:	f6 01       	movw	r30, r12
    181a:	82 2f       	mov	r24, r18
    181c:	90 e3       	ldi	r25, 0x30	; 48
    181e:	88 23       	and	r24, r24
    1820:	19 f0       	breq	.+6      	; 0x1828 <dtoa_prf+0x1e4>
    1822:	91 93       	st	Z+, r25
    1824:	81 50       	subi	r24, 0x01	; 1
    1826:	fb cf       	rjmp	.-10     	; 0x181e <dtoa_prf+0x1da>
    1828:	c2 0e       	add	r12, r18
    182a:	d1 1c       	adc	r13, r1
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	0f 2d       	mov	r16, r15
    1830:	06 0f       	add	r16, r22
    1832:	9a 81       	ldd	r25, Y+2	; 0x02
    1834:	34 2f       	mov	r19, r20
    1836:	30 71       	andi	r19, 0x10	; 16
    1838:	44 ff       	sbrs	r20, 4
    183a:	03 c0       	rjmp	.+6      	; 0x1842 <dtoa_prf+0x1fe>
    183c:	91 33       	cpi	r25, 0x31	; 49
    183e:	09 f4       	brne	.+2      	; 0x1842 <dtoa_prf+0x1fe>
    1840:	01 50       	subi	r16, 0x01	; 1
    1842:	10 16       	cp	r1, r16
    1844:	24 f4       	brge	.+8      	; 0x184e <dtoa_prf+0x20a>
    1846:	09 30       	cpi	r16, 0x09	; 9
    1848:	18 f0       	brcs	.+6      	; 0x1850 <dtoa_prf+0x20c>
    184a:	08 e0       	ldi	r16, 0x08	; 8
    184c:	01 c0       	rjmp	.+2      	; 0x1850 <dtoa_prf+0x20c>
    184e:	01 e0       	ldi	r16, 0x01	; 1
    1850:	ab 01       	movw	r20, r22
    1852:	77 ff       	sbrs	r23, 7
    1854:	02 c0       	rjmp	.+4      	; 0x185a <dtoa_prf+0x216>
    1856:	40 e0       	ldi	r20, 0x00	; 0
    1858:	50 e0       	ldi	r21, 0x00	; 0
    185a:	fb 01       	movw	r30, r22
    185c:	e4 1b       	sub	r30, r20
    185e:	f5 0b       	sbc	r31, r21
    1860:	a1 e0       	ldi	r26, 0x01	; 1
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	ac 0f       	add	r26, r28
    1866:	bd 1f       	adc	r27, r29
    1868:	ea 0f       	add	r30, r26
    186a:	fb 1f       	adc	r31, r27
    186c:	8e e2       	ldi	r24, 0x2E	; 46
    186e:	a8 2e       	mov	r10, r24
    1870:	4b 01       	movw	r8, r22
    1872:	80 1a       	sub	r8, r16
    1874:	91 08       	sbc	r9, r1
    1876:	0b 2d       	mov	r16, r11
    1878:	10 e0       	ldi	r17, 0x00	; 0
    187a:	11 95       	neg	r17
    187c:	01 95       	neg	r16
    187e:	11 09       	sbc	r17, r1
    1880:	4f 3f       	cpi	r20, 0xFF	; 255
    1882:	bf ef       	ldi	r27, 0xFF	; 255
    1884:	5b 07       	cpc	r21, r27
    1886:	21 f4       	brne	.+8      	; 0x1890 <dtoa_prf+0x24c>
    1888:	d6 01       	movw	r26, r12
    188a:	ac 92       	st	X, r10
    188c:	11 96       	adiw	r26, 0x01	; 1
    188e:	6d 01       	movw	r12, r26
    1890:	64 17       	cp	r22, r20
    1892:	75 07       	cpc	r23, r21
    1894:	2c f0       	brlt	.+10     	; 0x18a0 <dtoa_prf+0x25c>
    1896:	84 16       	cp	r8, r20
    1898:	95 06       	cpc	r9, r21
    189a:	14 f4       	brge	.+4      	; 0x18a0 <dtoa_prf+0x25c>
    189c:	81 81       	ldd	r24, Z+1	; 0x01
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <dtoa_prf+0x25e>
    18a0:	80 e3       	ldi	r24, 0x30	; 48
    18a2:	41 50       	subi	r20, 0x01	; 1
    18a4:	51 09       	sbc	r21, r1
    18a6:	31 96       	adiw	r30, 0x01	; 1
    18a8:	d6 01       	movw	r26, r12
    18aa:	11 96       	adiw	r26, 0x01	; 1
    18ac:	7d 01       	movw	r14, r26
    18ae:	40 17       	cp	r20, r16
    18b0:	51 07       	cpc	r21, r17
    18b2:	24 f0       	brlt	.+8      	; 0x18bc <dtoa_prf+0x278>
    18b4:	d6 01       	movw	r26, r12
    18b6:	8c 93       	st	X, r24
    18b8:	67 01       	movw	r12, r14
    18ba:	e2 cf       	rjmp	.-60     	; 0x1880 <dtoa_prf+0x23c>
    18bc:	64 17       	cp	r22, r20
    18be:	75 07       	cpc	r23, r21
    18c0:	39 f4       	brne	.+14     	; 0x18d0 <dtoa_prf+0x28c>
    18c2:	96 33       	cpi	r25, 0x36	; 54
    18c4:	20 f4       	brcc	.+8      	; 0x18ce <dtoa_prf+0x28a>
    18c6:	95 33       	cpi	r25, 0x35	; 53
    18c8:	19 f4       	brne	.+6      	; 0x18d0 <dtoa_prf+0x28c>
    18ca:	31 11       	cpse	r19, r1
    18cc:	01 c0       	rjmp	.+2      	; 0x18d0 <dtoa_prf+0x28c>
    18ce:	81 e3       	ldi	r24, 0x31	; 49
    18d0:	f6 01       	movw	r30, r12
    18d2:	80 83       	st	Z, r24
    18d4:	f7 01       	movw	r30, r14
    18d6:	82 2f       	mov	r24, r18
    18d8:	90 e2       	ldi	r25, 0x20	; 32
    18da:	88 23       	and	r24, r24
    18dc:	19 f0       	breq	.+6      	; 0x18e4 <dtoa_prf+0x2a0>
    18de:	91 93       	st	Z+, r25
    18e0:	81 50       	subi	r24, 0x01	; 1
    18e2:	fb cf       	rjmp	.-10     	; 0x18da <dtoa_prf+0x296>
    18e4:	f7 01       	movw	r30, r14
    18e6:	e2 0f       	add	r30, r18
    18e8:	f1 1d       	adc	r31, r1
    18ea:	10 82       	st	Z, r1
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	29 96       	adiw	r28, 0x09	; 9
    18f2:	ec e0       	ldi	r30, 0x0C	; 12
    18f4:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__epilogue_restores__+0xc>

000018f8 <__ftoa_engine>:
    18f8:	28 30       	cpi	r18, 0x08	; 8
    18fa:	08 f0       	brcs	.+2      	; 0x18fe <__ftoa_engine+0x6>
    18fc:	27 e0       	ldi	r18, 0x07	; 7
    18fe:	33 27       	eor	r19, r19
    1900:	da 01       	movw	r26, r20
    1902:	99 0f       	add	r25, r25
    1904:	31 1d       	adc	r19, r1
    1906:	87 fd       	sbrc	r24, 7
    1908:	91 60       	ori	r25, 0x01	; 1
    190a:	00 96       	adiw	r24, 0x00	; 0
    190c:	61 05       	cpc	r22, r1
    190e:	71 05       	cpc	r23, r1
    1910:	39 f4       	brne	.+14     	; 0x1920 <__ftoa_engine+0x28>
    1912:	32 60       	ori	r19, 0x02	; 2
    1914:	2e 5f       	subi	r18, 0xFE	; 254
    1916:	3d 93       	st	X+, r19
    1918:	30 e3       	ldi	r19, 0x30	; 48
    191a:	2a 95       	dec	r18
    191c:	e1 f7       	brne	.-8      	; 0x1916 <__ftoa_engine+0x1e>
    191e:	08 95       	ret
    1920:	9f 3f       	cpi	r25, 0xFF	; 255
    1922:	30 f0       	brcs	.+12     	; 0x1930 <__ftoa_engine+0x38>
    1924:	80 38       	cpi	r24, 0x80	; 128
    1926:	71 05       	cpc	r23, r1
    1928:	61 05       	cpc	r22, r1
    192a:	09 f0       	breq	.+2      	; 0x192e <__ftoa_engine+0x36>
    192c:	3c 5f       	subi	r19, 0xFC	; 252
    192e:	3c 5f       	subi	r19, 0xFC	; 252
    1930:	3d 93       	st	X+, r19
    1932:	91 30       	cpi	r25, 0x01	; 1
    1934:	08 f0       	brcs	.+2      	; 0x1938 <__ftoa_engine+0x40>
    1936:	80 68       	ori	r24, 0x80	; 128
    1938:	91 1d       	adc	r25, r1
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	1f 93       	push	r17
    1940:	0f 93       	push	r16
    1942:	ff 92       	push	r15
    1944:	ef 92       	push	r14
    1946:	19 2f       	mov	r17, r25
    1948:	98 7f       	andi	r25, 0xF8	; 248
    194a:	96 95       	lsr	r25
    194c:	e9 2f       	mov	r30, r25
    194e:	96 95       	lsr	r25
    1950:	96 95       	lsr	r25
    1952:	e9 0f       	add	r30, r25
    1954:	ff 27       	eor	r31, r31
    1956:	e2 55       	subi	r30, 0x52	; 82
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	99 27       	eor	r25, r25
    195c:	33 27       	eor	r19, r19
    195e:	ee 24       	eor	r14, r14
    1960:	ff 24       	eor	r15, r15
    1962:	a7 01       	movw	r20, r14
    1964:	e7 01       	movw	r28, r14
    1966:	05 90       	lpm	r0, Z+
    1968:	08 94       	sec
    196a:	07 94       	ror	r0
    196c:	28 f4       	brcc	.+10     	; 0x1978 <__ftoa_engine+0x80>
    196e:	36 0f       	add	r19, r22
    1970:	e7 1e       	adc	r14, r23
    1972:	f8 1e       	adc	r15, r24
    1974:	49 1f       	adc	r20, r25
    1976:	51 1d       	adc	r21, r1
    1978:	66 0f       	add	r22, r22
    197a:	77 1f       	adc	r23, r23
    197c:	88 1f       	adc	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	06 94       	lsr	r0
    1982:	a1 f7       	brne	.-24     	; 0x196c <__ftoa_engine+0x74>
    1984:	05 90       	lpm	r0, Z+
    1986:	07 94       	ror	r0
    1988:	28 f4       	brcc	.+10     	; 0x1994 <__ftoa_engine+0x9c>
    198a:	e7 0e       	add	r14, r23
    198c:	f8 1e       	adc	r15, r24
    198e:	49 1f       	adc	r20, r25
    1990:	56 1f       	adc	r21, r22
    1992:	c1 1d       	adc	r28, r1
    1994:	77 0f       	add	r23, r23
    1996:	88 1f       	adc	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	66 1f       	adc	r22, r22
    199c:	06 94       	lsr	r0
    199e:	a1 f7       	brne	.-24     	; 0x1988 <__ftoa_engine+0x90>
    19a0:	05 90       	lpm	r0, Z+
    19a2:	07 94       	ror	r0
    19a4:	28 f4       	brcc	.+10     	; 0x19b0 <__ftoa_engine+0xb8>
    19a6:	f8 0e       	add	r15, r24
    19a8:	49 1f       	adc	r20, r25
    19aa:	56 1f       	adc	r21, r22
    19ac:	c7 1f       	adc	r28, r23
    19ae:	d1 1d       	adc	r29, r1
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	66 1f       	adc	r22, r22
    19b6:	77 1f       	adc	r23, r23
    19b8:	06 94       	lsr	r0
    19ba:	a1 f7       	brne	.-24     	; 0x19a4 <__ftoa_engine+0xac>
    19bc:	05 90       	lpm	r0, Z+
    19be:	07 94       	ror	r0
    19c0:	20 f4       	brcc	.+8      	; 0x19ca <__ftoa_engine+0xd2>
    19c2:	49 0f       	add	r20, r25
    19c4:	56 1f       	adc	r21, r22
    19c6:	c7 1f       	adc	r28, r23
    19c8:	d8 1f       	adc	r29, r24
    19ca:	99 0f       	add	r25, r25
    19cc:	66 1f       	adc	r22, r22
    19ce:	77 1f       	adc	r23, r23
    19d0:	88 1f       	adc	r24, r24
    19d2:	06 94       	lsr	r0
    19d4:	a9 f7       	brne	.-22     	; 0x19c0 <__ftoa_engine+0xc8>
    19d6:	84 91       	lpm	r24, Z
    19d8:	10 95       	com	r17
    19da:	17 70       	andi	r17, 0x07	; 7
    19dc:	41 f0       	breq	.+16     	; 0x19ee <__ftoa_engine+0xf6>
    19de:	d6 95       	lsr	r29
    19e0:	c7 95       	ror	r28
    19e2:	57 95       	ror	r21
    19e4:	47 95       	ror	r20
    19e6:	f7 94       	ror	r15
    19e8:	e7 94       	ror	r14
    19ea:	1a 95       	dec	r17
    19ec:	c1 f7       	brne	.-16     	; 0x19de <__ftoa_engine+0xe6>
    19ee:	e4 e5       	ldi	r30, 0x54	; 84
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	68 94       	set
    19f4:	15 90       	lpm	r1, Z+
    19f6:	15 91       	lpm	r17, Z+
    19f8:	35 91       	lpm	r19, Z+
    19fa:	65 91       	lpm	r22, Z+
    19fc:	95 91       	lpm	r25, Z+
    19fe:	05 90       	lpm	r0, Z+
    1a00:	7f e2       	ldi	r23, 0x2F	; 47
    1a02:	73 95       	inc	r23
    1a04:	e1 18       	sub	r14, r1
    1a06:	f1 0a       	sbc	r15, r17
    1a08:	43 0b       	sbc	r20, r19
    1a0a:	56 0b       	sbc	r21, r22
    1a0c:	c9 0b       	sbc	r28, r25
    1a0e:	d0 09       	sbc	r29, r0
    1a10:	c0 f7       	brcc	.-16     	; 0x1a02 <__ftoa_engine+0x10a>
    1a12:	e1 0c       	add	r14, r1
    1a14:	f1 1e       	adc	r15, r17
    1a16:	43 1f       	adc	r20, r19
    1a18:	56 1f       	adc	r21, r22
    1a1a:	c9 1f       	adc	r28, r25
    1a1c:	d0 1d       	adc	r29, r0
    1a1e:	7e f4       	brtc	.+30     	; 0x1a3e <__ftoa_engine+0x146>
    1a20:	70 33       	cpi	r23, 0x30	; 48
    1a22:	11 f4       	brne	.+4      	; 0x1a28 <__ftoa_engine+0x130>
    1a24:	8a 95       	dec	r24
    1a26:	e6 cf       	rjmp	.-52     	; 0x19f4 <__ftoa_engine+0xfc>
    1a28:	e8 94       	clt
    1a2a:	01 50       	subi	r16, 0x01	; 1
    1a2c:	30 f0       	brcs	.+12     	; 0x1a3a <__ftoa_engine+0x142>
    1a2e:	08 0f       	add	r16, r24
    1a30:	0a f4       	brpl	.+2      	; 0x1a34 <__ftoa_engine+0x13c>
    1a32:	00 27       	eor	r16, r16
    1a34:	02 17       	cp	r16, r18
    1a36:	08 f4       	brcc	.+2      	; 0x1a3a <__ftoa_engine+0x142>
    1a38:	20 2f       	mov	r18, r16
    1a3a:	23 95       	inc	r18
    1a3c:	02 2f       	mov	r16, r18
    1a3e:	7a 33       	cpi	r23, 0x3A	; 58
    1a40:	28 f0       	brcs	.+10     	; 0x1a4c <__ftoa_engine+0x154>
    1a42:	79 e3       	ldi	r23, 0x39	; 57
    1a44:	7d 93       	st	X+, r23
    1a46:	2a 95       	dec	r18
    1a48:	e9 f7       	brne	.-6      	; 0x1a44 <__ftoa_engine+0x14c>
    1a4a:	10 c0       	rjmp	.+32     	; 0x1a6c <__ftoa_engine+0x174>
    1a4c:	7d 93       	st	X+, r23
    1a4e:	2a 95       	dec	r18
    1a50:	89 f6       	brne	.-94     	; 0x19f4 <__ftoa_engine+0xfc>
    1a52:	06 94       	lsr	r0
    1a54:	97 95       	ror	r25
    1a56:	67 95       	ror	r22
    1a58:	37 95       	ror	r19
    1a5a:	17 95       	ror	r17
    1a5c:	17 94       	ror	r1
    1a5e:	e1 18       	sub	r14, r1
    1a60:	f1 0a       	sbc	r15, r17
    1a62:	43 0b       	sbc	r20, r19
    1a64:	56 0b       	sbc	r21, r22
    1a66:	c9 0b       	sbc	r28, r25
    1a68:	d0 09       	sbc	r29, r0
    1a6a:	98 f0       	brcs	.+38     	; 0x1a92 <__ftoa_engine+0x19a>
    1a6c:	23 95       	inc	r18
    1a6e:	7e 91       	ld	r23, -X
    1a70:	73 95       	inc	r23
    1a72:	7a 33       	cpi	r23, 0x3A	; 58
    1a74:	08 f0       	brcs	.+2      	; 0x1a78 <__ftoa_engine+0x180>
    1a76:	70 e3       	ldi	r23, 0x30	; 48
    1a78:	7c 93       	st	X, r23
    1a7a:	20 13       	cpse	r18, r16
    1a7c:	b8 f7       	brcc	.-18     	; 0x1a6c <__ftoa_engine+0x174>
    1a7e:	7e 91       	ld	r23, -X
    1a80:	70 61       	ori	r23, 0x10	; 16
    1a82:	7d 93       	st	X+, r23
    1a84:	30 f0       	brcs	.+12     	; 0x1a92 <__ftoa_engine+0x19a>
    1a86:	83 95       	inc	r24
    1a88:	71 e3       	ldi	r23, 0x31	; 49
    1a8a:	7d 93       	st	X+, r23
    1a8c:	70 e3       	ldi	r23, 0x30	; 48
    1a8e:	2a 95       	dec	r18
    1a90:	e1 f7       	brne	.-8      	; 0x1a8a <__ftoa_engine+0x192>
    1a92:	11 24       	eor	r1, r1
    1a94:	ef 90       	pop	r14
    1a96:	ff 90       	pop	r15
    1a98:	0f 91       	pop	r16
    1a9a:	1f 91       	pop	r17
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	99 27       	eor	r25, r25
    1aa2:	87 fd       	sbrc	r24, 7
    1aa4:	90 95       	com	r25
    1aa6:	08 95       	ret

00001aa8 <__divmodsi4>:
    1aa8:	05 2e       	mov	r0, r21
    1aaa:	97 fb       	bst	r25, 7
    1aac:	1e f4       	brtc	.+6      	; 0x1ab4 <__divmodsi4+0xc>
    1aae:	00 94       	com	r0
    1ab0:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__negsi2>
    1ab4:	57 fd       	sbrc	r21, 7
    1ab6:	07 d0       	rcall	.+14     	; 0x1ac6 <__divmodsi4_neg2>
    1ab8:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__udivmodsi4>
    1abc:	07 fc       	sbrc	r0, 7
    1abe:	03 d0       	rcall	.+6      	; 0x1ac6 <__divmodsi4_neg2>
    1ac0:	4e f4       	brtc	.+18     	; 0x1ad4 <__divmodsi4_exit>
    1ac2:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__negsi2>

00001ac6 <__divmodsi4_neg2>:
    1ac6:	50 95       	com	r21
    1ac8:	40 95       	com	r20
    1aca:	30 95       	com	r19
    1acc:	21 95       	neg	r18
    1ace:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad0:	4f 4f       	sbci	r20, 0xFF	; 255
    1ad2:	5f 4f       	sbci	r21, 0xFF	; 255

00001ad4 <__divmodsi4_exit>:
    1ad4:	08 95       	ret

00001ad6 <__negsi2>:
    1ad6:	90 95       	com	r25
    1ad8:	80 95       	com	r24
    1ada:	70 95       	com	r23
    1adc:	61 95       	neg	r22
    1ade:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae4:	08 95       	ret

00001ae6 <__muluhisi3>:
    1ae6:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <__umulhisi3>
    1aea:	a5 9f       	mul	r26, r21
    1aec:	90 0d       	add	r25, r0
    1aee:	b4 9f       	mul	r27, r20
    1af0:	90 0d       	add	r25, r0
    1af2:	a4 9f       	mul	r26, r20
    1af4:	80 0d       	add	r24, r0
    1af6:	91 1d       	adc	r25, r1
    1af8:	11 24       	eor	r1, r1
    1afa:	08 95       	ret

00001afc <__mulshisi3>:
    1afc:	b7 ff       	sbrs	r27, 7
    1afe:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <__muluhisi3>

00001b02 <__mulohisi3>:
    1b02:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__muluhisi3>
    1b06:	82 1b       	sub	r24, r18
    1b08:	93 0b       	sbc	r25, r19
    1b0a:	08 95       	ret

00001b0c <__prologue_saves__>:
    1b0c:	2f 92       	push	r2
    1b0e:	3f 92       	push	r3
    1b10:	4f 92       	push	r4
    1b12:	5f 92       	push	r5
    1b14:	6f 92       	push	r6
    1b16:	7f 92       	push	r7
    1b18:	8f 92       	push	r8
    1b1a:	9f 92       	push	r9
    1b1c:	af 92       	push	r10
    1b1e:	bf 92       	push	r11
    1b20:	cf 92       	push	r12
    1b22:	df 92       	push	r13
    1b24:	ef 92       	push	r14
    1b26:	ff 92       	push	r15
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	ca 1b       	sub	r28, r26
    1b36:	db 0b       	sbc	r29, r27
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	09 94       	ijmp

00001b44 <__epilogue_restores__>:
    1b44:	2a 88       	ldd	r2, Y+18	; 0x12
    1b46:	39 88       	ldd	r3, Y+17	; 0x11
    1b48:	48 88       	ldd	r4, Y+16	; 0x10
    1b4a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b4c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b4e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b50:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b52:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b54:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b56:	b9 84       	ldd	r11, Y+9	; 0x09
    1b58:	c8 84       	ldd	r12, Y+8	; 0x08
    1b5a:	df 80       	ldd	r13, Y+7	; 0x07
    1b5c:	ee 80       	ldd	r14, Y+6	; 0x06
    1b5e:	fd 80       	ldd	r15, Y+5	; 0x05
    1b60:	0c 81       	ldd	r16, Y+4	; 0x04
    1b62:	1b 81       	ldd	r17, Y+3	; 0x03
    1b64:	aa 81       	ldd	r26, Y+2	; 0x02
    1b66:	b9 81       	ldd	r27, Y+1	; 0x01
    1b68:	ce 0f       	add	r28, r30
    1b6a:	d1 1d       	adc	r29, r1
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	ed 01       	movw	r28, r26
    1b78:	08 95       	ret

00001b7a <__udivmodsi4>:
    1b7a:	a1 e2       	ldi	r26, 0x21	; 33
    1b7c:	1a 2e       	mov	r1, r26
    1b7e:	aa 1b       	sub	r26, r26
    1b80:	bb 1b       	sub	r27, r27
    1b82:	fd 01       	movw	r30, r26
    1b84:	0d c0       	rjmp	.+26     	; 0x1ba0 <__udivmodsi4_ep>

00001b86 <__udivmodsi4_loop>:
    1b86:	aa 1f       	adc	r26, r26
    1b88:	bb 1f       	adc	r27, r27
    1b8a:	ee 1f       	adc	r30, r30
    1b8c:	ff 1f       	adc	r31, r31
    1b8e:	a2 17       	cp	r26, r18
    1b90:	b3 07       	cpc	r27, r19
    1b92:	e4 07       	cpc	r30, r20
    1b94:	f5 07       	cpc	r31, r21
    1b96:	20 f0       	brcs	.+8      	; 0x1ba0 <__udivmodsi4_ep>
    1b98:	a2 1b       	sub	r26, r18
    1b9a:	b3 0b       	sbc	r27, r19
    1b9c:	e4 0b       	sbc	r30, r20
    1b9e:	f5 0b       	sbc	r31, r21

00001ba0 <__udivmodsi4_ep>:
    1ba0:	66 1f       	adc	r22, r22
    1ba2:	77 1f       	adc	r23, r23
    1ba4:	88 1f       	adc	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	1a 94       	dec	r1
    1baa:	69 f7       	brne	.-38     	; 0x1b86 <__udivmodsi4_loop>
    1bac:	60 95       	com	r22
    1bae:	70 95       	com	r23
    1bb0:	80 95       	com	r24
    1bb2:	90 95       	com	r25
    1bb4:	9b 01       	movw	r18, r22
    1bb6:	ac 01       	movw	r20, r24
    1bb8:	bd 01       	movw	r22, r26
    1bba:	cf 01       	movw	r24, r30
    1bbc:	08 95       	ret

00001bbe <__umulhisi3>:
    1bbe:	a2 9f       	mul	r26, r18
    1bc0:	b0 01       	movw	r22, r0
    1bc2:	b3 9f       	mul	r27, r19
    1bc4:	c0 01       	movw	r24, r0
    1bc6:	a3 9f       	mul	r26, r19
    1bc8:	70 0d       	add	r23, r0
    1bca:	81 1d       	adc	r24, r1
    1bcc:	11 24       	eor	r1, r1
    1bce:	91 1d       	adc	r25, r1
    1bd0:	b2 9f       	mul	r27, r18
    1bd2:	70 0d       	add	r23, r0
    1bd4:	81 1d       	adc	r24, r1
    1bd6:	11 24       	eor	r1, r1
    1bd8:	91 1d       	adc	r25, r1
    1bda:	08 95       	ret

00001bdc <_exit>:
    1bdc:	f8 94       	cli

00001bde <__stop_program>:
    1bde:	ff cf       	rjmp	.-2      	; 0x1bde <__stop_program>
